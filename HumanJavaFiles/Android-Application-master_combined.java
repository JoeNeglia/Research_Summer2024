/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * aapt tool from the resource data it found.  It
 * should not be modified by hand.
 */
package android.support.v7.appcompat;

public final class R {
	public static final class anim {
		public static final int abc_fade_in = 0x7f040000;
		public static final int abc_fade_out = 0x7f040001;
		public static final int abc_slide_in_bottom = 0x7f040002;
		public static final int abc_slide_in_top = 0x7f040003;
		public static final int abc_slide_out_bottom = 0x7f040004;
		public static final int abc_slide_out_top = 0x7f040005;
	}
	public static final class attr {
		public static final int actionBarDivider = 0x7f01000f;
		public static final int actionBarItemBackground = 0x7f010010;
		public static final int actionBarSize = 0x7f01000e;
		public static final int actionBarSplitStyle = 0x7f01000c;
		public static final int actionBarStyle = 0x7f01000b;
		public static final int actionBarTabBarStyle = 0x7f010008;
		public static final int actionBarTabStyle = 0x7f010007;
		public static final int actionBarTabTextStyle = 0x7f010009;
		public static final int actionBarWidgetTheme = 0x7f01000d;
		public static final int actionButtonStyle = 0x7f010016;
		public static final int actionDropDownStyle = 0x7f010047;
		public static final int actionLayout = 0x7f01004e;
		public static final int actionMenuTextAppearance = 0x7f010011;
		public static final int actionMenuTextColor = 0x7f010012;
		public static final int actionModeBackground = 0x7f01003c;
		public static final int actionModeCloseButtonStyle = 0x7f01003b;
		public static final int actionModeCloseDrawable = 0x7f01003e;
		public static final int actionModeCopyDrawable = 0x7f010040;
		public static final int actionModeCutDrawable = 0x7f01003f;
		public static final int actionModeFindDrawable = 0x7f010044;
		public static final int actionModePasteDrawable = 0x7f010041;
		public static final int actionModePopupWindowStyle = 0x7f010046;
		public static final int actionModeSelectAllDrawable = 0x7f010042;
		public static final int actionModeShareDrawable = 0x7f010043;
		public static final int actionModeSplitBackground = 0x7f01003d;
		public static final int actionModeStyle = 0x7f01003a;
		public static final int actionModeWebSearchDrawable = 0x7f010045;
		public static final int actionOverflowButtonStyle = 0x7f01000a;
		public static final int actionProviderClass = 0x7f010050;
		public static final int actionViewClass = 0x7f01004f;
		public static final int activityChooserViewStyle = 0x7f01006c;
		public static final int background = 0x7f01002f;
		public static final int backgroundSplit = 0x7f010031;
		public static final int backgroundStacked = 0x7f010030;
		public static final int buttonBarButtonStyle = 0x7f010018;
		public static final int buttonBarStyle = 0x7f010017;
		public static final int customNavigationLayout = 0x7f010032;
		public static final int disableChildrenWhenDisabled = 0x7f010054;
		public static final int displayOptions = 0x7f010028;
		public static final int divider = 0x7f01002e;
		public static final int dividerHorizontal = 0x7f01001b;
		public static final int dividerPadding = 0x7f010056;
		public static final int dividerVertical = 0x7f01001a;
		public static final int dropDownListViewStyle = 0x7f010021;
		public static final int dropdownListPreferredItemHeight = 0x7f010048;
		public static final int expandActivityOverflowButtonDrawable = 0x7f01006b;
		public static final int height = 0x7f010026;
		public static final int homeAsUpIndicator = 0x7f010013;
		public static final int homeLayout = 0x7f010033;
		public static final int icon = 0x7f01002c;
		public static final int iconifiedByDefault = 0x7f01005a;
		public static final int indeterminateProgressStyle = 0x7f010035;
		public static final int initialActivityCount = 0x7f01006a;
		public static final int isLightTheme = 0x7f010059;
		public static final int itemPadding = 0x7f010037;
		public static final int listChoiceBackgroundIndicator = 0x7f01004c;
		public static final int listPopupWindowStyle = 0x7f010022;
		public static final int listPreferredItemHeight = 0x7f01001c;
		public static final int listPreferredItemHeightLarge = 0x7f01001e;
		public static final int listPreferredItemHeightSmall = 0x7f01001d;
		public static final int listPreferredItemPaddingLeft = 0x7f01001f;
		public static final int listPreferredItemPaddingRight = 0x7f010020;
		public static final int logo = 0x7f01002d;
		public static final int navigationMode = 0x7f010027;
		public static final int paddingEnd = 0x7f010039;
		public static final int paddingStart = 0x7f010038;
		public static final int panelMenuListTheme = 0x7f01004b;
		public static final int panelMenuListWidth = 0x7f01004a;
		public static final int popupMenuStyle = 0x7f010049;
		public static final int popupPromptView = 0x7f010053;
		public static final int progressBarPadding = 0x7f010036;
		public static final int progressBarStyle = 0x7f010034;
		public static final int prompt = 0x7f010051;
		public static final int queryHint = 0x7f01005b;
		public static final int searchDropdownBackground = 0x7f01005c;
		public static final int searchResultListItemHeight = 0x7f010065;
		public static final int searchViewAutoCompleteTextView = 0x7f010069;
		public static final int searchViewCloseIcon = 0x7f01005d;
		public static final int searchViewEditQuery = 0x7f010061;
		public static final int searchViewEditQueryBackground = 0x7f010062;
		public static final int searchViewGoIcon = 0x7f01005e;
		public static final int searchViewSearchIcon = 0x7f01005f;
		public static final int searchViewTextField = 0x7f010063;
		public static final int searchViewTextFieldRight = 0x7f010064;
		public static final int searchViewVoiceIcon = 0x7f010060;
		public static final int selectableItemBackground = 0x7f010019;
		public static final int showAsAction = 0x7f01004d;
		public static final int showDividers = 0x7f010055;
		public static final int spinnerDropDownItemStyle = 0x7f010058;
		public static final int spinnerMode = 0x7f010052;
		public static final int spinnerStyle = 0x7f010057;
		public static final int subtitle = 0x7f010029;
		public static final int subtitleTextStyle = 0x7f01002b;
		public static final int textAllCaps = 0x7f01006d;
		public static final int textAppearanceLargePopupMenu = 0x7f010014;
		public static final int textAppearanceListItem = 0x7f010023;
		public static final int textAppearanceListItemSmall = 0x7f010024;
		public static final int textAppearanceSearchResultSubtitle = 0x7f010067;
		public static final int textAppearanceSearchResultTitle = 0x7f010066;
		public static final int textAppearanceSmallPopupMenu = 0x7f010015;
		public static final int textColorSearchUrl = 0x7f010068;
		public static final int title = 0x7f010025;
		public static final int titleTextStyle = 0x7f01002a;
		public static final int windowActionBar = 0x7f010000;
		public static final int windowActionBarOverlay = 0x7f010001;
		public static final int windowFixedHeightMajor = 0x7f010006;
		public static final int windowFixedHeightMinor = 0x7f010004;
		public static final int windowFixedWidthMajor = 0x7f010003;
		public static final int windowFixedWidthMinor = 0x7f010005;
		public static final int windowSplitActionBar = 0x7f010002;
	}
	public static final class bool {
		public static final int abc_action_bar_embed_tabs_pre_jb = 0x7f060000;
		public static final int abc_action_bar_expanded_action_views_exclusive = 0x7f060001;
		public static final int abc_config_actionMenuItemAllCaps = 0x7f060005;
		public static final int abc_config_allowActionMenuItemTextWithIcon = 0x7f060004;
		public static final int abc_config_showMenuShortcutsWhenKeyboardPresent = 0x7f060003;
		public static final int abc_split_action_bar_is_narrow = 0x7f060002;
	}
	public static final class color {
		public static final int abc_search_url_text_holo = 0x7f07003a;
		public static final int abc_search_url_text_normal = 0x7f070000;
		public static final int abc_search_url_text_pressed = 0x7f070002;
		public static final int abc_search_url_text_selected = 0x7f070001;
	}
	public static final class dimen {
		public static final int abc_action_bar_default_height = 0x7f080002;
		public static final int abc_action_bar_icon_vertical_padding = 0x7f080003;
		public static final int abc_action_bar_progress_bar_size = 0x7f08000a;
		public static final int abc_action_bar_stacked_max_height = 0x7f080009;
		public static final int abc_action_bar_stacked_tab_max_width = 0x7f080001;
		public static final int abc_action_bar_subtitle_bottom_margin = 0x7f080007;
		public static final int abc_action_bar_subtitle_text_size = 0x7f080005;
		public static final int abc_action_bar_subtitle_top_margin = 0x7f080006;
		public static final int abc_action_bar_title_text_size = 0x7f080004;
		public static final int abc_action_button_min_width = 0x7f080008;
		public static final int abc_config_prefDialogWidth = 0x7f080000;
		public static final int abc_dropdownitem_icon_width = 0x7f080010;
		public static final int abc_dropdownitem_text_padding_left = 0x7f08000e;
		public static final int abc_dropdownitem_text_padding_right = 0x7f08000f;
		public static final int abc_panel_menu_list_width = 0x7f08000b;
		public static final int abc_search_view_preferred_width = 0x7f08000d;
		public static final int abc_search_view_text_min_width = 0x7f08000c;
		public static final int dialog_fixed_height_major = 0x7f080013;
		public static final int dialog_fixed_height_minor = 0x7f080014;
		public static final int dialog_fixed_width_major = 0x7f080011;
		public static final int dialog_fixed_width_minor = 0x7f080012;
	}
	public static final class drawable {
		public static final int abc_ab_bottom_solid_dark_holo = 0x7f020000;
		public static final int abc_ab_bottom_solid_light_holo = 0x7f020001;
		public static final int abc_ab_bottom_transparent_dark_holo = 0x7f020002;
		public static final int abc_ab_bottom_transparent_light_holo = 0x7f020003;
		public static final int abc_ab_share_pack_holo_dark = 0x7f020004;
		public static final int abc_ab_share_pack_holo_light = 0x7f020005;
		public static final int abc_ab_solid_dark_holo = 0x7f020006;
		public static final int abc_ab_solid_light_holo = 0x7f020007;
		public static final int abc_ab_stacked_solid_dark_holo = 0x7f020008;
		public static final int abc_ab_stacked_solid_light_holo = 0x7f020009;
		public static final int abc_ab_stacked_transparent_dark_holo = 0x7f02000a;
		public static final int abc_ab_stacked_transparent_light_holo = 0x7f02000b;
		public static final int abc_ab_transparent_dark_holo = 0x7f02000c;
		public static final int abc_ab_transparent_light_holo = 0x7f02000d;
		public static final int abc_cab_background_bottom_holo_dark = 0x7f02000e;
		public static final int abc_cab_background_bottom_holo_light = 0x7f02000f;
		public static final int abc_cab_background_top_holo_dark = 0x7f020010;
		public static final int abc_cab_background_top_holo_light = 0x7f020011;
		public static final int abc_ic_ab_back_holo_dark = 0x7f020012;
		public static final int abc_ic_ab_back_holo_light = 0x7f020013;
		public static final int abc_ic_cab_done_holo_dark = 0x7f020014;
		public static final int abc_ic_cab_done_holo_light = 0x7f020015;
		public static final int abc_ic_clear = 0x7f020016;
		public static final int abc_ic_clear_disabled = 0x7f020017;
		public static final int abc_ic_clear_holo_light = 0x7f020018;
		public static final int abc_ic_clear_normal = 0x7f020019;
		public static final int abc_ic_clear_search_api_disabled_holo_light = 0x7f02001a;
		public static final int abc_ic_clear_search_api_holo_light = 0x7f02001b;
		public static final int abc_ic_commit_search_api_holo_dark = 0x7f02001c;
		public static final int abc_ic_commit_search_api_holo_light = 0x7f02001d;
		public static final int abc_ic_go = 0x7f02001e;
		public static final int abc_ic_go_search_api_holo_light = 0x7f02001f;
		public static final int abc_ic_menu_moreoverflow_normal_holo_dark = 0x7f020020;
		public static final int abc_ic_menu_moreoverflow_normal_holo_light = 0x7f020021;
		public static final int abc_ic_menu_share_holo_dark = 0x7f020022;
		public static final int abc_ic_menu_share_holo_light = 0x7f020023;
		public static final int abc_ic_search = 0x7f020024;
		public static final int abc_ic_search_api_holo_light = 0x7f020025;
		public static final int abc_ic_voice_search = 0x7f020026;
		public static final int abc_ic_voice_search_api_holo_light = 0x7f020027;
		public static final int abc_item_background_holo_dark = 0x7f020028;
		public static final int abc_item_background_holo_light = 0x7f020029;
		public static final int abc_list_divider_holo_dark = 0x7f02002a;
		public static final int abc_list_divider_holo_light = 0x7f02002b;
		public static final int abc_list_focused_holo = 0x7f02002c;
		public static final int abc_list_longpressed_holo = 0x7f02002d;
		public static final int abc_list_pressed_holo_dark = 0x7f02002e;
		public static final int abc_list_pressed_holo_light = 0x7f02002f;
		public static final int abc_list_selector_background_transition_holo_dark = 0x7f020030;
		public static final int abc_list_selector_background_transition_holo_light = 0x7f020031;
		public static final int abc_list_selector_disabled_holo_dark = 0x7f020032;
		public static final int abc_list_selector_disabled_holo_light = 0x7f020033;
		public static final int abc_list_selector_holo_dark = 0x7f020034;
		public static final int abc_list_selector_holo_light = 0x7f020035;
		public static final int abc_menu_dropdown_panel_holo_dark = 0x7f020036;
		public static final int abc_menu_dropdown_panel_holo_light = 0x7f020037;
		public static final int abc_menu_hardkey_panel_holo_dark = 0x7f020038;
		public static final int abc_menu_hardkey_panel_holo_light = 0x7f020039;
		public static final int abc_search_dropdown_dark = 0x7f02003a;
		public static final int abc_search_dropdown_light = 0x7f02003b;
		public static final int abc_spinner_ab_default_holo_dark = 0x7f02003c;
		public static final int abc_spinner_ab_default_holo_light = 0x7f02003d;
		public static final int abc_spinner_ab_disabled_holo_dark = 0x7f02003e;
		public static final int abc_spinner_ab_disabled_holo_light = 0x7f02003f;
		public static final int abc_spinner_ab_focused_holo_dark = 0x7f020040;
		public static final int abc_spinner_ab_focused_holo_light = 0x7f020041;
		public static final int abc_spinner_ab_holo_dark = 0x7f020042;
		public static final int abc_spinner_ab_holo_light = 0x7f020043;
		public static final int abc_spinner_ab_pressed_holo_dark = 0x7f020044;
		public static final int abc_spinner_ab_pressed_holo_light = 0x7f020045;
		public static final int abc_tab_indicator_ab_holo = 0x7f020046;
		public static final int abc_tab_selected_focused_holo = 0x7f020047;
		public static final int abc_tab_selected_holo = 0x7f020048;
		public static final int abc_tab_selected_pressed_holo = 0x7f020049;
		public static final int abc_tab_unselected_pressed_holo = 0x7f02004a;
		public static final int abc_textfield_search_default_holo_dark = 0x7f02004b;
		public static final int abc_textfield_search_default_holo_light = 0x7f02004c;
		public static final int abc_textfield_search_right_default_holo_dark = 0x7f02004d;
		public static final int abc_textfield_search_right_default_holo_light = 0x7f02004e;
		public static final int abc_textfield_search_right_selected_holo_dark = 0x7f02004f;
		public static final int abc_textfield_search_right_selected_holo_light = 0x7f020050;
		public static final int abc_textfield_search_selected_holo_dark = 0x7f020051;
		public static final int abc_textfield_search_selected_holo_light = 0x7f020052;
		public static final int abc_textfield_searchview_holo_dark = 0x7f020053;
		public static final int abc_textfield_searchview_holo_light = 0x7f020054;
		public static final int abc_textfield_searchview_right_holo_dark = 0x7f020055;
		public static final int abc_textfield_searchview_right_holo_light = 0x7f020056;
	}
	public static final class id {
		public static final int action_bar = 0x7f05001c;
		public static final int action_bar_activity_content = 0x7f050015;
		public static final int action_bar_container = 0x7f05001b;
		public static final int action_bar_overlay_layout = 0x7f05001f;
		public static final int action_bar_root = 0x7f05001a;
		public static final int action_bar_subtitle = 0x7f050023;
		public static final int action_bar_title = 0x7f050022;
		public static final int action_context_bar = 0x7f05001d;
		public static final int action_menu_divider = 0x7f050016;
		public static final int action_menu_presenter = 0x7f050017;
		public static final int action_mode_close_button = 0x7f050024;
		public static final int activity_chooser_view_content = 0x7f050025;
		public static final int always = 0x7f05000b;
		public static final int beginning = 0x7f050011;
		public static final int checkbox = 0x7f05002d;
		public static final int collapseActionView = 0x7f05000d;
		public static final int default_activity_button = 0x7f050028;
		public static final int dialog = 0x7f05000e;
		public static final int disableHome = 0x7f050008;
		public static final int dropdown = 0x7f05000f;
		public static final int edit_query = 0x7f050030;
		public static final int end = 0x7f050013;
		public static final int expand_activities_button = 0x7f050026;
		public static final int expanded_menu = 0x7f05002c;
		public static final int home = 0x7f050014;
		public static final int homeAsUp = 0x7f050005;
		public static final int icon = 0x7f05002a;
		public static final int ifRoom = 0x7f05000a;
		public static final int image = 0x7f050027;
		public static final int listMode = 0x7f050001;
		public static final int list_item = 0x7f050029;
		public static final int middle = 0x7f050012;
		public static final int never = 0x7f050009;
		public static final int none = 0x7f050010;
		public static final int normal = 0x7f050000;
		public static final int progress_circular = 0x7f050018;
		public static final int progress_horizontal = 0x7f050019;
		public static final int radio = 0x7f05002f;
		public static final int search_badge = 0x7f050032;
		public static final int search_bar = 0x7f050031;
		public static final int search_button = 0x7f050033;
		public static final int search_close_btn = 0x7f050038;
		public static final int search_edit_frame = 0x7f050034;
		public static final int search_go_btn = 0x7f05003a;
		public static final int search_mag_icon = 0x7f050035;
		public static final int search_plate = 0x7f050036;
		public static final int search_src_text = 0x7f050037;
		public static final int search_voice_btn = 0x7f05003b;
		public static final int shortcut = 0x7f05002e;
		public static final int showCustom = 0x7f050007;
		public static final int showHome = 0x7f050004;
		public static final int showTitle = 0x7f050006;
		public static final int split_action_bar = 0x7f05001e;
		public static final int submit_area = 0x7f050039;
		public static final int tabMode = 0x7f050002;
		public static final int title = 0x7f05002b;
		public static final int top_action_bar = 0x7f050020;
		public static final int up = 0x7f050021;
		public static final int useLogo = 0x7f050003;
		public static final int withText = 0x7f05000c;
	}
	public static final class integer {
		public static final int abc_max_action_buttons = 0x7f090000;
	}
	public static final class layout {
		public static final int abc_action_bar_decor = 0x7f030000;
		public static final int abc_action_bar_decor_include = 0x7f030001;
		public static final int abc_action_bar_decor_overlay = 0x7f030002;
		public static final int abc_action_bar_home = 0x7f030003;
		public static final int abc_action_bar_tab = 0x7f030004;
		public static final int abc_action_bar_tabbar = 0x7f030005;
		public static final int abc_action_bar_title_item = 0x7f030006;
		public static final int abc_action_bar_view_list_nav_layout = 0x7f030007;
		public static final int abc_action_menu_item_layout = 0x7f030008;
		public static final int abc_action_menu_layout = 0x7f030009;
		public static final int abc_action_mode_bar = 0x7f03000a;
		public static final int abc_action_mode_close_item = 0x7f03000b;
		public static final int abc_activity_chooser_view = 0x7f03000c;
		public static final int abc_activity_chooser_view_include = 0x7f03000d;
		public static final int abc_activity_chooser_view_list_item = 0x7f03000e;
		public static final int abc_expanded_menu_layout = 0x7f03000f;
		public static final int abc_list_menu_item_checkbox = 0x7f030010;
		public static final int abc_list_menu_item_icon = 0x7f030011;
		public static final int abc_list_menu_item_layout = 0x7f030012;
		public static final int abc_list_menu_item_radio = 0x7f030013;
		public static final int abc_popup_menu_item_layout = 0x7f030014;
		public static final int abc_search_dropdown_item_icons_2line = 0x7f030015;
		public static final int abc_search_view = 0x7f030016;
		public static final int abc_simple_decor = 0x7f030017;
		public static final int support_simple_spinner_dropdown_item = 0x7f030042;
	}
	public static final class string {
		public static final int abc_action_bar_home_description = 0x7f0a0001;
		public static final int abc_action_bar_up_description = 0x7f0a0002;
		public static final int abc_action_menu_overflow_description = 0x7f0a0003;
		public static final int abc_action_mode_done = 0x7f0a0000;
		public static final int abc_activity_chooser_view_see_all = 0x7f0a000a;
		public static final int abc_activitychooserview_choose_application = 0x7f0a0009;
		public static final int abc_searchview_description_clear = 0x7f0a0006;
		public static final int abc_searchview_description_query = 0x7f0a0005;
		public static final int abc_searchview_description_search = 0x7f0a0004;
		public static final int abc_searchview_description_submit = 0x7f0a0007;
		public static final int abc_searchview_description_voice = 0x7f0a0008;
		public static final int abc_shareactionprovider_share_with = 0x7f0a000c;
		public static final int abc_shareactionprovider_share_with_application = 0x7f0a000b;
	}
	public static final class style {
		public static final int TextAppearance_AppCompat_Base_CompactMenu_Dialog = 0x7f0b0063;
		public static final int TextAppearance_AppCompat_Base_SearchResult = 0x7f0b006d;
		public static final int TextAppearance_AppCompat_Base_SearchResult_Subtitle = 0x7f0b006f;
		public static final int TextAppearance_AppCompat_Base_SearchResult_Title = 0x7f0b006e;
		public static final int TextAppearance_AppCompat_Base_Widget_PopupMenu_Large = 0x7f0b0069;
		public static final int TextAppearance_AppCompat_Base_Widget_PopupMenu_Small = 0x7f0b006a;
		public static final int TextAppearance_AppCompat_Light_Base_SearchResult = 0x7f0b0070;
		public static final int TextAppearance_AppCompat_Light_Base_SearchResult_Subtitle = 0x7f0b0072;
		public static final int TextAppearance_AppCompat_Light_Base_SearchResult_Title = 0x7f0b0071;
		public static final int TextAppearance_AppCompat_Light_Base_Widget_PopupMenu_Large = 0x7f0b006b;
		public static final int TextAppearance_AppCompat_Light_Base_Widget_PopupMenu_Small = 0x7f0b006c;
		public static final int TextAppearance_AppCompat_Light_SearchResult_Subtitle = 0x7f0b0035;
		public static final int TextAppearance_AppCompat_Light_SearchResult_Title = 0x7f0b0034;
		public static final int TextAppearance_AppCompat_Light_Widget_PopupMenu_Large = 0x7f0b0030;
		public static final int TextAppearance_AppCompat_Light_Widget_PopupMenu_Small = 0x7f0b0031;
		public static final int TextAppearance_AppCompat_SearchResult_Subtitle = 0x7f0b0033;
		public static final int TextAppearance_AppCompat_SearchResult_Title = 0x7f0b0032;
		public static final int TextAppearance_AppCompat_Widget_ActionBar_Menu = 0x7f0b001a;
		public static final int TextAppearance_AppCompat_Widget_ActionBar_Subtitle = 0x7f0b0006;
		public static final int TextAppearance_AppCompat_Widget_ActionBar_Subtitle_Inverse = 0x7f0b0008;
		public static final int TextAppearance_AppCompat_Widget_ActionBar_Title = 0x7f0b0005;
		public static final int TextAppearance_AppCompat_Widget_ActionBar_Title_Inverse = 0x7f0b0007;
		public static final int TextAppearance_AppCompat_Widget_ActionMode_Subtitle = 0x7f0b001e;
		public static final int TextAppearance_AppCompat_Widget_ActionMode_Subtitle_Inverse = 0x7f0b0020;
		public static final int TextAppearance_AppCompat_Widget_ActionMode_Title = 0x7f0b001d;
		public static final int TextAppearance_AppCompat_Widget_ActionMode_Title_Inverse = 0x7f0b001f;
		public static final int TextAppearance_AppCompat_Widget_Base_ActionBar_Menu = 0x7f0b0054;
		public static final int TextAppearance_AppCompat_Widget_Base_ActionBar_Subtitle = 0x7f0b0056;
		public static final int TextAppearance_AppCompat_Widget_Base_ActionBar_Subtitle_Inverse = 0x7f0b0058;
		public static final int TextAppearance_AppCompat_Widget_Base_ActionBar_Title = 0x7f0b0055;
		public static final int TextAppearance_AppCompat_Widget_Base_ActionBar_Title_Inverse = 0x7f0b0057;
		public static final int TextAppearance_AppCompat_Widget_Base_ActionMode_Subtitle = 0x7f0b0051;
		public static final int TextAppearance_AppCompat_Widget_Base_ActionMode_Subtitle_Inverse = 0x7f0b0053;
		public static final int TextAppearance_AppCompat_Widget_Base_ActionMode_Title = 0x7f0b0050;
		public static final int TextAppearance_AppCompat_Widget_Base_ActionMode_Title_Inverse = 0x7f0b0052;
		public static final int TextAppearance_AppCompat_Widget_Base_DropDownItem = 0x7f0b0061;
		public static final int TextAppearance_AppCompat_Widget_DropDownItem = 0x7f0b0021;
		public static final int TextAppearance_AppCompat_Widget_PopupMenu_Large = 0x7f0b002e;
		public static final int TextAppearance_AppCompat_Widget_PopupMenu_Small = 0x7f0b002f;
		public static final int TextAppearance_Widget_AppCompat_Base_ExpandedMenu_Item = 0x7f0b0062;
		public static final int TextAppearance_Widget_AppCompat_ExpandedMenu_Item = 0x7f0b0028;
		public static final int Theme_AppCompat = 0x7f0b0077;
		public static final int Theme_AppCompat_Base_CompactMenu = 0x7f0b0083;
		public static final int Theme_AppCompat_Base_CompactMenu_Dialog = 0x7f0b0084;
		public static final int Theme_AppCompat_CompactMenu = 0x7f0b007c;
		public static final int Theme_AppCompat_CompactMenu_Dialog = 0x7f0b007d;
		public static final int Theme_AppCompat_DialogWhenLarge = 0x7f0b007a;
		public static final int Theme_AppCompat_Light = 0x7f0b0078;
		public static final int Theme_AppCompat_Light_DarkActionBar = 0x7f0b0079;
		public static final int Theme_AppCompat_Light_DialogWhenLarge = 0x7f0b007b;
		public static final int Theme_Base = 0x7f0b007e;
		public static final int Theme_Base_AppCompat = 0x7f0b0080;
		public static final int Theme_Base_AppCompat_DialogWhenLarge = 0x7f0b0085;
		public static final int Theme_Base_AppCompat_DialogWhenLarge_Base = 0x7f0b0089;
		public static final int Theme_Base_AppCompat_Dialog_FixedSize = 0x7f0b0087;
		public static final int Theme_Base_AppCompat_Dialog_Light_FixedSize = 0x7f0b0088;
		public static final int Theme_Base_AppCompat_Light = 0x7f0b0081;
		public static final int Theme_Base_AppCompat_Light_DarkActionBar = 0x7f0b0082;
		public static final int Theme_Base_AppCompat_Light_DialogWhenLarge = 0x7f0b0086;
		public static final int Theme_Base_AppCompat_Light_DialogWhenLarge_Base = 0x7f0b008a;
		public static final int Theme_Base_Light = 0x7f0b007f;
		public static final int Widget_AppCompat_ActionBar = 0x7f0b0000;
		public static final int Widget_AppCompat_ActionBar_Solid = 0x7f0b0002;
		public static final int Widget_AppCompat_ActionBar_TabBar = 0x7f0b0011;
		public static final int Widget_AppCompat_ActionBar_TabText = 0x7f0b0017;
		public static final int Widget_AppCompat_ActionBar_TabView = 0x7f0b0014;
		public static final int Widget_AppCompat_ActionButton = 0x7f0b000b;
		public static final int Widget_AppCompat_ActionButton_CloseMode = 0x7f0b000d;
		public static final int Widget_AppCompat_ActionButton_Overflow = 0x7f0b000f;
		public static final int Widget_AppCompat_ActionMode = 0x7f0b001b;
		public static final int Widget_AppCompat_ActivityChooserView = 0x7f0b0038;
		public static final int Widget_AppCompat_AutoCompleteTextView = 0x7f0b0036;
		public static final int Widget_AppCompat_Base_ActionBar = 0x7f0b003a;
		public static final int Widget_AppCompat_Base_ActionBar_Solid = 0x7f0b003c;
		public static final int Widget_AppCompat_Base_ActionBar_TabBar = 0x7f0b0045;
		public static final int Widget_AppCompat_Base_ActionBar_TabText = 0x7f0b004b;
		public static final int Widget_AppCompat_Base_ActionBar_TabView = 0x7f0b0048;
		public static final int Widget_AppCompat_Base_ActionButton = 0x7f0b003f;
		public static final int Widget_AppCompat_Base_ActionButton_CloseMode = 0x7f0b0041;
		public static final int Widget_AppCompat_Base_ActionButton_Overflow = 0x7f0b0043;
		public static final int Widget_AppCompat_Base_ActionMode = 0x7f0b004e;
		public static final int Widget_AppCompat_Base_ActivityChooserView = 0x7f0b0075;
		public static final int Widget_AppCompat_Base_AutoCompleteTextView = 0x7f0b0073;
		public static final int Widget_AppCompat_Base_DropDownItem_Spinner = 0x7f0b005d;
		public static final int Widget_AppCompat_Base_ListPopupWindow = 0x7f0b0065;
		public static final int Widget_AppCompat_Base_ListView_DropDown = 0x7f0b005f;
		public static final int Widget_AppCompat_Base_ListView_Menu = 0x7f0b0064;
		public static final int Widget_AppCompat_Base_PopupMenu = 0x7f0b0067;
		public static final int Widget_AppCompat_Base_ProgressBar = 0x7f0b005a;
		public static final int Widget_AppCompat_Base_ProgressBar_Horizontal = 0x7f0b0059;
		public static final int Widget_AppCompat_Base_Spinner = 0x7f0b005b;
		public static final int Widget_AppCompat_DropDownItem_Spinner = 0x7f0b0024;
		public static final int Widget_AppCompat_Light_ActionBar = 0x7f0b0001;
		public static final int Widget_AppCompat_Light_ActionBar_Solid = 0x7f0b0003;
		public static final int Widget_AppCompat_Light_ActionBar_Solid_Inverse = 0x7f0b0004;
		public static final int Widget_AppCompat_Light_ActionBar_TabBar = 0x7f0b0012;
		public static final int Widget_AppCompat_Light_ActionBar_TabBar_Inverse = 0x7f0b0013;
		public static final int Widget_AppCompat_Light_ActionBar_TabText = 0x7f0b0018;
		public static final int Widget_AppCompat_Light_ActionBar_TabText_Inverse = 0x7f0b0019;
		public static final int Widget_AppCompat_Light_ActionBar_TabView = 0x7f0b0015;
		public static final int Widget_AppCompat_Light_ActionBar_TabView_Inverse = 0x7f0b0016;
		public static final int Widget_AppCompat_Light_ActionButton = 0x7f0b000c;
		public static final int Widget_AppCompat_Light_ActionButton_CloseMode = 0x7f0b000e;
		public static final int Widget_AppCompat_Light_ActionButton_Overflow = 0x7f0b0010;
		public static final int Widget_AppCompat_Light_ActionMode_Inverse = 0x7f0b001c;
		public static final int Widget_AppCompat_Light_ActivityChooserView = 0x7f0b0039;
		public static final int Widget_AppCompat_Light_AutoCompleteTextView = 0x7f0b0037;
		public static final int Widget_AppCompat_Light_Base_ActionBar = 0x7f0b003b;
		public static final int Widget_AppCompat_Light_Base_ActionBar_Solid = 0x7f0b003d;
		public static final int Widget_AppCompat_Light_Base_ActionBar_Solid_Inverse = 0x7f0b003e;
		public static final int Widget_AppCompat_Light_Base_ActionBar_TabBar = 0x7f0b0046;
		public static final int Widget_AppCompat_Light_Base_ActionBar_TabBar_Inverse = 0x7f0b0047;
		public static final int Widget_AppCompat_Light_Base_ActionBar_TabText = 0x7f0b004c;
		public static final int Widget_AppCompat_Light_Base_ActionBar_TabText_Inverse = 0x7f0b004d;
		public static final int Widget_AppCompat_Light_Base_ActionBar_TabView = 0x7f0b0049;
		public static final int Widget_AppCompat_Light_Base_ActionBar_TabView_Inverse = 0x7f0b004a;
		public static final int Widget_AppCompat_Light_Base_ActionButton = 0x7f0b0040;
		public static final int Widget_AppCompat_Light_Base_ActionButton_CloseMode = 0x7f0b0042;
		public static final int Widget_AppCompat_Light_Base_ActionButton_Overflow = 0x7f0b0044;
		public static final int Widget_AppCompat_Light_Base_ActionMode_Inverse = 0x7f0b004f;
		public static final int Widget_AppCompat_Light_Base_ActivityChooserView = 0x7f0b0076;
		public static final int Widget_AppCompat_Light_Base_AutoCompleteTextView = 0x7f0b0074;
		public static final int Widget_AppCompat_Light_Base_DropDownItem_Spinner = 0x7f0b005e;
		public static final int Widget_AppCompat_Light_Base_ListPopupWindow = 0x7f0b0066;
		public static final int Widget_AppCompat_Light_Base_ListView_DropDown = 0x7f0b0060;
		public static final int Widget_AppCompat_Light_Base_PopupMenu = 0x7f0b0068;
		public static final int Widget_AppCompat_Light_Base_Spinner = 0x7f0b005c;
		public static final int Widget_AppCompat_Light_DropDownItem_Spinner = 0x7f0b0025;
		public static final int Widget_AppCompat_Light_ListPopupWindow = 0x7f0b002a;
		public static final int Widget_AppCompat_Light_ListView_DropDown = 0x7f0b0027;
		public static final int Widget_AppCompat_Light_PopupMenu = 0x7f0b002c;
		public static final int Widget_AppCompat_Light_Spinner_DropDown_ActionBar = 0x7f0b0023;
		public static final int Widget_AppCompat_ListPopupWindow = 0x7f0b0029;
		public static final int Widget_AppCompat_ListView_DropDown = 0x7f0b0026;
		public static final int Widget_AppCompat_ListView_Menu = 0x7f0b002d;
		public static final int Widget_AppCompat_PopupMenu = 0x7f0b002b;
		public static final int Widget_AppCompat_ProgressBar = 0x7f0b000a;
		public static final int Widget_AppCompat_ProgressBar_Horizontal = 0x7f0b0009;
		public static final int Widget_AppCompat_Spinner_DropDown_ActionBar = 0x7f0b0022;
	}
	public static final class styleable {
		public static final int[] ActionBar = { 0x7f010025, 0x7f010026, 0x7f010027, 0x7f010028, 0x7f010029, 0x7f01002a, 0x7f01002b, 0x7f01002c, 0x7f01002d, 0x7f01002e, 0x7f01002f, 0x7f010030, 0x7f010031, 0x7f010032, 0x7f010033, 0x7f010034, 0x7f010035, 0x7f010036, 0x7f010037 };
		public static final int[] ActionBarLayout = { 0x010100b3 };
		public static final int ActionBarLayout_android_layout_gravity = 0;
		public static final int[] ActionBarWindow = { 0x7f010000, 0x7f010001, 0x7f010002, 0x7f010003, 0x7f010004, 0x7f010005, 0x7f010006 };
		public static final int ActionBarWindow_windowActionBar = 0;
		public static final int ActionBarWindow_windowActionBarOverlay = 1;
		public static final int ActionBarWindow_windowFixedHeightMajor = 6;
		public static final int ActionBarWindow_windowFixedHeightMinor = 4;
		public static final int ActionBarWindow_windowFixedWidthMajor = 3;
		public static final int ActionBarWindow_windowFixedWidthMinor = 5;
		public static final int ActionBarWindow_windowSplitActionBar = 2;
		public static final int ActionBar_background = 10;
		public static final int ActionBar_backgroundSplit = 12;
		public static final int ActionBar_backgroundStacked = 11;
		public static final int ActionBar_customNavigationLayout = 13;
		public static final int ActionBar_displayOptions = 3;
		public static final int ActionBar_divider = 9;
		public static final int ActionBar_height = 1;
		public static final int ActionBar_homeLayout = 14;
		public static final int ActionBar_icon = 7;
		public static final int ActionBar_indeterminateProgressStyle = 16;
		public static final int ActionBar_itemPadding = 18;
		public static final int ActionBar_logo = 8;
		public static final int ActionBar_navigationMode = 2;
		public static final int ActionBar_progressBarPadding = 17;
		public static final int ActionBar_progressBarStyle = 15;
		public static final int ActionBar_subtitle = 4;
		public static final int ActionBar_subtitleTextStyle = 6;
		public static final int ActionBar_title = 0;
		public static final int ActionBar_titleTextStyle = 5;
		public static final int[] ActionMenuItemView = { 0x0101013f };
		public static final int ActionMenuItemView_android_minWidth = 0;
		public static final int[] ActionMenuView = { };
		public static final int[] ActionMode = { 0x7f010026, 0x7f01002a, 0x7f01002b, 0x7f01002f, 0x7f010031 };
		public static final int ActionMode_background = 3;
		public static final int ActionMode_backgroundSplit = 4;
		public static final int ActionMode_height = 0;
		public static final int ActionMode_subtitleTextStyle = 2;
		public static final int ActionMode_titleTextStyle = 1;
		public static final int[] ActivityChooserView = { 0x7f01006a, 0x7f01006b };
		public static final int ActivityChooserView_expandActivityOverflowButtonDrawable = 1;
		public static final int ActivityChooserView_initialActivityCount = 0;
		public static final int[] CompatTextView = { 0x7f01006d };
		public static final int CompatTextView_textAllCaps = 0;
		public static final int[] LinearLayoutICS = { 0x7f01002e, 0x7f010055, 0x7f010056 };
		public static final int LinearLayoutICS_divider = 0;
		public static final int LinearLayoutICS_dividerPadding = 2;
		public static final int LinearLayoutICS_showDividers = 1;
		public static final int[] MenuGroup = { 0x0101000e, 0x010100d0, 0x01010194, 0x010101de, 0x010101df, 0x010101e0 };
		public static final int MenuGroup_android_checkableBehavior = 5;
		public static final int MenuGroup_android_enabled = 0;
		public static final int MenuGroup_android_id = 1;
		public static final int MenuGroup_android_menuCategory = 3;
		public static final int MenuGroup_android_orderInCategory = 4;
		public static final int MenuGroup_android_visible = 2;
		public static final int[] MenuItem = { 0x01010002, 0x0101000e, 0x010100d0, 0x01010106, 0x01010194, 0x010101de, 0x010101df, 0x010101e1, 0x010101e2, 0x010101e3, 0x010101e4, 0x010101e5, 0x0101026f, 0x7f01004d, 0x7f01004e, 0x7f01004f, 0x7f010050 };
		public static final int MenuItem_actionLayout = 14;
		public static final int MenuItem_actionProviderClass = 16;
		public static final int MenuItem_actionViewClass = 15;
		public static final int MenuItem_android_alphabeticShortcut = 9;
		public static final int MenuItem_android_checkable = 11;
		public static final int MenuItem_android_checked = 3;
		public static final int MenuItem_android_enabled = 1;
		public static final int MenuItem_android_icon = 0;
		public static final int MenuItem_android_id = 2;
		public static final int MenuItem_android_menuCategory = 5;
		public static final int MenuItem_android_numericShortcut = 10;
		public static final int MenuItem_android_onClick = 12;
		public static final int MenuItem_android_orderInCategory = 6;
		public static final int MenuItem_android_title = 7;
		public static final int MenuItem_android_titleCondensed = 8;
		public static final int MenuItem_android_visible = 4;
		public static final int MenuItem_showAsAction = 13;
		public static final int[] MenuView = { 0x010100ae, 0x0101012c, 0x0101012d, 0x0101012e, 0x0101012f, 0x01010130, 0x01010131, 0x01010435 };
		public static final int MenuView_android_headerBackground = 4;
		public static final int MenuView_android_horizontalDivider = 2;
		public static final int MenuView_android_itemBackground = 5;
		public static final int MenuView_android_itemIconDisabledAlpha = 6;
		public static final int MenuView_android_itemTextAppearance = 1;
		public static final int MenuView_android_preserveIconSpacing = 7;
		public static final int MenuView_android_verticalDivider = 3;
		public static final int MenuView_android_windowAnimationStyle = 0;
		public static final int[] SearchView = { 0x0101011f, 0x01010220, 0x01010264, 0x7f01005a, 0x7f01005b };
		public static final int SearchView_android_imeOptions = 2;
		public static final int SearchView_android_inputType = 1;
		public static final int SearchView_android_maxWidth = 0;
		public static final int SearchView_iconifiedByDefault = 3;
		public static final int SearchView_queryHint = 4;
		public static final int[] Spinner = { 0x010100af, 0x01010175, 0x01010176, 0x01010262, 0x010102ac, 0x010102ad, 0x7f010051, 0x7f010052, 0x7f010053, 0x7f010054 };
		public static final int Spinner_android_dropDownHorizontalOffset = 4;
		public static final int Spinner_android_dropDownSelector = 1;
		public static final int Spinner_android_dropDownVerticalOffset = 5;
		public static final int Spinner_android_dropDownWidth = 3;
		public static final int Spinner_android_gravity = 0;
		public static final int Spinner_android_popupBackground = 2;
		public static final int Spinner_disableChildrenWhenDisabled = 9;
		public static final int Spinner_popupPromptView = 8;
		public static final int Spinner_prompt = 6;
		public static final int Spinner_spinnerMode = 7;
		public static final int[] Theme = { 0x7f010047, 0x7f010048, 0x7f010049, 0x7f01004a, 0x7f01004b, 0x7f01004c };
		public static final int Theme_actionDropDownStyle = 0;
		public static final int Theme_dropdownListPreferredItemHeight = 1;
		public static final int Theme_listChoiceBackgroundIndicator = 5;
		public static final int Theme_panelMenuListTheme = 4;
		public static final int Theme_panelMenuListWidth = 3;
		public static final int Theme_popupMenuStyle = 2;
		public static final int[] View = { 0x010100da, 0x7f010038, 0x7f010039 };
		public static final int View_android_focusable = 0;
		public static final int View_paddingEnd = 2;
		public static final int View_paddingStart = 1;
	}
}


/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * aapt tool from the resource data it found.  It
 * should not be modified by hand.
 */

package com.d_andaman;

public final class R {
    public static final class anim {
        public static final int abc_fade_in=0x7f040000;
        public static final int abc_fade_out=0x7f040001;
        public static final int abc_slide_in_bottom=0x7f040002;
        public static final int abc_slide_in_top=0x7f040003;
        public static final int abc_slide_out_bottom=0x7f040004;
        public static final int abc_slide_out_top=0x7f040005;
        public static final int slide_down=0x7f040006;
    }
    public static final class array {
        public static final int cash=0x7f0c000d;
        public static final int cloth=0x7f0c000e;
        public static final int cyclone=0x7f0c0002;
        public static final int cycloned=0x7f0c0003;
        public static final int document=0x7f0c000a;
        public static final int earthquake=0x7f0c0000;
        public static final int earthquaked=0x7f0c0001;
        public static final int eatable=0x7f0c000c;
        public static final int emergency=0x7f0c000b;
        public static final int fire=0x7f0c0004;
        public static final int fired=0x7f0c0005;
        public static final int flood=0x7f0c0008;
        public static final int floodd=0x7f0c0009;
        public static final int list=0x7f0c000f;
        public static final int tsunami=0x7f0c0006;
        public static final int tsunamid=0x7f0c0007;
    }
    public static final class attr {
        /**  Custom divider drawable to use for elements in the action bar. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int actionBarDivider=0x7f01000f;
        /**  Custom item state list drawable background for action bar items. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int actionBarItemBackground=0x7f010010;
        /**  Size of the Action Bar, including the contextual
         bar used to present Action Modes. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int actionBarSize=0x7f01000e;
        /**  Reference to a theme that should be used to inflate widgets
         and layouts destined for the action bar. Most of the time
         this will be a reference to the current theme, but when
         the action bar has a significantly different contrast
         profile than the rest of the activity the difference
         can become important. If this is set to @null the current
         theme will be used.
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int actionBarSplitStyle=0x7f01000c;
        /**  Reference to a style for the Action Bar 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int actionBarStyle=0x7f01000b;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int actionBarTabBarStyle=0x7f010008;
        /**  Default style for tabs within an action bar 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int actionBarTabStyle=0x7f010007;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int actionBarTabTextStyle=0x7f010009;
        /**  Reference to a theme that should be used to inflate widgets
         and layouts destined for the action bar. Most of the time
         this will be a reference to the current theme, but when
         the action bar has a significantly different contrast
         profile than the rest of the activity the difference
         can become important. If this is set to @null the current
         theme will be used.
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int actionBarWidgetTheme=0x7f01000d;
        /**  Default action button style. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int actionButtonStyle=0x7f010016;
        /**  Default ActionBar dropdown style. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int actionDropDownStyle=0x7f010047;
        /**  An optional layout to be used as an action view.
             See {@link android.view.MenuItem#setActionView(android.view.View)}
             for more info. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int actionLayout=0x7f01004e;
        /**  TextAppearance style that will be applied to text that
         appears within action menu items. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int actionMenuTextAppearance=0x7f010011;
        /**  Color for text that appears within action menu items. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public static final int actionMenuTextColor=0x7f010012;
        /**  Background drawable to use for action mode UI 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int actionModeBackground=0x7f01003c;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int actionModeCloseButtonStyle=0x7f01003b;
        /**  Drawable to use for the close action mode button 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int actionModeCloseDrawable=0x7f01003e;
        /**  Drawable to use for the Copy action button in Contextual Action Bar 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int actionModeCopyDrawable=0x7f010040;
        /**  Drawable to use for the Cut action button in Contextual Action Bar 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int actionModeCutDrawable=0x7f01003f;
        /**  Drawable to use for the Find action button in WebView selection action modes 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int actionModeFindDrawable=0x7f010044;
        /**  Drawable to use for the Paste action button in Contextual Action Bar 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int actionModePasteDrawable=0x7f010041;
        /**  PopupWindow style to use for action modes when showing as a window overlay. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int actionModePopupWindowStyle=0x7f010046;
        /**  Drawable to use for the Select all action button in Contextual Action Bar 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int actionModeSelectAllDrawable=0x7f010042;
        /**  Drawable to use for the Share action button in WebView selection action modes 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int actionModeShareDrawable=0x7f010043;
        /**  Background drawable to use for action mode UI in the lower split bar 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int actionModeSplitBackground=0x7f01003d;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int actionModeStyle=0x7f01003a;
        /**  Drawable to use for the Web Search action button in WebView selection action modes 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int actionModeWebSearchDrawable=0x7f010045;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int actionOverflowButtonStyle=0x7f01000a;
        /**  The name of an optional ActionProvider class to instantiate an action view
             and perform operations such as default action for that menu item.
             See {@link android.view.MenuItem#setActionProvider(android.view.ActionProvider)}
             for more info. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int actionProviderClass=0x7f010050;
        /**  The name of an optional View class to instantiate and use as an
             action view. See {@link android.view.MenuItem#setActionView(android.view.View)}
             for more info. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int actionViewClass=0x7f01004f;
        /**  Default ActivityChooserView style. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int activityChooserViewStyle=0x7f01006c;
        /**  Specifies a background drawable for the action bar. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int background=0x7f01002f;
        /**  Specifies a background drawable for the bottom component of a split action bar. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public static final int backgroundSplit=0x7f010031;
        /**  Specifies a background drawable for a second stacked row of the action bar. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public static final int backgroundStacked=0x7f010030;
        /**  A style that may be applied to Buttons placed within a
         LinearLayout with the style buttonBarStyle to form a button bar. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int buttonBarButtonStyle=0x7f010018;
        /**  A style that may be applied to horizontal LinearLayouts
         to form a button bar. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int buttonBarStyle=0x7f010017;
        /**  Specifies a layout for custom navigation. Overrides navigationMode. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int customNavigationLayout=0x7f010032;
        /**  Whether this spinner should mark child views as enabled/disabled when
             the spinner itself is enabled/disabled. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int disableChildrenWhenDisabled=0x7f010054;
        /**  Options affecting how the action bar is displayed. 
         <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>useLogo</code></td><td>0x1</td><td></td></tr>
<tr><td><code>showHome</code></td><td>0x2</td><td></td></tr>
<tr><td><code>homeAsUp</code></td><td>0x4</td><td></td></tr>
<tr><td><code>showTitle</code></td><td>0x8</td><td></td></tr>
<tr><td><code>showCustom</code></td><td>0x10</td><td></td></tr>
<tr><td><code>disableHome</code></td><td>0x20</td><td></td></tr>
</table>
         */
        public static final int displayOptions=0x7f010028;
        /**  Specifies the drawable used for item dividers. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int divider=0x7f01002e;
        /**  A drawable that may be used as a horizontal divider between visual elements. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int dividerHorizontal=0x7f01001b;
        /**  Size of padding on either end of a divider. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int dividerPadding=0x7f010056;
        /**  A drawable that may be used as a vertical divider between visual elements. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int dividerVertical=0x7f01001a;
        /**  ListPopupWindow comaptibility 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int dropDownListViewStyle=0x7f010021;
        /**  The preferred item height for dropdown lists. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int dropdownListPreferredItemHeight=0x7f010048;
        /**  The drawable to show in the button for expanding the activities overflow popup.
             <strong>Note:</strong> Clients would like to set this drawable
             as a clue about the action the chosen activity will perform. For
             example, if share activity is to be chosen the drawable should
             give a clue that sharing is to be performed.
         
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int expandActivityOverflowButtonDrawable=0x7f01006b;
        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int height=0x7f010026;
        /**  Specifies a drawable to use for the 'home as up' indicator. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int homeAsUpIndicator=0x7f010013;
        /**  Specifies a layout to use for the "home" section of the action bar. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int homeLayout=0x7f010033;
        /**  Specifies the drawable used for the application icon. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int icon=0x7f01002c;
        /**  The default state of the SearchView. If true, it will be iconified when not in
             use and expanded when clicked. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int iconifiedByDefault=0x7f01005a;
        /**  Specifies a style resource to use for an indeterminate progress spinner. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int indeterminateProgressStyle=0x7f010035;
        /**  The maximal number of items initially shown in the activity list. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int initialActivityCount=0x7f01006a;
        /**  Specifies whether the theme is light, otherwise it is dark. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int isLightTheme=0x7f010059;
        /**  Specifies padding that should be applied to the left and right sides of
             system-provided items in the bar. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int itemPadding=0x7f010037;
        /**  Drawable used as a background for selected list items. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int listChoiceBackgroundIndicator=0x7f01004c;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int listPopupWindowStyle=0x7f010022;
        /**  The preferred list item height. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int listPreferredItemHeight=0x7f01001c;
        /**  A larger, more robust list item height. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int listPreferredItemHeightLarge=0x7f01001e;
        /**  A smaller, sleeker list item height. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int listPreferredItemHeightSmall=0x7f01001d;
        /**  The preferred padding along the left edge of list items. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int listPreferredItemPaddingLeft=0x7f01001f;
        /**  The preferred padding along the right edge of list items. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int listPreferredItemPaddingRight=0x7f010020;
        /**  Specifies the drawable used for the application logo. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int logo=0x7f01002d;
        /**  The type of navigation to use. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>normal</code></td><td>0</td><td> Normal static title text </td></tr>
<tr><td><code>listMode</code></td><td>1</td><td> The action bar will use a selection list for navigation. </td></tr>
<tr><td><code>tabMode</code></td><td>2</td><td> The action bar will use a series of horizontal tabs for navigation. </td></tr>
</table>
         */
        public static final int navigationMode=0x7f010027;
        /**  Sets the padding, in pixels, of the end edge; see {@link android.R.attr#padding}. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int paddingEnd=0x7f010039;
        /**  Sets the padding, in pixels, of the start edge; see {@link android.R.attr#padding}. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int paddingStart=0x7f010038;
        /**  Default Panel Menu style. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int panelMenuListTheme=0x7f01004b;
        /**  Default Panel Menu width. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int panelMenuListWidth=0x7f01004a;
        /**  Default PopupMenu style. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int popupMenuStyle=0x7f010049;
        /**  Reference to a layout to use for displaying a prompt in the dropdown for
             spinnerMode="dropdown". This layout must contain a TextView with the id
             {@code @android:id/text1} to be populated with the prompt text. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int popupPromptView=0x7f010053;
        /**  Specifies the horizontal padding on either end for an embedded progress bar. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int progressBarPadding=0x7f010036;
        /**  Specifies a style resource to use for an embedded progress bar. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int progressBarStyle=0x7f010034;
        /**  The prompt to display when the spinner's dialog is shown. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int prompt=0x7f010051;
        /**  An optional query hint string to be displayed in the empty query field. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int queryHint=0x7f01005b;
        /**  SearchView dropdown background 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int searchDropdownBackground=0x7f01005c;
        /**  The list item height for search results. @hide 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int searchResultListItemHeight=0x7f010065;
        /**  SearchView AutoCompleteTextView style 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int searchViewAutoCompleteTextView=0x7f010069;
        /**  SearchView close button icon 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int searchViewCloseIcon=0x7f01005d;
        /**  SearchView query refinement icon 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int searchViewEditQuery=0x7f010061;
        /**  SearchView query refinement icon background 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int searchViewEditQueryBackground=0x7f010062;
        /**  SearchView Go button icon 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int searchViewGoIcon=0x7f01005e;
        /**  SearchView Search icon 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int searchViewSearchIcon=0x7f01005f;
        /**  SearchView text field background for the left section 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int searchViewTextField=0x7f010063;
        /**  SearchView text field background for the right section 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int searchViewTextFieldRight=0x7f010064;
        /**  SearchView Voice button icon 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int searchViewVoiceIcon=0x7f010060;
        /**  A style that may be applied to buttons or other selectable items
         that should react to pressed and focus states, but that do not
         have a clear visual border along the edges. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int selectableItemBackground=0x7f010019;
        /**  How this item should display in the Action Bar, if present. 
         <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>never</code></td><td>0</td><td> Never show this item in an action bar, show it in the overflow menu instead.
                 Mutually exclusive with "ifRoom" and "always". </td></tr>
<tr><td><code>ifRoom</code></td><td>1</td><td> Show this item in an action bar if there is room for it as determined
                 by the system. Favor this option over "always" where possible.
                 Mutually exclusive with "never" and "always". </td></tr>
<tr><td><code>always</code></td><td>2</td><td> Always show this item in an actionbar, even if it would override
                 the system's limits of how much stuff to put there. This may make
                 your action bar look bad on some screens. In most cases you should
                 use "ifRoom" instead. Mutually exclusive with "ifRoom" and "never". </td></tr>
<tr><td><code>withText</code></td><td>4</td><td> When this item is shown as an action in the action bar, show a text
                 label with it even if it has an icon representation. </td></tr>
<tr><td><code>collapseActionView</code></td><td>8</td><td> This item's action view collapses to a normal menu
                 item. When expanded, the action view takes over a
                 larger segment of its container. </td></tr>
</table>
         */
        public static final int showAsAction=0x7f01004d;
        /**  Setting for which dividers to show. 
         <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>none</code></td><td>0</td><td></td></tr>
<tr><td><code>beginning</code></td><td>1</td><td></td></tr>
<tr><td><code>middle</code></td><td>2</td><td></td></tr>
<tr><td><code>end</code></td><td>4</td><td></td></tr>
</table>
         */
        public static final int showDividers=0x7f010055;
        /**  Default Spinner style. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int spinnerDropDownItemStyle=0x7f010058;
        /**  Display mode for spinner options. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>dialog</code></td><td>0</td><td> Spinner options will be presented to the user as a dialog window. </td></tr>
<tr><td><code>dropdown</code></td><td>1</td><td> Spinner options will be presented to the user as an inline dropdown
                 anchored to the spinner widget itself. </td></tr>
</table>
         */
        public static final int spinnerMode=0x7f010052;
        /**  Default Spinner style. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int spinnerStyle=0x7f010057;
        /**  Specifies subtitle text used for navigationMode="normal" 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int subtitle=0x7f010029;
        /**  Specifies a style to use for subtitle text. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int subtitleTextStyle=0x7f01002b;
        /**  Present the text in ALL CAPS. This may use a small-caps form when available. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a boolean value, either "<code>true</code>" or "<code>false</code>".
         */
        public static final int textAllCaps=0x7f01006d;
        /**  Text color, typeface, size, and style for the text inside of a popup menu. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int textAppearanceLargePopupMenu=0x7f010014;
        /**  The preferred TextAppearance for the primary text of list items. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int textAppearanceListItem=0x7f010023;
        /**  The preferred TextAppearance for the primary text of small list items. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int textAppearanceListItemSmall=0x7f010024;
        /**  Text color, typeface, size, and style for system search result subtitle. Defaults to primary inverse text color. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int textAppearanceSearchResultSubtitle=0x7f010067;
        /**  Text color, typeface, size, and style for system search result title. Defaults to primary inverse text color. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int textAppearanceSearchResultTitle=0x7f010066;
        /**  Text color, typeface, size, and style for small text inside of a popup menu. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int textAppearanceSmallPopupMenu=0x7f010015;
        /**  Text color for urls in search suggestions, used by things like global search 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public static final int textColorSearchUrl=0x7f010068;
        /** <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int title=0x7f010025;
        /**  Specifies a style to use for title text. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int titleTextStyle=0x7f01002a;
        /** <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int windowActionBar=0x7f010000;
        /** <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int windowActionBarOverlay=0x7f010001;
        /**  A fixed height for the window along the major axis of the screen,
             that is, when in portrait. Can be either an absolute dimension
             or a fraction of the screen size in that dimension. 
         <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int windowFixedHeightMajor=0x7f010006;
        /**  A fixed height for the window along the minor axis of the screen,
             that is, when in landscape. Can be either an absolute dimension
             or a fraction of the screen size in that dimension. 
         <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int windowFixedHeightMinor=0x7f010004;
        /**  A fixed width for the window along the major axis of the screen,
             that is, when in landscape. Can be either an absolute dimension
             or a fraction of the screen size in that dimension. 
         <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int windowFixedWidthMajor=0x7f010003;
        /**  A fixed width for the window along the minor axis of the screen,
             that is, when in portrait. Can be either an absolute dimension
             or a fraction of the screen size in that dimension. 
         <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int windowFixedWidthMinor=0x7f010005;
        /** <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int windowSplitActionBar=0x7f010002;
    }
    public static final class bool {
        public static final int abc_action_bar_embed_tabs_pre_jb=0x7f060000;
        public static final int abc_action_bar_expanded_action_views_exclusive=0x7f060001;
        /**  Whether action menu items should be displayed in ALLCAPS or not.
         Defaults to true. If this is not appropriate for specific locales
         it should be disabled in that locale's resources. 
         */
        public static final int abc_config_actionMenuItemAllCaps=0x7f060005;
        /**  Whether action menu items should obey the "withText" showAsAction
    flag. This may be set to false for situations where space is
    extremely limited. 
 Whether action menu items should obey the "withText" showAsAction.
         This may be set to false for situations where space is
         extremely limited. 
         */
        public static final int abc_config_allowActionMenuItemTextWithIcon=0x7f060004;
        public static final int abc_config_showMenuShortcutsWhenKeyboardPresent=0x7f060003;
        public static final int abc_split_action_bar_is_narrow=0x7f060002;
    }
    public static final class color {
        public static final int abackground=0x7f070014;
        public static final int abc_search_url_text_holo=0x7f07003a;
        public static final int abc_search_url_text_normal=0x7f070000;
        public static final int abc_search_url_text_pressed=0x7f070002;
        public static final int abc_search_url_text_selected=0x7f070001;
        public static final int back=0x7f070016;
        public static final int bg_login=0x7f070003;
        public static final int bg_main=0x7f070005;
        public static final int bg_register=0x7f070004;
        public static final int black=0x7f07001c;
        public static final int blue=0x7f07001e;
        public static final int blue1=0x7f07001f;
        public static final int blue2=0x7f07002f;
        public static final int btn_login=0x7f07000c;
        public static final int btn_login_bg=0x7f07000d;
        public static final int btn_logut_bg=0x7f07000f;
        public static final int but_can=0x7f070018;
        public static final int but_ok=0x7f070017;
        public static final int col=0x7f07002e;
        public static final int dark_red=0x7f070031;
        public static final int fotter=0x7f070015;
        public static final int gray=0x7f070039;
        public static final int green=0x7f070029;
        public static final int icon1=0x7f070023;
        public static final int icon2=0x7f070024;
        public static final int icon3=0x7f070025;
        public static final int icon4=0x7f070026;
        public static final int icon5=0x7f070027;
        public static final int icon6=0x7f070028;
        public static final int input_login=0x7f070007;
        public static final int input_login_hint=0x7f070008;
        public static final int input_register=0x7f070009;
        public static final int input_register_bg=0x7f07000a;
        public static final int input_register_hint=0x7f07000b;
        public static final int layout_back=0x7f070019;
        public static final int layout_second_back=0x7f07001a;
        public static final int lbl_name=0x7f07000e;
        public static final int light_blue=0x7f070036;
        public static final int lightblue=0x7f07002b;
        public static final int meanubar=0x7f070010;
        public static final int menu=0x7f070013;
        public static final int menu_list=0x7f07001b;
        public static final int new_back=0x7f070037;
        public static final int new_black=0x7f070033;
        public static final int new_blue=0x7f070035;
        public static final int new_green=0x7f070032;
        public static final int new_red=0x7f070030;
        public static final int new_text=0x7f070038;
        public static final int new_yellow=0x7f070034;
        public static final int newblue=0x7f07002d;
        public static final int orange=0x7f07001d;
        public static final int red=0x7f07002a;
        public static final int red1=0x7f07002c;
        public static final int tapblack=0x7f070021;
        public static final int tapsome=0x7f070022;
        public static final int tapwhite=0x7f070020;
        public static final int text=0x7f070012;
        public static final int text_box=0x7f070011;
        public static final int white=0x7f070006;
    }
    public static final class dimen {
        /**  Default height of an action bar. 
 Default height of an action bar. 
 Default height of an action bar. 
 Default height of an action bar. 
 Default height of an action bar. 
         */
        public static final int abc_action_bar_default_height=0x7f080002;
        /**  Vertical padding around action bar icons. 
 Vertical padding around action bar icons. 
 Vertical padding around action bar icons. 
 Vertical padding around action bar icons. 
 Vertical padding around action bar icons. 
         */
        public static final int abc_action_bar_icon_vertical_padding=0x7f080003;
        /**  Size of the indeterminate Progress Bar 
 Size of the indeterminate Progress Bar 
         */
        public static final int abc_action_bar_progress_bar_size=0x7f08000a;
        /**  Maximum height for a stacked tab bar as part of an action bar 
         */
        public static final int abc_action_bar_stacked_max_height=0x7f080009;
        /**  Maximum width for a stacked action bar tab. This prevents
         action bar tabs from becoming too wide on a wide screen when only
         a few are present. 
         */
        public static final int abc_action_bar_stacked_tab_max_width=0x7f080001;
        /**  Bottom margin for action bar subtitles 
 Bottom margin for action bar subtitles 
 Bottom margin for action bar subtitles 
 Bottom margin for action bar subtitles 
 Bottom margin for action bar subtitles 
         */
        public static final int abc_action_bar_subtitle_bottom_margin=0x7f080007;
        /**  Text size for action bar subtitles 
 Text size for action bar subtitles 
 Text size for action bar subtitles 
 Text size for action bar subtitles 
 Text size for action bar subtitles 
         */
        public static final int abc_action_bar_subtitle_text_size=0x7f080005;
        /**  Top margin for action bar subtitles 
 Top margin for action bar subtitles 
 Top margin for action bar subtitles 
 Top margin for action bar subtitles 
 Top margin for action bar subtitles 
         */
        public static final int abc_action_bar_subtitle_top_margin=0x7f080006;
        /**  Text size for action bar titles 
 Text size for action bar titles 
 Text size for action bar titles 
 Text size for action bar titles 
 Text size for action bar titles 
         */
        public static final int abc_action_bar_title_text_size=0x7f080004;
        /**  Minimum width for an action button in the menu area of an action bar 
 Minimum width for an action button in the menu area of an action bar 
 Minimum width for an action button in the menu area of an action bar 
         */
        public static final int abc_action_button_min_width=0x7f080008;
        /**  The maximum width we would prefer dialogs to be.  0 if there is no
    maximum (let them grow as large as the screen).  Actual values are
    specified for -large and -xlarge configurations. 
 see comment in values/config.xml 
 see comment in values/config.xml 
         */
        public static final int abc_config_prefDialogWidth=0x7f080000;
        /**  Width of the icon in a dropdown list 
         */
        public static final int abc_dropdownitem_icon_width=0x7f080010;
        /**  Text padding for dropdown items 
         */
        public static final int abc_dropdownitem_text_padding_left=0x7f08000e;
        public static final int abc_dropdownitem_text_padding_right=0x7f08000f;
        public static final int abc_panel_menu_list_width=0x7f08000b;
        /**  Preferred width of the search view. 
         */
        public static final int abc_search_view_preferred_width=0x7f08000d;
        /**  Minimum width of the search view text entry area. 
 Minimum width of the search view text entry area. 
 Minimum width of the search view text entry area. 
 Minimum width of the search view text entry area. 
         */
        public static final int abc_search_view_text_min_width=0x7f08000c;
        /**  Default screen margins, per the Android Design guidelines. 

         Example customization of dimensions originally defined in res/values/dimens.xml
         (such as screen margins) for screens with more than 820dp of available width. This
         would include 7" and 10" devices in landscape (~960dp and ~1280dp respectively).
    
         */
        public static final int activity_horizontal_margin=0x7f080015;
        public static final int activity_vertical_margin=0x7f080016;
        /**  The platform's desired fixed height for a dialog along the major axis
         (the screen is in portrait). This may be either a fraction or a dimension.
 The platform's desired fixed height for a dialog along the major axis
         (the screen is in portrait). This may be either a fraction or a dimension.
 The platform's desired fixed height for a dialog along the major axis
         (the screen is in portrait). This may be either a fraction or a dimension.
         */
        public static final int dialog_fixed_height_major=0x7f080013;
        /**  The platform's desired fixed height for a dialog along the minor axis
         (the screen is in landscape). This may be either a fraction or a dimension.
 The platform's desired fixed height for a dialog along the minor axis
         (the screen is in landscape). This may be either a fraction or a dimension.
 The platform's desired fixed height for a dialog along the minor axis
         (the screen is in landscape). This may be either a fraction or a dimension.
         */
        public static final int dialog_fixed_height_minor=0x7f080014;
        /**  The platform's desired fixed width for a dialog along the major axis
         (the screen is in landscape). This may be either a fraction or a dimension.
 The platform's desired fixed width for a dialog along the major axis
         (the screen is in landscape). This may be either a fraction or a dimension.
 The platform's desired fixed width for a dialog along the major axis
         (the screen is in landscape). This may be either a fraction or a dimension.
         */
        public static final int dialog_fixed_width_major=0x7f080011;
        /**  The platform's desired fixed width for a dialog along the minor axis
         (the screen is in portrait). This may be either a fraction or a dimension.
 The platform's desired fixed width for a dialog along the minor axis
         (the screen is in portrait). This may be either a fraction or a dimension.
 The platform's desired fixed width for a dialog along the minor axis
         (the screen is in portrait). This may be either a fraction or a dimension.
         */
        public static final int dialog_fixed_width_minor=0x7f080012;
    }
    public static final class drawable {
        public static final int abc_ab_bottom_solid_dark_holo=0x7f020000;
        public static final int abc_ab_bottom_solid_light_holo=0x7f020001;
        public static final int abc_ab_bottom_transparent_dark_holo=0x7f020002;
        public static final int abc_ab_bottom_transparent_light_holo=0x7f020003;
        public static final int abc_ab_share_pack_holo_dark=0x7f020004;
        public static final int abc_ab_share_pack_holo_light=0x7f020005;
        public static final int abc_ab_solid_dark_holo=0x7f020006;
        public static final int abc_ab_solid_light_holo=0x7f020007;
        public static final int abc_ab_stacked_solid_dark_holo=0x7f020008;
        public static final int abc_ab_stacked_solid_light_holo=0x7f020009;
        public static final int abc_ab_stacked_transparent_dark_holo=0x7f02000a;
        public static final int abc_ab_stacked_transparent_light_holo=0x7f02000b;
        public static final int abc_ab_transparent_dark_holo=0x7f02000c;
        public static final int abc_ab_transparent_light_holo=0x7f02000d;
        public static final int abc_cab_background_bottom_holo_dark=0x7f02000e;
        public static final int abc_cab_background_bottom_holo_light=0x7f02000f;
        public static final int abc_cab_background_top_holo_dark=0x7f020010;
        public static final int abc_cab_background_top_holo_light=0x7f020011;
        public static final int abc_ic_ab_back_holo_dark=0x7f020012;
        public static final int abc_ic_ab_back_holo_light=0x7f020013;
        public static final int abc_ic_cab_done_holo_dark=0x7f020014;
        public static final int abc_ic_cab_done_holo_light=0x7f020015;
        public static final int abc_ic_clear=0x7f020016;
        public static final int abc_ic_clear_disabled=0x7f020017;
        public static final int abc_ic_clear_holo_light=0x7f020018;
        public static final int abc_ic_clear_normal=0x7f020019;
        public static final int abc_ic_clear_search_api_disabled_holo_light=0x7f02001a;
        public static final int abc_ic_clear_search_api_holo_light=0x7f02001b;
        public static final int abc_ic_commit_search_api_holo_dark=0x7f02001c;
        public static final int abc_ic_commit_search_api_holo_light=0x7f02001d;
        public static final int abc_ic_go=0x7f02001e;
        public static final int abc_ic_go_search_api_holo_light=0x7f02001f;
        public static final int abc_ic_menu_moreoverflow_normal_holo_dark=0x7f020020;
        public static final int abc_ic_menu_moreoverflow_normal_holo_light=0x7f020021;
        public static final int abc_ic_menu_share_holo_dark=0x7f020022;
        public static final int abc_ic_menu_share_holo_light=0x7f020023;
        public static final int abc_ic_search=0x7f020024;
        public static final int abc_ic_search_api_holo_light=0x7f020025;
        public static final int abc_ic_voice_search=0x7f020026;
        public static final int abc_ic_voice_search_api_holo_light=0x7f020027;
        public static final int abc_item_background_holo_dark=0x7f020028;
        public static final int abc_item_background_holo_light=0x7f020029;
        public static final int abc_list_divider_holo_dark=0x7f02002a;
        public static final int abc_list_divider_holo_light=0x7f02002b;
        public static final int abc_list_focused_holo=0x7f02002c;
        public static final int abc_list_longpressed_holo=0x7f02002d;
        public static final int abc_list_pressed_holo_dark=0x7f02002e;
        public static final int abc_list_pressed_holo_light=0x7f02002f;
        public static final int abc_list_selector_background_transition_holo_dark=0x7f020030;
        public static final int abc_list_selector_background_transition_holo_light=0x7f020031;
        public static final int abc_list_selector_disabled_holo_dark=0x7f020032;
        public static final int abc_list_selector_disabled_holo_light=0x7f020033;
        public static final int abc_list_selector_holo_dark=0x7f020034;
        public static final int abc_list_selector_holo_light=0x7f020035;
        public static final int abc_menu_dropdown_panel_holo_dark=0x7f020036;
        public static final int abc_menu_dropdown_panel_holo_light=0x7f020037;
        public static final int abc_menu_hardkey_panel_holo_dark=0x7f020038;
        public static final int abc_menu_hardkey_panel_holo_light=0x7f020039;
        public static final int abc_search_dropdown_dark=0x7f02003a;
        public static final int abc_search_dropdown_light=0x7f02003b;
        public static final int abc_spinner_ab_default_holo_dark=0x7f02003c;
        public static final int abc_spinner_ab_default_holo_light=0x7f02003d;
        public static final int abc_spinner_ab_disabled_holo_dark=0x7f02003e;
        public static final int abc_spinner_ab_disabled_holo_light=0x7f02003f;
        public static final int abc_spinner_ab_focused_holo_dark=0x7f020040;
        public static final int abc_spinner_ab_focused_holo_light=0x7f020041;
        public static final int abc_spinner_ab_holo_dark=0x7f020042;
        public static final int abc_spinner_ab_holo_light=0x7f020043;
        public static final int abc_spinner_ab_pressed_holo_dark=0x7f020044;
        public static final int abc_spinner_ab_pressed_holo_light=0x7f020045;
        public static final int abc_tab_indicator_ab_holo=0x7f020046;
        public static final int abc_tab_selected_focused_holo=0x7f020047;
        public static final int abc_tab_selected_holo=0x7f020048;
        public static final int abc_tab_selected_pressed_holo=0x7f020049;
        public static final int abc_tab_unselected_pressed_holo=0x7f02004a;
        public static final int abc_textfield_search_default_holo_dark=0x7f02004b;
        public static final int abc_textfield_search_default_holo_light=0x7f02004c;
        public static final int abc_textfield_search_right_default_holo_dark=0x7f02004d;
        public static final int abc_textfield_search_right_default_holo_light=0x7f02004e;
        public static final int abc_textfield_search_right_selected_holo_dark=0x7f02004f;
        public static final int abc_textfield_search_right_selected_holo_light=0x7f020050;
        public static final int abc_textfield_search_selected_holo_dark=0x7f020051;
        public static final int abc_textfield_search_selected_holo_light=0x7f020052;
        public static final int abc_textfield_searchview_holo_dark=0x7f020053;
        public static final int abc_textfield_searchview_holo_light=0x7f020054;
        public static final int abc_textfield_searchview_right_holo_dark=0x7f020055;
        public static final int abc_textfield_searchview_right_holo_light=0x7f020056;
        public static final int add_but=0x7f020057;
        public static final int alert_call=0x7f020058;
        public static final int andman_nicobar=0x7f020059;
        public static final int aniket3=0x7f02005a;
        public static final int b=0x7f02005b;
        public static final int back=0x7f02005c;
        public static final int back1=0x7f02005d;
        public static final int back3=0x7f02005e;
        public static final int back4=0x7f02005f;
        public static final int back_b=0x7f020060;
        public static final int back_back=0x7f020061;
        public static final int back_but=0x7f020062;
        public static final int back_pop=0x7f020063;
        public static final int backcurv1=0x7f020064;
        public static final int backcurv2=0x7f020065;
        public static final int backcurv3=0x7f020066;
        public static final int backcurv4=0x7f020067;
        public static final int backcurv5=0x7f020068;
        public static final int backcurv6=0x7f020069;
        public static final int background=0x7f02006a;
        public static final int boxfed=0x7f02006b;
        public static final int button=0x7f02006c;
        public static final int button_new=0x7f02006d;
        public static final int call=0x7f02006e;
        public static final int car_nicobar=0x7f02006f;
        public static final int circle=0x7f020070;
        public static final int circle1=0x7f020071;
        public static final int contact=0x7f020072;
        public static final int contact1=0x7f020073;
        public static final int contact5=0x7f020074;
        public static final int cyclone=0x7f020075;
        public static final int cyclone_vid=0x7f020076;
        public static final int deny=0x7f020077;
        public static final int dis=0x7f020078;
        public static final int do_dont=0x7f020079;
        public static final int docs=0x7f02007a;
        public static final int dodont5=0x7f02007b;
        public static final int drawer=0x7f02007c;
        public static final int earthquack=0x7f02007d;
        public static final int earthquake=0x7f02007e;
        public static final int earthquake_ved=0x7f02007f;
        public static final int earthquakk=0x7f020080;
        public static final int emblom=0x7f020081;
        public static final int emblom2=0x7f020082;
        public static final int falsh_but=0x7f020083;
        public static final int family=0x7f020084;
        public static final int feedback=0x7f020085;
        public static final int feedback1=0x7f020086;
        public static final int feedback2=0x7f020087;
        public static final int feedback3=0x7f020088;
        public static final int feedback5=0x7f020089;
        public static final int fire1=0x7f02008a;
        public static final int fire_vid=0x7f02008b;
        public static final int flash1=0x7f02008c;
        public static final int flash2=0x7f02008d;
        public static final int flood1=0x7f02008e;
        public static final int flood_vid=0x7f02008f;
        public static final int friends=0x7f020090;
        public static final int future=0x7f020091;
        public static final int great_nicobar=0x7f020092;
        public static final int grid=0x7f020093;
        public static final int help=0x7f020094;
        public static final int ic_launcher=0x7f020095;
        public static final int idea=0x7f020096;
        public static final int image=0x7f020097;
        public static final int india=0x7f020098;
        public static final int input=0x7f020099;
        public static final int kamorta=0x7f02009a;
        public static final int katchal=0x7f02009b;
        public static final int kit4=0x7f02009c;
        public static final int little_andman=0x7f02009d;
        public static final int location=0x7f02009e;
        public static final int location1=0x7f02009f;
        public static final int location4=0x7f0200a0;
        public static final int logo=0x7f0200a1;
        public static final int logo1=0x7f0200a2;
        public static final int main=0x7f0200a3;
        public static final int make_back=0x7f0200a4;
        public static final int map1=0x7f0200a5;
        public static final int map2=0x7f0200a6;
        public static final int map3=0x7f0200a7;
        public static final int map4=0x7f0200a8;
        public static final int map5=0x7f0200a9;
        public static final int meanu_bar=0x7f0200aa;
        public static final int menu=0x7f0200ab;
        public static final int menubar=0x7f0200ac;
        public static final int message=0x7f0200ad;
        public static final int mock_drill=0x7f0200ae;
        public static final int new_back=0x7f0200af;
        public static final int new_i=0x7f0200b0;
        public static final int new_im=0x7f0200b1;
        public static final int not=0x7f0200b2;
        public static final int noti=0x7f0200b3;
        public static final int noti1=0x7f0200b4;
        public static final int notifi4=0x7f0200b5;
        public static final int notification=0x7f0200b6;
        public static final int orange=0x7f0200b7;
        public static final int photo=0x7f0200b8;
        public static final int plane=0x7f0200b9;
        public static final int popup=0x7f0200ba;
        public static final int popup_but=0x7f0200bb;
        public static final int relif=0x7f0200bc;
        public static final int relif1=0x7f0200bd;
        public static final int shadow=0x7f0200be;
        public static final int shape=0x7f0200bf;
        public static final int shape_s=0x7f0200c0;
        public static final int shapes=0x7f0200c1;
        public static final int teressa=0x7f0200c2;
        public static final int trash=0x7f0200c3;
        public static final int tsunami=0x7f0200c4;
        public static final int tsunami_vid=0x7f0200c5;
        public static final int tusunami=0x7f0200c6;
        public static final int user=0x7f0200c7;
        public static final int vedio=0x7f0200c8;
        public static final int vedios2=0x7f0200c9;
        public static final int weather=0x7f0200ca;
        public static final int work=0x7f0200cb;
    }
    public static final class id {
        public static final int L1=0x7f05003d;
        public static final int LinearLayout1=0x7f05004c;
        public static final int RelativeLayout1=0x7f05004b;
        public static final int RelativeLayout2=0x7f050094;
        public static final int about1=0x7f0500c9;
        public static final int accept=0x7f0500b7;
        public static final int action_bar=0x7f05001c;
        public static final int action_bar_activity_content=0x7f050015;
        public static final int action_bar_container=0x7f05001b;
        public static final int action_bar_overlay_layout=0x7f05001f;
        public static final int action_bar_root=0x7f05001a;
        public static final int action_bar_subtitle=0x7f050023;
        public static final int action_bar_title=0x7f050022;
        public static final int action_context_bar=0x7f05001d;
        public static final int action_menu_divider=0x7f050016;
        public static final int action_menu_presenter=0x7f050017;
        public static final int action_mode_close_button=0x7f050024;
        public static final int activity_chooser_view_content=0x7f050025;
        public static final int alert=0x7f05003c;
        public static final int alert1=0x7f0500ca;
        public static final int alert_but=0x7f05009c;
        public static final int alert_message=0x7f050041;
        public static final int alert_sub=0x7f0500a7;
        public static final int always=0x7f05000b;
        public static final int beginning=0x7f050011;
        public static final int btnLinkToLoginScreen=0x7f0500ad;
        public static final int btnLogin=0x7f050090;
        public static final int btnRegister=0x7f0500ac;
        public static final int button1=0x7f05003e;
        public static final int button2=0x7f0500b4;
        public static final int button3=0x7f0500b5;
        public static final int button4=0x7f0500b6;
        public static final int callbut=0x7f050051;
        public static final int cancle=0x7f0500a9;
        public static final int checkbox=0x7f05002d;
        public static final int close=0x7f050042;
        public static final int collapseActionView=0x7f05000d;
        public static final int contact_img=0x7f05004e;
        public static final int container=0x7f050092;
        public static final int create=0x7f05004a;
        public static final int date=0x7f050097;
        public static final int day=0x7f050095;
        public static final int decline=0x7f0500b8;
        public static final int default_activity_button=0x7f050028;
        public static final int delimg=0x7f050055;
        public static final int dialog=0x7f05000e;
        public static final int disableHome=0x7f050008;
        public static final int do_img=0x7f050056;
        public static final int do_list=0x7f05005b;
        public static final int dodont=0x7f05005e;
        public static final int dolist=0x7f050059;
        public static final int drawer=0x7f050091;
        public static final int drawerlist=0x7f05009e;
        public static final int dropdown=0x7f05000f;
        public static final int editText3=0x7f0500a1;
        public static final int edit_query=0x7f050030;
        public static final int email=0x7f05008f;
        public static final int end=0x7f050013;
        public static final int expand_activities_button=0x7f050026;
        public static final int expandable=0x7f0500c1;
        public static final int expanded_menu=0x7f05002c;
        public static final int expandimg=0x7f050086;
        public static final int feed_text=0x7f05005f;
        public static final int feedback_s=0x7f050079;
        public static final int gridView1=0x7f0500a6;
        public static final int grid_img=0x7f05007d;
        public static final int grid_text=0x7f05007e;
        public static final int gridback=0x7f05007c;
        public static final int header=0x7f0500c0;
        public static final int home=0x7f050014;
        public static final int homeAsUp=0x7f050005;
        public static final int icon=0x7f05002a;
        public static final int ifRoom=0x7f05000a;
        public static final int image=0x7f050027;
        public static final int imageView1=0x7f05007b;
        public static final int imageView2=0x7f050099;
        public static final int img1=0x7f050053;
        public static final int img_text=0x7f05004f;
        public static final int kit_grid=0x7f0500b9;
        public static final int kitlist=0x7f0500bb;
        public static final int kittext=0x7f0500ba;
        public static final int l1=0x7f050060;
        public static final int l2=0x7f050064;
        public static final int l3=0x7f050068;
        public static final int l4=0x7f05006d;
        public static final int l5=0x7f050072;
        public static final int la1=0x7f050044;
        public static final int la2=0x7f050045;
        public static final int lat=0x7f05008a;
        public static final int layout1=0x7f05008e;
        public static final int layout2=0x7f05007f;
        public static final int lin1=0x7f050093;
        public static final int linearlayout3=0x7f050085;
        public static final int listMode=0x7f050001;
        public static final int listView1=0x7f05005a;
        public static final int list_contact=0x7f05004d;
        public static final int list_img=0x7f050088;
        public static final int list_item=0x7f050029;
        public static final int list_text=0x7f050089;
        public static final int location=0x7f050047;
        public static final int login1=0x7f050083;
        public static final int lon=0x7f05008b;
        public static final int lvExp=0x7f05005d;
        public static final int mapview=0x7f05009f;
        public static final int menu_list=0x7f05009b;
        public static final int message=0x7f0500a0;
        public static final int middle=0x7f050012;
        public static final int month=0x7f050096;
        public static final int movingtext=0x7f050087;
        public static final int name=0x7f050046;
        public static final int never=0x7f050009;
        public static final int none=0x7f050010;
        public static final int normal=0x7f050000;
        public static final int notidate=0x7f0500b3;
        public static final int notification=0x7f0500cb;
        public static final int notiimage=0x7f0500b1;
        public static final int notilist=0x7f0500a4;
        public static final int notilist1=0x7f0500a5;
        public static final int notitext=0x7f0500b2;
        public static final int number=0x7f050050;
        public static final int pager=0x7f0500a3;
        public static final int password=0x7f0500ab;
        public static final int password1=0x7f050082;
        public static final int pincode=0x7f050048;
        public static final int progress_circular=0x7f050018;
        public static final int progress_horizontal=0x7f050019;
        public static final int radio=0x7f05002f;
        public static final int radio1=0x7f050062;
        public static final int radio2=0x7f050063;
        public static final int radio3=0x7f050066;
        public static final int radio31=0x7f05006b;
        public static final int radio32=0x7f05006c;
        public static final int radio4=0x7f050067;
        public static final int radio41=0x7f050070;
        public static final int radio42=0x7f050071;
        public static final int radio51=0x7f050075;
        public static final int radio52=0x7f050076;
        public static final int radio53=0x7f050077;
        public static final int radio54=0x7f050078;
        public static final int radioGroup1=0x7f050061;
        public static final int radioGroup2=0x7f050065;
        public static final int radioGroup3=0x7f05006a;
        public static final int radioGroup4=0x7f05006f;
        public static final int radioGroup5=0x7f050074;
        public static final int register=0x7f050084;
        public static final int regst=0x7f0500aa;
        public static final int relif_img_view=0x7f0500c8;
        public static final int relifimage=0x7f0500af;
        public static final int reliflist=0x7f0500ae;
        public static final int reliftext=0x7f0500b0;
        public static final int scrollView1=0x7f050040;
        public static final int search_badge=0x7f050032;
        public static final int search_bar=0x7f050031;
        public static final int search_button=0x7f050033;
        public static final int search_close_btn=0x7f050038;
        public static final int search_edit_frame=0x7f050034;
        public static final int search_go_btn=0x7f05003a;
        public static final int search_mag_icon=0x7f050035;
        public static final int search_plate=0x7f050036;
        public static final int search_src_text=0x7f050037;
        public static final int search_voice_btn=0x7f05003b;
        public static final int send=0x7f0500a8;
        public static final int setting=0x7f0500cc;
        public static final int shortcut=0x7f05002e;
        public static final int showCustom=0x7f050007;
        public static final int showHome=0x7f050004;
        public static final int showTitle=0x7f050006;
        public static final int showlocation=0x7f05008c;
        public static final int sos=0x7f05009d;
        public static final int split_action_bar=0x7f05001e;
        public static final int st_text=0x7f05005c;
        public static final int status=0x7f050049;
        public static final int status1=0x7f050080;
        public static final int status_text=0x7f05007a;
        public static final int stop=0x7f05008d;
        public static final int submit_area=0x7f050039;
        public static final int sur_list_text=0x7f0500bd;
        public static final int sur_list_text2=0x7f0500bf;
        public static final int surlay1=0x7f0500bc;
        public static final int surlay2=0x7f0500be;
        public static final int tabMode=0x7f050002;
        public static final int textView1=0x7f05003f;
        public static final int textView2=0x7f050058;
        public static final int textView3=0x7f050069;
        public static final int textView4=0x7f05006e;
        public static final int textView5=0x7f050073;
        public static final int textView7=0x7f050057;
        public static final int textdata=0x7f050052;
        public static final int title=0x7f05002b;
        public static final int top_action_bar=0x7f050020;
        public static final int txt1=0x7f050054;
        public static final int up=0x7f050021;
        public static final int useLogo=0x7f050003;
        public static final int user_img=0x7f0500a2;
        public static final int user_name=0x7f0500c2;
        public static final int userlist=0x7f0500c3;
        public static final int username=0x7f050081;
        public static final int userprofil=0x7f050043;
        public static final int ved_dis=0x7f0500c7;
        public static final int ved_img=0x7f0500c5;
        public static final int ved_text=0x7f0500c6;
        public static final int vidlist=0x7f0500c4;
        public static final int weather=0x7f05009a;
        public static final int withText=0x7f05000c;
        public static final int year=0x7f050098;
    }
    public static final class integer {
        /**  The maximum number of action buttons that should be permitted within
         an action bar/action mode. This will be used to determine how many
         showAsAction="ifRoom" items can fit. "always" items can override this. 
 The maximum number of action buttons that should be permitted within
     an action bar/action mode. This will be used to determine how many
     showAsAction="ifRoom" items can fit. "always" items can override this. 
 The maximum number of action buttons that should be permitted within
         an action bar/action mode. This will be used to determine how many
         showAsAction="ifRoom" items can fit. "always" items can override this. 
 The maximum number of action buttons that should be permitted within
         an action bar/action mode. This will be used to determine how many
         showAsAction="ifRoom" items can fit. "always" items can override this. 
 The maximum number of action buttons that should be permitted within
         an action bar/action mode. This will be used to determine how many
         showAsAction="ifRoom" items can fit. "always" items can override this. 
 The maximum number of action buttons that should be permitted within
         an action bar/action mode. This will be used to determine how many
         showAsAction="ifRoom" items can fit. "always" items can override this. 
 The maximum number of action buttons that should be permitted within
         an action bar/action mode. This will be used to determine how many
         showAsAction="ifRoom" items can fit. "always" items can override this. 
         */
        public static final int abc_max_action_buttons=0x7f090000;
    }
    public static final class layout {
        public static final int abc_action_bar_decor=0x7f030000;
        public static final int abc_action_bar_decor_include=0x7f030001;
        public static final int abc_action_bar_decor_overlay=0x7f030002;
        public static final int abc_action_bar_home=0x7f030003;
        public static final int abc_action_bar_tab=0x7f030004;
        public static final int abc_action_bar_tabbar=0x7f030005;
        public static final int abc_action_bar_title_item=0x7f030006;
        public static final int abc_action_bar_view_list_nav_layout=0x7f030007;
        public static final int abc_action_menu_item_layout=0x7f030008;
        public static final int abc_action_menu_layout=0x7f030009;
        public static final int abc_action_mode_bar=0x7f03000a;
        public static final int abc_action_mode_close_item=0x7f03000b;
        public static final int abc_activity_chooser_view=0x7f03000c;
        public static final int abc_activity_chooser_view_include=0x7f03000d;
        public static final int abc_activity_chooser_view_list_item=0x7f03000e;
        public static final int abc_expanded_menu_layout=0x7f03000f;
        public static final int abc_list_menu_item_checkbox=0x7f030010;
        public static final int abc_list_menu_item_icon=0x7f030011;
        public static final int abc_list_menu_item_layout=0x7f030012;
        public static final int abc_list_menu_item_radio=0x7f030013;
        public static final int abc_popup_menu_item_layout=0x7f030014;
        public static final int abc_search_dropdown_item_icons_2line=0x7f030015;
        public static final int abc_search_view=0x7f030016;
        public static final int abc_simple_decor=0x7f030017;
        public static final int about=0x7f030018;
        public static final int add_coordinate=0x7f030019;
        public static final int alert_list=0x7f03001a;
        public static final int contact=0x7f03001b;
        public static final int contact_list=0x7f03001c;
        public static final int data_list=0x7f03001d;
        public static final int dis=0x7f03001e;
        public static final int dispay_dos=0x7f03001f;
        public static final int do_dont_list=0x7f030020;
        public static final int do_list=0x7f030021;
        public static final int dos=0x7f030022;
        public static final int expand=0x7f030023;
        public static final int expand_list=0x7f030024;
        public static final int feedback=0x7f030025;
        public static final int flash=0x7f030026;
        public static final int flipper=0x7f030027;
        public static final int grid_view=0x7f030028;
        public static final int help=0x7f030029;
        public static final int layout1=0x7f03002a;
        public static final int list_group=0x7f03002b;
        public static final int list_view=0x7f03002c;
        public static final int location=0x7f03002d;
        public static final int login=0x7f03002e;
        public static final int main=0x7f03002f;
        public static final int make_note=0x7f030030;
        public static final int map=0x7f030031;
        public static final int message=0x7f030032;
        public static final int new_user_list=0x7f030033;
        public static final int newprofil=0x7f030034;
        public static final int notification=0x7f030035;
        public static final int notification_list=0x7f030036;
        public static final int notification_list1=0x7f030037;
        public static final int op=0x7f030038;
        public static final int popup=0x7f030039;
        public static final int register=0x7f03003a;
        public static final int relif=0x7f03003b;
        public static final int relif_image=0x7f03003c;
        public static final int send_popup=0x7f03003d;
        public static final int seoc_message=0x7f03003e;
        public static final int small_data=0x7f03003f;
        public static final int sos_dialog=0x7f030040;
        public static final int start_popup=0x7f030041;
        public static final int support_simple_spinner_dropdown_item=0x7f030042;
        public static final int survival_kit_display=0x7f030043;
        public static final int survivalkit=0x7f030044;
        public static final int survivalkitlist=0x7f030045;
        public static final int swip=0x7f030046;
        public static final int user_list=0x7f030047;
        public static final int user_profil=0x7f030048;
        public static final int ved_img=0x7f030049;
        public static final int vedio_grid=0x7f03004a;
        public static final int view_relif_image=0x7f03004b;
        public static final int weather=0x7f03004c;
    }
    public static final class menu {
        public static final int actions=0x7f0d0000;
        public static final int head=0x7f0d0001;
    }
    public static final class string {
        /**  Content description for the action bar "home" affordance. [CHAR LIMIT=NONE] 
         */
        public static final int abc_action_bar_home_description=0x7f0a0001;
        /**  Content description for the action bar "up" affordance. [CHAR LIMIT=NONE] 
         */
        public static final int abc_action_bar_up_description=0x7f0a0002;
        /**  Content description for the action menu overflow button. [CHAR LIMIT=NONE] 
         */
        public static final int abc_action_menu_overflow_description=0x7f0a0003;
        /**  Label for the "Done" button on the far left of action mode toolbars. 
         */
        public static final int abc_action_mode_done=0x7f0a0000;
        /**  Title for a button to expand the list of activities in ActivityChooserView [CHAR LIMIT=25] 
         */
        public static final int abc_activity_chooser_view_see_all=0x7f0a000a;
        /**  ActivityChooserView - accessibility support 
 Description of the shwoing of a popup window with activities to choose from. [CHAR LIMIT=NONE] 
         */
        public static final int abc_activitychooserview_choose_application=0x7f0a0009;
        /**  SearchView accessibility description for clear button [CHAR LIMIT=NONE] 
         */
        public static final int abc_searchview_description_clear=0x7f0a0006;
        /**  SearchView accessibility description for search text field [CHAR LIMIT=NONE] 
         */
        public static final int abc_searchview_description_query=0x7f0a0005;
        /**  SearchView accessibility description for search button [CHAR LIMIT=NONE] 
         */
        public static final int abc_searchview_description_search=0x7f0a0004;
        /**  SearchView accessibility description for submit button [CHAR LIMIT=NONE] 
         */
        public static final int abc_searchview_description_submit=0x7f0a0007;
        /**  SearchView accessibility description for voice button [CHAR LIMIT=NONE] 
         */
        public static final int abc_searchview_description_voice=0x7f0a0008;
        /**  Description of the choose target button in a ShareActionProvider (share UI). [CHAR LIMIT=NONE] 
         */
        public static final int abc_shareactionprovider_share_with=0x7f0a000c;
        /**  Description of a share target (both in the list of such or the default share button) in a ShareActionProvider (share UI). [CHAR LIMIT=NONE] 
         */
        public static final int abc_shareactionprovider_share_with_application=0x7f0a000b;
        public static final int about=0x7f0a0018;
        public static final int about_text=0x7f0a001f;
        public static final int add_cord=0x7f0a001b;
        public static final int add_user=0x7f0a001d;
        public static final int alert=0x7f0a001a;
        public static final int app_name=0x7f0a000d;
        public static final int btn_link_to_login=0x7f0a0014;
        public static final int btn_link_to_register=0x7f0a0013;
        public static final int btn_login=0x7f0a0011;
        public static final int btn_logout=0x7f0a0016;
        public static final int btn_register=0x7f0a0012;
        public static final int family=0x7f0a001c;
        public static final int help=0x7f0a0020;
        public static final int hint_email=0x7f0a000e;
        public static final int hint_name=0x7f0a0010;
        public static final int hint_password=0x7f0a000f;
        public static final int name=0x7f0a0017;
        public static final int setting=0x7f0a0019;
        public static final int start=0x7f0a001e;
        public static final int welcome=0x7f0a0015;
    }
    public static final class style {
        /** 
        Base application theme for API 11+. This theme completely replaces
        AppBaseTheme from res/values/styles.xml on API 11+ devices.
    
 API 11 theme customizations can go here. 

        Base application theme for API 14+. This theme completely replaces
        AppBaseTheme from BOTH res/values/styles.xml and
        res/values-v11/styles.xml on API 14+ devices.
    
 API 14 theme customizations can go here. 
         */
        public static final int AppBaseTheme=0x7f0b0093;
        public static final int AppTheme=0x7f0b008b;
        public static final int MyActionBar=0x7f0b008c;
        /**  Mimic text appearance in select_dialog_item.xml 
         */
        public static final int TextAppearance_AppCompat_Base_CompactMenu_Dialog=0x7f0b0063;
        public static final int TextAppearance_AppCompat_Base_SearchResult=0x7f0b006d;
        public static final int TextAppearance_AppCompat_Base_SearchResult_Subtitle=0x7f0b006f;
        /**  Search View result styles 
         */
        public static final int TextAppearance_AppCompat_Base_SearchResult_Title=0x7f0b006e;
        public static final int TextAppearance_AppCompat_Base_Widget_PopupMenu_Large=0x7f0b0069;
        public static final int TextAppearance_AppCompat_Base_Widget_PopupMenu_Small=0x7f0b006a;
        public static final int TextAppearance_AppCompat_Light_Base_SearchResult=0x7f0b0070;
        public static final int TextAppearance_AppCompat_Light_Base_SearchResult_Subtitle=0x7f0b0072;
        /** 
        TextAppearance.Holo.Light.SearchResult.* are private so we extend from the default
        versions instead (which are exactly the same).
    
         */
        public static final int TextAppearance_AppCompat_Light_Base_SearchResult_Title=0x7f0b0071;
        public static final int TextAppearance_AppCompat_Light_Base_Widget_PopupMenu_Large=0x7f0b006b;
        public static final int TextAppearance_AppCompat_Light_Base_Widget_PopupMenu_Small=0x7f0b006c;
        public static final int TextAppearance_AppCompat_Light_SearchResult_Subtitle=0x7f0b0035;
        public static final int TextAppearance_AppCompat_Light_SearchResult_Title=0x7f0b0034;
        public static final int TextAppearance_AppCompat_Light_Widget_PopupMenu_Large=0x7f0b0030;
        public static final int TextAppearance_AppCompat_Light_Widget_PopupMenu_Small=0x7f0b0031;
        public static final int TextAppearance_AppCompat_SearchResult_Subtitle=0x7f0b0033;
        public static final int TextAppearance_AppCompat_SearchResult_Title=0x7f0b0032;
        public static final int TextAppearance_AppCompat_Widget_ActionBar_Menu=0x7f0b001a;
        public static final int TextAppearance_AppCompat_Widget_ActionBar_Subtitle=0x7f0b0006;
        public static final int TextAppearance_AppCompat_Widget_ActionBar_Subtitle_Inverse=0x7f0b0008;
        public static final int TextAppearance_AppCompat_Widget_ActionBar_Title=0x7f0b0005;
        public static final int TextAppearance_AppCompat_Widget_ActionBar_Title_Inverse=0x7f0b0007;
        public static final int TextAppearance_AppCompat_Widget_ActionMode_Subtitle=0x7f0b001e;
        public static final int TextAppearance_AppCompat_Widget_ActionMode_Subtitle_Inverse=0x7f0b0020;
        public static final int TextAppearance_AppCompat_Widget_ActionMode_Title=0x7f0b001d;
        public static final int TextAppearance_AppCompat_Widget_ActionMode_Title_Inverse=0x7f0b001f;
        public static final int TextAppearance_AppCompat_Widget_Base_ActionBar_Menu=0x7f0b0054;
        public static final int TextAppearance_AppCompat_Widget_Base_ActionBar_Subtitle=0x7f0b0056;
        public static final int TextAppearance_AppCompat_Widget_Base_ActionBar_Subtitle_Inverse=0x7f0b0058;
        public static final int TextAppearance_AppCompat_Widget_Base_ActionBar_Title=0x7f0b0055;
        public static final int TextAppearance_AppCompat_Widget_Base_ActionBar_Title_Inverse=0x7f0b0057;
        public static final int TextAppearance_AppCompat_Widget_Base_ActionMode_Subtitle=0x7f0b0051;
        public static final int TextAppearance_AppCompat_Widget_Base_ActionMode_Subtitle_Inverse=0x7f0b0053;
        public static final int TextAppearance_AppCompat_Widget_Base_ActionMode_Title=0x7f0b0050;
        public static final int TextAppearance_AppCompat_Widget_Base_ActionMode_Title_Inverse=0x7f0b0052;
        public static final int TextAppearance_AppCompat_Widget_Base_DropDownItem=0x7f0b0061;
        public static final int TextAppearance_AppCompat_Widget_DropDownItem=0x7f0b0021;
        public static final int TextAppearance_AppCompat_Widget_PopupMenu_Large=0x7f0b002e;
        public static final int TextAppearance_AppCompat_Widget_PopupMenu_Small=0x7f0b002f;
        public static final int TextAppearance_Widget_AppCompat_Base_ExpandedMenu_Item=0x7f0b0062;
        public static final int TextAppearance_Widget_AppCompat_ExpandedMenu_Item=0x7f0b0028;
        /**  Themes in the "Theme.AppCompat" family will contain an action bar by default.
         If Holo themes are available on the current platform version they will be used.
         A limited Holo-styled action bar will be provided on platform versions older
         than 3.0. (API 11)

         These theme declarations contain any version-independent specification. Items
         that need to vary based on platform version should be defined in the corresponding
         "Theme.Base" theme. 
 Platform-independent theme providing an action bar in a dark-themed activity. 
         */
        public static final int Theme_AppCompat=0x7f0b0077;
        /**  Menu/item attributes 
         */
        public static final int Theme_AppCompat_Base_CompactMenu=0x7f0b0083;
        public static final int Theme_AppCompat_Base_CompactMenu_Dialog=0x7f0b0084;
        /**  Menu/item attributes 
         */
        public static final int Theme_AppCompat_CompactMenu=0x7f0b007c;
        public static final int Theme_AppCompat_CompactMenu_Dialog=0x7f0b007d;
        public static final int Theme_AppCompat_DialogWhenLarge=0x7f0b007a;
        /**  Platform-independent theme providing an action bar in a light-themed activity. 
         */
        public static final int Theme_AppCompat_Light=0x7f0b0078;
        /**  Platform-independent theme providing an action bar in a dark-themed activity. 
         */
        public static final int Theme_AppCompat_Light_DarkActionBar=0x7f0b0079;
        public static final int Theme_AppCompat_Light_DialogWhenLarge=0x7f0b007b;
        /**  Base platform-dependent theme  
         */
        public static final int Theme_Base=0x7f0b007e;
        /**  Base platform-dependent theme providing an action bar in a dark-themed activity. 
 Base platform-dependent theme providing an action bar in a dark-themed activity. 
         */
        public static final int Theme_Base_AppCompat=0x7f0b0080;
        public static final int Theme_Base_AppCompat_Dialog_FixedSize=0x7f0b0087;
        public static final int Theme_Base_AppCompat_Dialog_Light_FixedSize=0x7f0b0088;
        public static final int Theme_Base_AppCompat_DialogWhenLarge=0x7f0b0085;
        /** 
        As we have defined the theme in values-large (for compat) and values-large takes precedence
        over values-v14, we need to reset back to the Holo parent in values-large-v14. As the themes
        in values-v14 & values-large-v14 are exactly the same, these "double base" themes can be
        inherited from in both values-v14 and values-large-v14.
    
         */
        public static final int Theme_Base_AppCompat_DialogWhenLarge_Base=0x7f0b0089;
        /**  Base platform-dependent theme providing an action bar in a light-themed activity. 
 Base platform-dependent theme providing an action bar in a light-themed activity. 
         */
        public static final int Theme_Base_AppCompat_Light=0x7f0b0081;
        /**  Base platform-dependent theme providing a dark action bar in a light-themed activity. 
 Base platform-dependent theme providing a dark action bar in a light-themed activity. 
         */
        public static final int Theme_Base_AppCompat_Light_DarkActionBar=0x7f0b0082;
        public static final int Theme_Base_AppCompat_Light_DialogWhenLarge=0x7f0b0086;
        public static final int Theme_Base_AppCompat_Light_DialogWhenLarge_Base=0x7f0b008a;
        /**  Base platform-dependent theme providing a light-themed activity. 
         */
        public static final int Theme_Base_Light=0x7f0b007f;
        public static final int Theme_MyAppTheme_ActionBar_TitleTextStyle=0x7f0b008d;
        /**  Styles in here can be extended for customisation in your application. Each utilises
         one of the Base styles. If Holo themes are available on the current platform version
         they will be used instead of the compat styles. 
         */
        public static final int Widget_AppCompat_ActionBar=0x7f0b0000;
        public static final int Widget_AppCompat_ActionBar_Solid=0x7f0b0002;
        public static final int Widget_AppCompat_ActionBar_TabBar=0x7f0b0011;
        public static final int Widget_AppCompat_ActionBar_TabText=0x7f0b0017;
        public static final int Widget_AppCompat_ActionBar_TabView=0x7f0b0014;
        public static final int Widget_AppCompat_ActionButton=0x7f0b000b;
        public static final int Widget_AppCompat_ActionButton_CloseMode=0x7f0b000d;
        public static final int Widget_AppCompat_ActionButton_Overflow=0x7f0b000f;
        public static final int Widget_AppCompat_ActionMode=0x7f0b001b;
        public static final int Widget_AppCompat_ActivityChooserView=0x7f0b0038;
        public static final int Widget_AppCompat_AutoCompleteTextView=0x7f0b0036;
        public static final int Widget_AppCompat_Base_ActionBar=0x7f0b003a;
        public static final int Widget_AppCompat_Base_ActionBar_Solid=0x7f0b003c;
        public static final int Widget_AppCompat_Base_ActionBar_TabBar=0x7f0b0045;
        public static final int Widget_AppCompat_Base_ActionBar_TabText=0x7f0b004b;
        public static final int Widget_AppCompat_Base_ActionBar_TabView=0x7f0b0048;
        /**  Action Button Styles 
         */
        public static final int Widget_AppCompat_Base_ActionButton=0x7f0b003f;
        public static final int Widget_AppCompat_Base_ActionButton_CloseMode=0x7f0b0041;
        public static final int Widget_AppCompat_Base_ActionButton_Overflow=0x7f0b0043;
        public static final int Widget_AppCompat_Base_ActionMode=0x7f0b004e;
        public static final int Widget_AppCompat_Base_ActivityChooserView=0x7f0b0075;
        /**  AutoCompleteTextView styles (for SearchView) 
         */
        public static final int Widget_AppCompat_Base_AutoCompleteTextView=0x7f0b0073;
        public static final int Widget_AppCompat_Base_DropDownItem_Spinner=0x7f0b005d;
        /**  Popup Menu 
         */
        public static final int Widget_AppCompat_Base_ListPopupWindow=0x7f0b0065;
        /**  Spinner Widgets 
         */
        public static final int Widget_AppCompat_Base_ListView_DropDown=0x7f0b005f;
        public static final int Widget_AppCompat_Base_ListView_Menu=0x7f0b0064;
        public static final int Widget_AppCompat_Base_PopupMenu=0x7f0b0067;
        public static final int Widget_AppCompat_Base_ProgressBar=0x7f0b005a;
        /**  Progress Bar 
         */
        public static final int Widget_AppCompat_Base_ProgressBar_Horizontal=0x7f0b0059;
        /**  Action Bar Spinner Widgets 
         */
        public static final int Widget_AppCompat_Base_Spinner=0x7f0b005b;
        public static final int Widget_AppCompat_DropDownItem_Spinner=0x7f0b0024;
        public static final int Widget_AppCompat_Light_ActionBar=0x7f0b0001;
        public static final int Widget_AppCompat_Light_ActionBar_Solid=0x7f0b0003;
        public static final int Widget_AppCompat_Light_ActionBar_Solid_Inverse=0x7f0b0004;
        public static final int Widget_AppCompat_Light_ActionBar_TabBar=0x7f0b0012;
        public static final int Widget_AppCompat_Light_ActionBar_TabBar_Inverse=0x7f0b0013;
        public static final int Widget_AppCompat_Light_ActionBar_TabText=0x7f0b0018;
        public static final int Widget_AppCompat_Light_ActionBar_TabText_Inverse=0x7f0b0019;
        public static final int Widget_AppCompat_Light_ActionBar_TabView=0x7f0b0015;
        public static final int Widget_AppCompat_Light_ActionBar_TabView_Inverse=0x7f0b0016;
        public static final int Widget_AppCompat_Light_ActionButton=0x7f0b000c;
        public static final int Widget_AppCompat_Light_ActionButton_CloseMode=0x7f0b000e;
        public static final int Widget_AppCompat_Light_ActionButton_Overflow=0x7f0b0010;
        public static final int Widget_AppCompat_Light_ActionMode_Inverse=0x7f0b001c;
        public static final int Widget_AppCompat_Light_ActivityChooserView=0x7f0b0039;
        public static final int Widget_AppCompat_Light_AutoCompleteTextView=0x7f0b0037;
        public static final int Widget_AppCompat_Light_Base_ActionBar=0x7f0b003b;
        public static final int Widget_AppCompat_Light_Base_ActionBar_Solid=0x7f0b003d;
        public static final int Widget_AppCompat_Light_Base_ActionBar_Solid_Inverse=0x7f0b003e;
        public static final int Widget_AppCompat_Light_Base_ActionBar_TabBar=0x7f0b0046;
        public static final int Widget_AppCompat_Light_Base_ActionBar_TabBar_Inverse=0x7f0b0047;
        public static final int Widget_AppCompat_Light_Base_ActionBar_TabText=0x7f0b004c;
        public static final int Widget_AppCompat_Light_Base_ActionBar_TabText_Inverse=0x7f0b004d;
        public static final int Widget_AppCompat_Light_Base_ActionBar_TabView=0x7f0b0049;
        public static final int Widget_AppCompat_Light_Base_ActionBar_TabView_Inverse=0x7f0b004a;
        public static final int Widget_AppCompat_Light_Base_ActionButton=0x7f0b0040;
        public static final int Widget_AppCompat_Light_Base_ActionButton_CloseMode=0x7f0b0042;
        public static final int Widget_AppCompat_Light_Base_ActionButton_Overflow=0x7f0b0044;
        public static final int Widget_AppCompat_Light_Base_ActionMode_Inverse=0x7f0b004f;
        public static final int Widget_AppCompat_Light_Base_ActivityChooserView=0x7f0b0076;
        public static final int Widget_AppCompat_Light_Base_AutoCompleteTextView=0x7f0b0074;
        public static final int Widget_AppCompat_Light_Base_DropDownItem_Spinner=0x7f0b005e;
        public static final int Widget_AppCompat_Light_Base_ListPopupWindow=0x7f0b0066;
        public static final int Widget_AppCompat_Light_Base_ListView_DropDown=0x7f0b0060;
        public static final int Widget_AppCompat_Light_Base_PopupMenu=0x7f0b0068;
        public static final int Widget_AppCompat_Light_Base_Spinner=0x7f0b005c;
        public static final int Widget_AppCompat_Light_DropDownItem_Spinner=0x7f0b0025;
        public static final int Widget_AppCompat_Light_ListPopupWindow=0x7f0b002a;
        public static final int Widget_AppCompat_Light_ListView_DropDown=0x7f0b0027;
        public static final int Widget_AppCompat_Light_PopupMenu=0x7f0b002c;
        public static final int Widget_AppCompat_Light_Spinner_DropDown_ActionBar=0x7f0b0023;
        public static final int Widget_AppCompat_ListPopupWindow=0x7f0b0029;
        public static final int Widget_AppCompat_ListView_DropDown=0x7f0b0026;
        public static final int Widget_AppCompat_ListView_Menu=0x7f0b002d;
        public static final int Widget_AppCompat_PopupMenu=0x7f0b002b;
        public static final int Widget_AppCompat_ProgressBar=0x7f0b000a;
        public static final int Widget_AppCompat_ProgressBar_Horizontal=0x7f0b0009;
        public static final int Widget_AppCompat_Spinner_DropDown_ActionBar=0x7f0b0022;
        public static final int dialog=0x7f0b0092;
        public static final int flashtheme=0x7f0b008e;
        public static final int myTheme=0x7f0b008f;
        public static final int myTheme_ActionBar=0x7f0b0090;
        public static final int myTheme_ActionBar_Text=0x7f0b0091;
    }
    public static final class styleable {
        /**  ============================================ 
 Attributes used to style the Action Bar.
         These should be set on your theme; the default actionBarStyle will
         propagate them to the correct elements as needed.

         Please Note: when overriding attributes for an ActionBar style
         you must specify each attribute twice: once with the "android:"
         namespace prefix and once without. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #ActionBar_background com.d_andaman:background}</code></td><td> Specifies a background drawable for the action bar.</td></tr>
           <tr><td><code>{@link #ActionBar_backgroundSplit com.d_andaman:backgroundSplit}</code></td><td> Specifies a background drawable for the bottom component of a split action bar.</td></tr>
           <tr><td><code>{@link #ActionBar_backgroundStacked com.d_andaman:backgroundStacked}</code></td><td> Specifies a background drawable for a second stacked row of the action bar.</td></tr>
           <tr><td><code>{@link #ActionBar_customNavigationLayout com.d_andaman:customNavigationLayout}</code></td><td> Specifies a layout for custom navigation.</td></tr>
           <tr><td><code>{@link #ActionBar_displayOptions com.d_andaman:displayOptions}</code></td><td> Options affecting how the action bar is displayed.</td></tr>
           <tr><td><code>{@link #ActionBar_divider com.d_andaman:divider}</code></td><td> Specifies the drawable used for item dividers.</td></tr>
           <tr><td><code>{@link #ActionBar_height com.d_andaman:height}</code></td><td> Specifies a fixed height.</td></tr>
           <tr><td><code>{@link #ActionBar_homeLayout com.d_andaman:homeLayout}</code></td><td> Specifies a layout to use for the "home" section of the action bar.</td></tr>
           <tr><td><code>{@link #ActionBar_icon com.d_andaman:icon}</code></td><td> Specifies the drawable used for the application icon.</td></tr>
           <tr><td><code>{@link #ActionBar_indeterminateProgressStyle com.d_andaman:indeterminateProgressStyle}</code></td><td> Specifies a style resource to use for an indeterminate progress spinner.</td></tr>
           <tr><td><code>{@link #ActionBar_itemPadding com.d_andaman:itemPadding}</code></td><td> Specifies padding that should be applied to the left and right sides of
             system-provided items in the bar.</td></tr>
           <tr><td><code>{@link #ActionBar_logo com.d_andaman:logo}</code></td><td> Specifies the drawable used for the application logo.</td></tr>
           <tr><td><code>{@link #ActionBar_navigationMode com.d_andaman:navigationMode}</code></td><td> The type of navigation to use.</td></tr>
           <tr><td><code>{@link #ActionBar_progressBarPadding com.d_andaman:progressBarPadding}</code></td><td> Specifies the horizontal padding on either end for an embedded progress bar.</td></tr>
           <tr><td><code>{@link #ActionBar_progressBarStyle com.d_andaman:progressBarStyle}</code></td><td> Specifies a style resource to use for an embedded progress bar.</td></tr>
           <tr><td><code>{@link #ActionBar_subtitle com.d_andaman:subtitle}</code></td><td> Specifies subtitle text used for navigationMode="normal" </td></tr>
           <tr><td><code>{@link #ActionBar_subtitleTextStyle com.d_andaman:subtitleTextStyle}</code></td><td> Specifies a style to use for subtitle text.</td></tr>
           <tr><td><code>{@link #ActionBar_title com.d_andaman:title}</code></td><td> Specifies title text used for navigationMode="normal" </td></tr>
           <tr><td><code>{@link #ActionBar_titleTextStyle com.d_andaman:titleTextStyle}</code></td><td> Specifies a style to use for title text.</td></tr>
           </table>
           @see #ActionBar_background
           @see #ActionBar_backgroundSplit
           @see #ActionBar_backgroundStacked
           @see #ActionBar_customNavigationLayout
           @see #ActionBar_displayOptions
           @see #ActionBar_divider
           @see #ActionBar_height
           @see #ActionBar_homeLayout
           @see #ActionBar_icon
           @see #ActionBar_indeterminateProgressStyle
           @see #ActionBar_itemPadding
           @see #ActionBar_logo
           @see #ActionBar_navigationMode
           @see #ActionBar_progressBarPadding
           @see #ActionBar_progressBarStyle
           @see #ActionBar_subtitle
           @see #ActionBar_subtitleTextStyle
           @see #ActionBar_title
           @see #ActionBar_titleTextStyle
         */
        public static final int[] ActionBar = {
            0x7f010025, 0x7f010026, 0x7f010027, 0x7f010028,
            0x7f010029, 0x7f01002a, 0x7f01002b, 0x7f01002c,
            0x7f01002d, 0x7f01002e, 0x7f01002f, 0x7f010030,
            0x7f010031, 0x7f010032, 0x7f010033, 0x7f010034,
            0x7f010035, 0x7f010036, 0x7f010037
        };
        /**
          <p>
          @attr description
           Specifies a background drawable for the action bar. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name com.d_andaman:background
        */
        public static final int ActionBar_background = 10;
        /**
          <p>
          @attr description
           Specifies a background drawable for the bottom component of a split action bar. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This is a private symbol.
          @attr name com.d_andaman:backgroundSplit
        */
        public static final int ActionBar_backgroundSplit = 12;
        /**
          <p>
          @attr description
           Specifies a background drawable for a second stacked row of the action bar. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This is a private symbol.
          @attr name com.d_andaman:backgroundStacked
        */
        public static final int ActionBar_backgroundStacked = 11;
        /**
          <p>
          @attr description
           Specifies a layout for custom navigation. Overrides navigationMode. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name com.d_andaman:customNavigationLayout
        */
        public static final int ActionBar_customNavigationLayout = 13;
        /**
          <p>
          @attr description
           Options affecting how the action bar is displayed. 


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>useLogo</code></td><td>0x1</td><td></td></tr>
<tr><td><code>showHome</code></td><td>0x2</td><td></td></tr>
<tr><td><code>homeAsUp</code></td><td>0x4</td><td></td></tr>
<tr><td><code>showTitle</code></td><td>0x8</td><td></td></tr>
<tr><td><code>showCustom</code></td><td>0x10</td><td></td></tr>
<tr><td><code>disableHome</code></td><td>0x20</td><td></td></tr>
</table>
          <p>This is a private symbol.
          @attr name com.d_andaman:displayOptions
        */
        public static final int ActionBar_displayOptions = 3;
        /**
          <p>
          @attr description
           Specifies the drawable used for item dividers. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name com.d_andaman:divider
        */
        public static final int ActionBar_divider = 9;
        /**
          <p>
          @attr description
           Specifies a fixed height. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name com.d_andaman:height
        */
        public static final int ActionBar_height = 1;
        /**
          <p>
          @attr description
           Specifies a layout to use for the "home" section of the action bar. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name com.d_andaman:homeLayout
        */
        public static final int ActionBar_homeLayout = 14;
        /**
          <p>
          @attr description
           Specifies the drawable used for the application icon. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name com.d_andaman:icon
        */
        public static final int ActionBar_icon = 7;
        /**
          <p>
          @attr description
           Specifies a style resource to use for an indeterminate progress spinner. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name com.d_andaman:indeterminateProgressStyle
        */
        public static final int ActionBar_indeterminateProgressStyle = 16;
        /**
          <p>
          @attr description
           Specifies padding that should be applied to the left and right sides of
             system-provided items in the bar. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name com.d_andaman:itemPadding
        */
        public static final int ActionBar_itemPadding = 18;
        /**
          <p>
          @attr description
           Specifies the drawable used for the application logo. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name com.d_andaman:logo
        */
        public static final int ActionBar_logo = 8;
        /**
          <p>
          @attr description
           The type of navigation to use. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>normal</code></td><td>0</td><td> Normal static title text </td></tr>
<tr><td><code>listMode</code></td><td>1</td><td> The action bar will use a selection list for navigation. </td></tr>
<tr><td><code>tabMode</code></td><td>2</td><td> The action bar will use a series of horizontal tabs for navigation. </td></tr>
</table>
          <p>This is a private symbol.
          @attr name com.d_andaman:navigationMode
        */
        public static final int ActionBar_navigationMode = 2;
        /**
          <p>
          @attr description
           Specifies the horizontal padding on either end for an embedded progress bar. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name com.d_andaman:progressBarPadding
        */
        public static final int ActionBar_progressBarPadding = 17;
        /**
          <p>
          @attr description
           Specifies a style resource to use for an embedded progress bar. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name com.d_andaman:progressBarStyle
        */
        public static final int ActionBar_progressBarStyle = 15;
        /**
          <p>
          @attr description
           Specifies subtitle text used for navigationMode="normal" 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name com.d_andaman:subtitle
        */
        public static final int ActionBar_subtitle = 4;
        /**
          <p>
          @attr description
           Specifies a style to use for subtitle text. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name com.d_andaman:subtitleTextStyle
        */
        public static final int ActionBar_subtitleTextStyle = 6;
        /**
          <p>
          @attr description
           Specifies title text used for navigationMode="normal" 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name com.d_andaman:title
        */
        public static final int ActionBar_title = 0;
        /**
          <p>
          @attr description
           Specifies a style to use for title text. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name com.d_andaman:titleTextStyle
        */
        public static final int ActionBar_titleTextStyle = 5;
        /**  Valid LayoutParams for views placed in the action bar as custom views. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #ActionBarLayout_android_layout_gravity android:layout_gravity}</code></td><td></td></tr>
           </table>
           @see #ActionBarLayout_android_layout_gravity
         */
        public static final int[] ActionBarLayout = {
            0x010100b3
        };
        /**
          <p>This symbol is the offset where the {@link android.R.attr#layout_gravity}
          attribute's value can be found in the {@link #ActionBarLayout} array.
          @attr name android:layout_gravity
        */
        public static final int ActionBarLayout_android_layout_gravity = 0;
        /**  These attributes are meant to be specified and customized by the app.
         The system will read and apply them as needed. These attributes control
         properties of the activity window, such as whether an action bar should
         be present and whether it should overlay content. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #ActionBarWindow_windowActionBar com.d_andaman:windowActionBar}</code></td><td></td></tr>
           <tr><td><code>{@link #ActionBarWindow_windowActionBarOverlay com.d_andaman:windowActionBarOverlay}</code></td><td></td></tr>
           <tr><td><code>{@link #ActionBarWindow_windowFixedHeightMajor com.d_andaman:windowFixedHeightMajor}</code></td><td> A fixed height for the window along the major axis of the screen,
             that is, when in portrait.</td></tr>
           <tr><td><code>{@link #ActionBarWindow_windowFixedHeightMinor com.d_andaman:windowFixedHeightMinor}</code></td><td> A fixed height for the window along the minor axis of the screen,
             that is, when in landscape.</td></tr>
           <tr><td><code>{@link #ActionBarWindow_windowFixedWidthMajor com.d_andaman:windowFixedWidthMajor}</code></td><td> A fixed width for the window along the major axis of the screen,
             that is, when in landscape.</td></tr>
           <tr><td><code>{@link #ActionBarWindow_windowFixedWidthMinor com.d_andaman:windowFixedWidthMinor}</code></td><td> A fixed width for the window along the minor axis of the screen,
             that is, when in portrait.</td></tr>
           <tr><td><code>{@link #ActionBarWindow_windowSplitActionBar com.d_andaman:windowSplitActionBar}</code></td><td></td></tr>
           </table>
           @see #ActionBarWindow_windowActionBar
           @see #ActionBarWindow_windowActionBarOverlay
           @see #ActionBarWindow_windowFixedHeightMajor
           @see #ActionBarWindow_windowFixedHeightMinor
           @see #ActionBarWindow_windowFixedWidthMajor
           @see #ActionBarWindow_windowFixedWidthMinor
           @see #ActionBarWindow_windowSplitActionBar
         */
        public static final int[] ActionBarWindow = {
            0x7f010000, 0x7f010001, 0x7f010002, 0x7f010003,
            0x7f010004, 0x7f010005, 0x7f010006
        };
        /**
          <p>This symbol is the offset where the {@link com.d_andaman.R.attr#windowActionBar}
          attribute's value can be found in the {@link #ActionBarWindow} array.


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name com.d_andaman:windowActionBar
        */
        public static final int ActionBarWindow_windowActionBar = 0;
        /**
          <p>This symbol is the offset where the {@link com.d_andaman.R.attr#windowActionBarOverlay}
          attribute's value can be found in the {@link #ActionBarWindow} array.


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name com.d_andaman:windowActionBarOverlay
        */
        public static final int ActionBarWindow_windowActionBarOverlay = 1;
        /**
          <p>
          @attr description
           A fixed height for the window along the major axis of the screen,
             that is, when in portrait. Can be either an absolute dimension
             or a fraction of the screen size in that dimension. 


          <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name com.d_andaman:windowFixedHeightMajor
        */
        public static final int ActionBarWindow_windowFixedHeightMajor = 6;
        /**
          <p>
          @attr description
           A fixed height for the window along the minor axis of the screen,
             that is, when in landscape. Can be either an absolute dimension
             or a fraction of the screen size in that dimension. 


          <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name com.d_andaman:windowFixedHeightMinor
        */
        public static final int ActionBarWindow_windowFixedHeightMinor = 4;
        /**
          <p>
          @attr description
           A fixed width for the window along the major axis of the screen,
             that is, when in landscape. Can be either an absolute dimension
             or a fraction of the screen size in that dimension. 


          <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name com.d_andaman:windowFixedWidthMajor
        */
        public static final int ActionBarWindow_windowFixedWidthMajor = 3;
        /**
          <p>
          @attr description
           A fixed width for the window along the minor axis of the screen,
             that is, when in portrait. Can be either an absolute dimension
             or a fraction of the screen size in that dimension. 


          <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name com.d_andaman:windowFixedWidthMinor
        */
        public static final int ActionBarWindow_windowFixedWidthMinor = 5;
        /**
          <p>This symbol is the offset where the {@link com.d_andaman.R.attr#windowSplitActionBar}
          attribute's value can be found in the {@link #ActionBarWindow} array.


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name com.d_andaman:windowSplitActionBar
        */
        public static final int ActionBarWindow_windowSplitActionBar = 2;
        /** Attributes that can be used with a ActionMenuItemView.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #ActionMenuItemView_android_minWidth android:minWidth}</code></td><td></td></tr>
           </table>
           @see #ActionMenuItemView_android_minWidth
         */
        public static final int[] ActionMenuItemView = {
            0x0101013f
        };
        /**
          <p>This symbol is the offset where the {@link android.R.attr#minWidth}
          attribute's value can be found in the {@link #ActionMenuItemView} array.
          @attr name android:minWidth
        */
        public static final int ActionMenuItemView_android_minWidth = 0;
        /**  Size of padding on either end of a divider. 
         */
        public static final int[] ActionMenuView = {
            
        };
        /** Attributes that can be used with a ActionMode.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #ActionMode_background com.d_andaman:background}</code></td><td> Specifies a background for the action mode bar.</td></tr>
           <tr><td><code>{@link #ActionMode_backgroundSplit com.d_andaman:backgroundSplit}</code></td><td> Specifies a background for the split action mode bar.</td></tr>
           <tr><td><code>{@link #ActionMode_height com.d_andaman:height}</code></td><td> Specifies a fixed height for the action mode bar.</td></tr>
           <tr><td><code>{@link #ActionMode_subtitleTextStyle com.d_andaman:subtitleTextStyle}</code></td><td> Specifies a style to use for subtitle text.</td></tr>
           <tr><td><code>{@link #ActionMode_titleTextStyle com.d_andaman:titleTextStyle}</code></td><td> Specifies a style to use for title text.</td></tr>
           </table>
           @see #ActionMode_background
           @see #ActionMode_backgroundSplit
           @see #ActionMode_height
           @see #ActionMode_subtitleTextStyle
           @see #ActionMode_titleTextStyle
         */
        public static final int[] ActionMode = {
            0x7f010026, 0x7f01002a, 0x7f01002b, 0x7f01002f,
            0x7f010031
        };
        /**
          <p>
          @attr description
           Specifies a background for the action mode bar. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name com.d_andaman:background
        */
        public static final int ActionMode_background = 3;
        /**
          <p>
          @attr description
           Specifies a background for the split action mode bar. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This is a private symbol.
          @attr name com.d_andaman:backgroundSplit
        */
        public static final int ActionMode_backgroundSplit = 4;
        /**
          <p>
          @attr description
           Specifies a fixed height for the action mode bar. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name com.d_andaman:height
        */
        public static final int ActionMode_height = 0;
        /**
          <p>
          @attr description
           Specifies a style to use for subtitle text. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name com.d_andaman:subtitleTextStyle
        */
        public static final int ActionMode_subtitleTextStyle = 2;
        /**
          <p>
          @attr description
           Specifies a style to use for title text. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name com.d_andaman:titleTextStyle
        */
        public static final int ActionMode_titleTextStyle = 1;
        /**  Attrbitutes for a ActivityChooserView. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #ActivityChooserView_expandActivityOverflowButtonDrawable com.d_andaman:expandActivityOverflowButtonDrawable}</code></td><td> The drawable to show in the button for expanding the activities overflow popup.</td></tr>
           <tr><td><code>{@link #ActivityChooserView_initialActivityCount com.d_andaman:initialActivityCount}</code></td><td> The maximal number of items initially shown in the activity list.</td></tr>
           </table>
           @see #ActivityChooserView_expandActivityOverflowButtonDrawable
           @see #ActivityChooserView_initialActivityCount
         */
        public static final int[] ActivityChooserView = {
            0x7f01006a, 0x7f01006b
        };
        /**
          <p>
          @attr description
           The drawable to show in the button for expanding the activities overflow popup.
             <strong>Note:</strong> Clients would like to set this drawable
             as a clue about the action the chosen activity will perform. For
             example, if share activity is to be chosen the drawable should
             give a clue that sharing is to be performed.
         


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name com.d_andaman:expandActivityOverflowButtonDrawable
        */
        public static final int ActivityChooserView_expandActivityOverflowButtonDrawable = 1;
        /**
          <p>
          @attr description
           The maximal number of items initially shown in the activity list. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name com.d_andaman:initialActivityCount
        */
        public static final int ActivityChooserView_initialActivityCount = 0;
        /** Attributes that can be used with a CompatTextView.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #CompatTextView_textAllCaps com.d_andaman:textAllCaps}</code></td><td> Present the text in ALL CAPS.</td></tr>
           </table>
           @see #CompatTextView_textAllCaps
         */
        public static final int[] CompatTextView = {
            0x7f01006d
        };
        /**
          <p>
          @attr description
           Present the text in ALL CAPS. This may use a small-caps form when available. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a boolean value, either "<code>true</code>" or "<code>false</code>".
          <p>This is a private symbol.
          @attr name com.d_andaman:textAllCaps
        */
        public static final int CompatTextView_textAllCaps = 0;
        /** Attributes that can be used with a LinearLayoutICS.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #LinearLayoutICS_divider com.d_andaman:divider}</code></td><td> Drawable to use as a vertical divider between buttons.</td></tr>
           <tr><td><code>{@link #LinearLayoutICS_dividerPadding com.d_andaman:dividerPadding}</code></td><td> Size of padding on either end of a divider.</td></tr>
           <tr><td><code>{@link #LinearLayoutICS_showDividers com.d_andaman:showDividers}</code></td><td> Setting for which dividers to show.</td></tr>
           </table>
           @see #LinearLayoutICS_divider
           @see #LinearLayoutICS_dividerPadding
           @see #LinearLayoutICS_showDividers
         */
        public static final int[] LinearLayoutICS = {
            0x7f01002e, 0x7f010055, 0x7f010056
        };
        /**
          <p>
          @attr description
           Drawable to use as a vertical divider between buttons. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name com.d_andaman:divider
        */
        public static final int LinearLayoutICS_divider = 0;
        /**
          <p>
          @attr description
           Size of padding on either end of a divider. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name com.d_andaman:dividerPadding
        */
        public static final int LinearLayoutICS_dividerPadding = 2;
        /**
          <p>
          @attr description
           Setting for which dividers to show. 


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>none</code></td><td>0</td><td></td></tr>
<tr><td><code>beginning</code></td><td>1</td><td></td></tr>
<tr><td><code>middle</code></td><td>2</td><td></td></tr>
<tr><td><code>end</code></td><td>4</td><td></td></tr>
</table>
          <p>This is a private symbol.
          @attr name com.d_andaman:showDividers
        */
        public static final int LinearLayoutICS_showDividers = 1;
        /**  Base attributes that are available to all groups. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #MenuGroup_android_checkableBehavior android:checkableBehavior}</code></td><td> Whether the items are capable of displaying a check mark.</td></tr>
           <tr><td><code>{@link #MenuGroup_android_enabled android:enabled}</code></td><td> Whether the items are enabled.</td></tr>
           <tr><td><code>{@link #MenuGroup_android_id android:id}</code></td><td> The ID of the group.</td></tr>
           <tr><td><code>{@link #MenuGroup_android_menuCategory android:menuCategory}</code></td><td> The category applied to all items within this group.</td></tr>
           <tr><td><code>{@link #MenuGroup_android_orderInCategory android:orderInCategory}</code></td><td> The order within the category applied to all items within this group.</td></tr>
           <tr><td><code>{@link #MenuGroup_android_visible android:visible}</code></td><td> Whether the items are shown/visible.</td></tr>
           </table>
           @see #MenuGroup_android_checkableBehavior
           @see #MenuGroup_android_enabled
           @see #MenuGroup_android_id
           @see #MenuGroup_android_menuCategory
           @see #MenuGroup_android_orderInCategory
           @see #MenuGroup_android_visible
         */
        public static final int[] MenuGroup = {
            0x0101000e, 0x010100d0, 0x01010194, 0x010101de,
            0x010101df, 0x010101e0
        };
        /**
          <p>
          @attr description
           Whether the items are capable of displaying a check mark. 
          <p>This corresponds to the global attribute
          resource symbol {@link android.R.attr#checkableBehavior}.
          @attr name android:checkableBehavior
        */
        public static final int MenuGroup_android_checkableBehavior = 5;
        /**
          <p>
          @attr description
           Whether the items are enabled. 
          <p>This corresponds to the global attribute
          resource symbol {@link android.R.attr#enabled}.
          @attr name android:enabled
        */
        public static final int MenuGroup_android_enabled = 0;
        /**
          <p>
          @attr description
           The ID of the group. 
          <p>This corresponds to the global attribute
          resource symbol {@link android.R.attr#id}.
          @attr name android:id
        */
        public static final int MenuGroup_android_id = 1;
        /**
          <p>
          @attr description
           The category applied to all items within this group.
             (This will be or'ed with the orderInCategory attribute.) 
          <p>This corresponds to the global attribute
          resource symbol {@link android.R.attr#menuCategory}.
          @attr name android:menuCategory
        */
        public static final int MenuGroup_android_menuCategory = 3;
        /**
          <p>
          @attr description
           The order within the category applied to all items within this group.
             (This will be or'ed with the category attribute.) 
          <p>This corresponds to the global attribute
          resource symbol {@link android.R.attr#orderInCategory}.
          @attr name android:orderInCategory
        */
        public static final int MenuGroup_android_orderInCategory = 4;
        /**
          <p>
          @attr description
           Whether the items are shown/visible. 
          <p>This corresponds to the global attribute
          resource symbol {@link android.R.attr#visible}.
          @attr name android:visible
        */
        public static final int MenuGroup_android_visible = 2;
        /**  Base attributes that are available to all Item objects. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #MenuItem_actionLayout com.d_andaman:actionLayout}</code></td><td> An optional layout to be used as an action view.</td></tr>
           <tr><td><code>{@link #MenuItem_actionProviderClass com.d_andaman:actionProviderClass}</code></td><td> The name of an optional ActionProvider class to instantiate an action view
             and perform operations such as default action for that menu item.</td></tr>
           <tr><td><code>{@link #MenuItem_actionViewClass com.d_andaman:actionViewClass}</code></td><td> The name of an optional View class to instantiate and use as an
             action view.</td></tr>
           <tr><td><code>{@link #MenuItem_android_alphabeticShortcut android:alphabeticShortcut}</code></td><td> The alphabetic shortcut key.</td></tr>
           <tr><td><code>{@link #MenuItem_android_checkable android:checkable}</code></td><td> Whether the item is capable of displaying a check mark.</td></tr>
           <tr><td><code>{@link #MenuItem_android_checked android:checked}</code></td><td> Whether the item is checked.</td></tr>
           <tr><td><code>{@link #MenuItem_android_enabled android:enabled}</code></td><td> Whether the item is enabled.</td></tr>
           <tr><td><code>{@link #MenuItem_android_icon android:icon}</code></td><td> The icon associated with this item.</td></tr>
           <tr><td><code>{@link #MenuItem_android_id android:id}</code></td><td> The ID of the item.</td></tr>
           <tr><td><code>{@link #MenuItem_android_menuCategory android:menuCategory}</code></td><td> The category applied to the item.</td></tr>
           <tr><td><code>{@link #MenuItem_android_numericShortcut android:numericShortcut}</code></td><td> The numeric shortcut key.</td></tr>
           <tr><td><code>{@link #MenuItem_android_onClick android:onClick}</code></td><td> Name of a method on the Context used to inflate the menu that will be
             called when the item is clicked.</td></tr>
           <tr><td><code>{@link #MenuItem_android_orderInCategory android:orderInCategory}</code></td><td> The order within the category applied to the item.</td></tr>
           <tr><td><code>{@link #MenuItem_android_title android:title}</code></td><td> The title associated with the item.</td></tr>
           <tr><td><code>{@link #MenuItem_android_titleCondensed android:titleCondensed}</code></td><td> The condensed title associated with the item.</td></tr>
           <tr><td><code>{@link #MenuItem_android_visible android:visible}</code></td><td> Whether the item is shown/visible.</td></tr>
           <tr><td><code>{@link #MenuItem_showAsAction com.d_andaman:showAsAction}</code></td><td> How this item should display in the Action Bar, if present.</td></tr>
           </table>
           @see #MenuItem_actionLayout
           @see #MenuItem_actionProviderClass
           @see #MenuItem_actionViewClass
           @see #MenuItem_android_alphabeticShortcut
           @see #MenuItem_android_checkable
           @see #MenuItem_android_checked
           @see #MenuItem_android_enabled
           @see #MenuItem_android_icon
           @see #MenuItem_android_id
           @see #MenuItem_android_menuCategory
           @see #MenuItem_android_numericShortcut
           @see #MenuItem_android_onClick
           @see #MenuItem_android_orderInCategory
           @see #MenuItem_android_title
           @see #MenuItem_android_titleCondensed
           @see #MenuItem_android_visible
           @see #MenuItem_showAsAction
         */
        public static final int[] MenuItem = {
            0x01010002, 0x0101000e, 0x010100d0, 0x01010106,
            0x01010194, 0x010101de, 0x010101df, 0x010101e1,
            0x010101e2, 0x010101e3, 0x010101e4, 0x010101e5,
            0x0101026f, 0x7f01004d, 0x7f01004e, 0x7f01004f,
            0x7f010050
        };
        /**
          <p>
          @attr description
           An optional layout to be used as an action view.
             See {@link android.view.MenuItem#setActionView(android.view.View)}
             for more info. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name com.d_andaman:actionLayout
        */
        public static final int MenuItem_actionLayout = 14;
        /**
          <p>
          @attr description
           The name of an optional ActionProvider class to instantiate an action view
             and perform operations such as default action for that menu item.
             See {@link android.view.MenuItem#setActionProvider(android.view.ActionProvider)}
             for more info. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name com.d_andaman:actionProviderClass
        */
        public static final int MenuItem_actionProviderClass = 16;
        /**
          <p>
          @attr description
           The name of an optional View class to instantiate and use as an
             action view. See {@link android.view.MenuItem#setActionView(android.view.View)}
             for more info. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name com.d_andaman:actionViewClass
        */
        public static final int MenuItem_actionViewClass = 15;
        /**
          <p>
          @attr description
           The alphabetic shortcut key.  This is the shortcut when using a keyboard
             with alphabetic keys. 
          <p>This corresponds to the global attribute
          resource symbol {@link android.R.attr#alphabeticShortcut}.
          @attr name android:alphabeticShortcut
        */
        public static final int MenuItem_android_alphabeticShortcut = 9;
        /**
          <p>
          @attr description
           Whether the item is capable of displaying a check mark. 
          <p>This corresponds to the global attribute
          resource symbol {@link android.R.attr#checkable}.
          @attr name android:checkable
        */
        public static final int MenuItem_android_checkable = 11;
        /**
          <p>
          @attr description
           Whether the item is checked.  Note that you must first have enabled checking with
             the checkable attribute or else the check mark will not appear. 
          <p>This corresponds to the global attribute
          resource symbol {@link android.R.attr#checked}.
          @attr name android:checked
        */
        public static final int MenuItem_android_checked = 3;
        /**
          <p>
          @attr description
           Whether the item is enabled. 
          <p>This corresponds to the global attribute
          resource symbol {@link android.R.attr#enabled}.
          @attr name android:enabled
        */
        public static final int MenuItem_android_enabled = 1;
        /**
          <p>
          @attr description
           The icon associated with this item.  This icon will not always be shown, so
             the title should be sufficient in describing this item. 
          <p>This corresponds to the global attribute
          resource symbol {@link android.R.attr#icon}.
          @attr name android:icon
        */
        public static final int MenuItem_android_icon = 0;
        /**
          <p>
          @attr description
           The ID of the item. 
          <p>This corresponds to the global attribute
          resource symbol {@link android.R.attr#id}.
          @attr name android:id
        */
        public static final int MenuItem_android_id = 2;
        /**
          <p>
          @attr description
           The category applied to the item.
             (This will be or'ed with the orderInCategory attribute.) 
          <p>This corresponds to the global attribute
          resource symbol {@link android.R.attr#menuCategory}.
          @attr name android:menuCategory
        */
        public static final int MenuItem_android_menuCategory = 5;
        /**
          <p>
          @attr description
           The numeric shortcut key.  This is the shortcut when using a numeric (e.g., 12-key)
             keyboard. 
          <p>This corresponds to the global attribute
          resource symbol {@link android.R.attr#numericShortcut}.
          @attr name android:numericShortcut
        */
        public static final int MenuItem_android_numericShortcut = 10;
        /**
          <p>
          @attr description
           Name of a method on the Context used to inflate the menu that will be
             called when the item is clicked. 
          <p>This corresponds to the global attribute
          resource symbol {@link android.R.attr#onClick}.
          @attr name android:onClick
        */
        public static final int MenuItem_android_onClick = 12;
        /**
          <p>
          @attr description
           The order within the category applied to the item.
             (This will be or'ed with the category attribute.) 
          <p>This corresponds to the global attribute
          resource symbol {@link android.R.attr#orderInCategory}.
          @attr name android:orderInCategory
        */
        public static final int MenuItem_android_orderInCategory = 6;
        /**
          <p>
          @attr description
           The title associated with the item. 
          <p>This corresponds to the global attribute
          resource symbol {@link android.R.attr#title}.
          @attr name android:title
        */
        public static final int MenuItem_android_title = 7;
        /**
          <p>
          @attr description
           The condensed title associated with the item.  This is used in situations where the
             normal title may be too long to be displayed. 
          <p>This corresponds to the global attribute
          resource symbol {@link android.R.attr#titleCondensed}.
          @attr name android:titleCondensed
        */
        public static final int MenuItem_android_titleCondensed = 8;
        /**
          <p>
          @attr description
           Whether the item is shown/visible. 
          <p>This corresponds to the global attribute
          resource symbol {@link android.R.attr#visible}.
          @attr name android:visible
        */
        public static final int MenuItem_android_visible = 4;
        /**
          <p>
          @attr description
           How this item should display in the Action Bar, if present. 


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>never</code></td><td>0</td><td> Never show this item in an action bar, show it in the overflow menu instead.
                 Mutually exclusive with "ifRoom" and "always". </td></tr>
<tr><td><code>ifRoom</code></td><td>1</td><td> Show this item in an action bar if there is room for it as determined
                 by the system. Favor this option over "always" where possible.
                 Mutually exclusive with "never" and "always". </td></tr>
<tr><td><code>always</code></td><td>2</td><td> Always show this item in an actionbar, even if it would override
                 the system's limits of how much stuff to put there. This may make
                 your action bar look bad on some screens. In most cases you should
                 use "ifRoom" instead. Mutually exclusive with "ifRoom" and "never". </td></tr>
<tr><td><code>withText</code></td><td>4</td><td> When this item is shown as an action in the action bar, show a text
                 label with it even if it has an icon representation. </td></tr>
<tr><td><code>collapseActionView</code></td><td>8</td><td> This item's action view collapses to a normal menu
                 item. When expanded, the action view takes over a
                 larger segment of its container. </td></tr>
</table>
          <p>This is a private symbol.
          @attr name com.d_andaman:showAsAction
        */
        public static final int MenuItem_showAsAction = 13;
        /** Attributes that can be used with a MenuView.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #MenuView_android_headerBackground android:headerBackground}</code></td><td> Default background for the menu header.</td></tr>
           <tr><td><code>{@link #MenuView_android_horizontalDivider android:horizontalDivider}</code></td><td> Default horizontal divider between rows of menu items.</td></tr>
           <tr><td><code>{@link #MenuView_android_itemBackground android:itemBackground}</code></td><td> Default background for each menu item.</td></tr>
           <tr><td><code>{@link #MenuView_android_itemIconDisabledAlpha android:itemIconDisabledAlpha}</code></td><td> Default disabled icon alpha for each menu item that shows an icon.</td></tr>
           <tr><td><code>{@link #MenuView_android_itemTextAppearance android:itemTextAppearance}</code></td><td> Default appearance of menu item text.</td></tr>
           <tr><td><code>{@link #MenuView_android_preserveIconSpacing android:preserveIconSpacing}</code></td><td> Whether space should be reserved in layout when an icon is missing.</td></tr>
           <tr><td><code>{@link #MenuView_android_verticalDivider android:verticalDivider}</code></td><td> Default vertical divider between menu items.</td></tr>
           <tr><td><code>{@link #MenuView_android_windowAnimationStyle android:windowAnimationStyle}</code></td><td> Default animations for the menu.</td></tr>
           </table>
           @see #MenuView_android_headerBackground
           @see #MenuView_android_horizontalDivider
           @see #MenuView_android_itemBackground
           @see #MenuView_android_itemIconDisabledAlpha
           @see #MenuView_android_itemTextAppearance
           @see #MenuView_android_preserveIconSpacing
           @see #MenuView_android_verticalDivider
           @see #MenuView_android_windowAnimationStyle
         */
        public static final int[] MenuView = {
            0x010100ae, 0x0101012c, 0x0101012d, 0x0101012e,
            0x0101012f, 0x01010130, 0x01010131, 0x01010435
        };
        /**
          <p>
          @attr description
           Default background for the menu header. 
          <p>This corresponds to the global attribute
          resource symbol {@link android.R.attr#headerBackground}.
          @attr name android:headerBackground
        */
        public static final int MenuView_android_headerBackground = 4;
        /**
          <p>
          @attr description
           Default horizontal divider between rows of menu items. 
          <p>This corresponds to the global attribute
          resource symbol {@link android.R.attr#horizontalDivider}.
          @attr name android:horizontalDivider
        */
        public static final int MenuView_android_horizontalDivider = 2;
        /**
          <p>
          @attr description
           Default background for each menu item. 
          <p>This corresponds to the global attribute
          resource symbol {@link android.R.attr#itemBackground}.
          @attr name android:itemBackground
        */
        public static final int MenuView_android_itemBackground = 5;
        /**
          <p>
          @attr description
           Default disabled icon alpha for each menu item that shows an icon. 
          <p>This corresponds to the global attribute
          resource symbol {@link android.R.attr#itemIconDisabledAlpha}.
          @attr name android:itemIconDisabledAlpha
        */
        public static final int MenuView_android_itemIconDisabledAlpha = 6;
        /**
          <p>
          @attr description
           Default appearance of menu item text. 
          <p>This corresponds to the global attribute
          resource symbol {@link android.R.attr#itemTextAppearance}.
          @attr name android:itemTextAppearance
        */
        public static final int MenuView_android_itemTextAppearance = 1;
        /**
          <p>
          @attr description
           Whether space should be reserved in layout when an icon is missing. 
          <p>This is a private symbol.
          @attr name android:preserveIconSpacing
        */
        public static final int MenuView_android_preserveIconSpacing = 7;
        /**
          <p>
          @attr description
           Default vertical divider between menu items. 
          <p>This corresponds to the global attribute
          resource symbol {@link android.R.attr#verticalDivider}.
          @attr name android:verticalDivider
        */
        public static final int MenuView_android_verticalDivider = 3;
        /**
          <p>
          @attr description
           Default animations for the menu. 
          <p>This corresponds to the global attribute
          resource symbol {@link android.R.attr#windowAnimationStyle}.
          @attr name android:windowAnimationStyle
        */
        public static final int MenuView_android_windowAnimationStyle = 0;
        /** Attributes that can be used with a SearchView.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #SearchView_android_imeOptions android:imeOptions}</code></td><td> The IME options to set on the query text field.</td></tr>
           <tr><td><code>{@link #SearchView_android_inputType android:inputType}</code></td><td> The input type to set on the query text field.</td></tr>
           <tr><td><code>{@link #SearchView_android_maxWidth android:maxWidth}</code></td><td> An optional maximum width of the SearchView.</td></tr>
           <tr><td><code>{@link #SearchView_iconifiedByDefault com.d_andaman:iconifiedByDefault}</code></td><td> The default state of the SearchView.</td></tr>
           <tr><td><code>{@link #SearchView_queryHint com.d_andaman:queryHint}</code></td><td> An optional query hint string to be displayed in the empty query field.</td></tr>
           </table>
           @see #SearchView_android_imeOptions
           @see #SearchView_android_inputType
           @see #SearchView_android_maxWidth
           @see #SearchView_iconifiedByDefault
           @see #SearchView_queryHint
         */
        public static final int[] SearchView = {
            0x0101011f, 0x01010220, 0x01010264, 0x7f01005a,
            0x7f01005b
        };
        /**
          <p>
          @attr description
           The IME options to set on the query text field. 
          <p>This corresponds to the global attribute
          resource symbol {@link android.R.attr#imeOptions}.
          @attr name android:imeOptions
        */
        public static final int SearchView_android_imeOptions = 2;
        /**
          <p>
          @attr description
           The input type to set on the query text field. 
          <p>This corresponds to the global attribute
          resource symbol {@link android.R.attr#inputType}.
          @attr name android:inputType
        */
        public static final int SearchView_android_inputType = 1;
        /**
          <p>
          @attr description
           An optional maximum width of the SearchView. 
          <p>This corresponds to the global attribute
          resource symbol {@link android.R.attr#maxWidth}.
          @attr name android:maxWidth
        */
        public static final int SearchView_android_maxWidth = 0;
        /**
          <p>
          @attr description
           The default state of the SearchView. If true, it will be iconified when not in
             use and expanded when clicked. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name com.d_andaman:iconifiedByDefault
        */
        public static final int SearchView_iconifiedByDefault = 3;
        /**
          <p>
          @attr description
           An optional query hint string to be displayed in the empty query field. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name com.d_andaman:queryHint
        */
        public static final int SearchView_queryHint = 4;
        /** Attributes that can be used with a Spinner.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #Spinner_android_dropDownHorizontalOffset android:dropDownHorizontalOffset}</code></td><td> Horizontal offset from the spinner widget for positioning the dropdown
             in spinnerMode="dropdown".</td></tr>
           <tr><td><code>{@link #Spinner_android_dropDownSelector android:dropDownSelector}</code></td><td> List selector to use for spinnerMode="dropdown" display.</td></tr>
           <tr><td><code>{@link #Spinner_android_dropDownVerticalOffset android:dropDownVerticalOffset}</code></td><td> Vertical offset from the spinner widget for positioning the dropdown in
             spinnerMode="dropdown".</td></tr>
           <tr><td><code>{@link #Spinner_android_dropDownWidth android:dropDownWidth}</code></td><td> Width of the dropdown in spinnerMode="dropdown".</td></tr>
           <tr><td><code>{@link #Spinner_android_gravity android:gravity}</code></td><td> Gravity setting for positioning the currently selected item.</td></tr>
           <tr><td><code>{@link #Spinner_android_popupBackground android:popupBackground}</code></td><td> Background drawable to use for the dropdown in spinnerMode="dropdown".</td></tr>
           <tr><td><code>{@link #Spinner_disableChildrenWhenDisabled com.d_andaman:disableChildrenWhenDisabled}</code></td><td> Whether this spinner should mark child views as enabled/disabled when
             the spinner itself is enabled/disabled.</td></tr>
           <tr><td><code>{@link #Spinner_popupPromptView com.d_andaman:popupPromptView}</code></td><td> Reference to a layout to use for displaying a prompt in the dropdown for
             spinnerMode="dropdown".</td></tr>
           <tr><td><code>{@link #Spinner_prompt com.d_andaman:prompt}</code></td><td> The prompt to display when the spinner's dialog is shown.</td></tr>
           <tr><td><code>{@link #Spinner_spinnerMode com.d_andaman:spinnerMode}</code></td><td> Display mode for spinner options.</td></tr>
           </table>
           @see #Spinner_android_dropDownHorizontalOffset
           @see #Spinner_android_dropDownSelector
           @see #Spinner_android_dropDownVerticalOffset
           @see #Spinner_android_dropDownWidth
           @see #Spinner_android_gravity
           @see #Spinner_android_popupBackground
           @see #Spinner_disableChildrenWhenDisabled
           @see #Spinner_popupPromptView
           @see #Spinner_prompt
           @see #Spinner_spinnerMode
         */
        public static final int[] Spinner = {
            0x010100af, 0x01010175, 0x01010176, 0x01010262,
            0x010102ac, 0x010102ad, 0x7f010051, 0x7f010052,
            0x7f010053, 0x7f010054
        };
        /**
          <p>
          @attr description
           Horizontal offset from the spinner widget for positioning the dropdown
             in spinnerMode="dropdown". 
          <p>This corresponds to the global attribute
          resource symbol {@link android.R.attr#dropDownHorizontalOffset}.
          @attr name android:dropDownHorizontalOffset
        */
        public static final int Spinner_android_dropDownHorizontalOffset = 4;
        /**
          <p>
          @attr description
           List selector to use for spinnerMode="dropdown" display. 
          <p>This corresponds to the global attribute
          resource symbol {@link android.R.attr#dropDownSelector}.
          @attr name android:dropDownSelector
        */
        public static final int Spinner_android_dropDownSelector = 1;
        /**
          <p>
          @attr description
           Vertical offset from the spinner widget for positioning the dropdown in
             spinnerMode="dropdown". 
          <p>This corresponds to the global attribute
          resource symbol {@link android.R.attr#dropDownVerticalOffset}.
          @attr name android:dropDownVerticalOffset
        */
        public static final int Spinner_android_dropDownVerticalOffset = 5;
        /**
          <p>
          @attr description
           Width of the dropdown in spinnerMode="dropdown". 
          <p>This corresponds to the global attribute
          resource symbol {@link android.R.attr#dropDownWidth}.
          @attr name android:dropDownWidth
        */
        public static final int Spinner_android_dropDownWidth = 3;
        /**
          <p>
          @attr description
           Gravity setting for positioning the currently selected item. 
          <p>This corresponds to the global attribute
          resource symbol {@link android.R.attr#gravity}.
          @attr name android:gravity
        */
        public static final int Spinner_android_gravity = 0;
        /**
          <p>
          @attr description
           Background drawable to use for the dropdown in spinnerMode="dropdown". 
          <p>This corresponds to the global attribute
          resource symbol {@link android.R.attr#popupBackground}.
          @attr name android:popupBackground
        */
        public static final int Spinner_android_popupBackground = 2;
        /**
          <p>
          @attr description
           Whether this spinner should mark child views as enabled/disabled when
             the spinner itself is enabled/disabled. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name com.d_andaman:disableChildrenWhenDisabled
        */
        public static final int Spinner_disableChildrenWhenDisabled = 9;
        /**
          <p>
          @attr description
           Reference to a layout to use for displaying a prompt in the dropdown for
             spinnerMode="dropdown". This layout must contain a TextView with the id
             {@code @android:id/text1} to be populated with the prompt text. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name com.d_andaman:popupPromptView
        */
        public static final int Spinner_popupPromptView = 8;
        /**
          <p>
          @attr description
           The prompt to display when the spinner's dialog is shown. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name com.d_andaman:prompt
        */
        public static final int Spinner_prompt = 6;
        /**
          <p>
          @attr description
           Display mode for spinner options. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>dialog</code></td><td>0</td><td> Spinner options will be presented to the user as a dialog window. </td></tr>
<tr><td><code>dropdown</code></td><td>1</td><td> Spinner options will be presented to the user as an inline dropdown
                 anchored to the spinner widget itself. </td></tr>
</table>
          <p>This is a private symbol.
          @attr name com.d_andaman:spinnerMode
        */
        public static final int Spinner_spinnerMode = 7;
        /**  These are the standard attributes that make up a complete theme. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #Theme_actionDropDownStyle com.d_andaman:actionDropDownStyle}</code></td><td> Default ActionBar dropdown style.</td></tr>
           <tr><td><code>{@link #Theme_dropdownListPreferredItemHeight com.d_andaman:dropdownListPreferredItemHeight}</code></td><td> The preferred item height for dropdown lists.</td></tr>
           <tr><td><code>{@link #Theme_listChoiceBackgroundIndicator com.d_andaman:listChoiceBackgroundIndicator}</code></td><td> Drawable used as a background for selected list items.</td></tr>
           <tr><td><code>{@link #Theme_panelMenuListTheme com.d_andaman:panelMenuListTheme}</code></td><td> Default Panel Menu style.</td></tr>
           <tr><td><code>{@link #Theme_panelMenuListWidth com.d_andaman:panelMenuListWidth}</code></td><td> Default Panel Menu width.</td></tr>
           <tr><td><code>{@link #Theme_popupMenuStyle com.d_andaman:popupMenuStyle}</code></td><td> Default PopupMenu style.</td></tr>
           </table>
           @see #Theme_actionDropDownStyle
           @see #Theme_dropdownListPreferredItemHeight
           @see #Theme_listChoiceBackgroundIndicator
           @see #Theme_panelMenuListTheme
           @see #Theme_panelMenuListWidth
           @see #Theme_popupMenuStyle
         */
        public static final int[] Theme = {
            0x7f010047, 0x7f010048, 0x7f010049, 0x7f01004a,
            0x7f01004b, 0x7f01004c
        };
        /**
          <p>
          @attr description
           Default ActionBar dropdown style. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name com.d_andaman:actionDropDownStyle
        */
        public static final int Theme_actionDropDownStyle = 0;
        /**
          <p>
          @attr description
           The preferred item height for dropdown lists. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name com.d_andaman:dropdownListPreferredItemHeight
        */
        public static final int Theme_dropdownListPreferredItemHeight = 1;
        /**
          <p>
          @attr description
           Drawable used as a background for selected list items. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name com.d_andaman:listChoiceBackgroundIndicator
        */
        public static final int Theme_listChoiceBackgroundIndicator = 5;
        /**
          <p>
          @attr description
           Default Panel Menu style. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name com.d_andaman:panelMenuListTheme
        */
        public static final int Theme_panelMenuListTheme = 4;
        /**
          <p>
          @attr description
           Default Panel Menu width. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name com.d_andaman:panelMenuListWidth
        */
        public static final int Theme_panelMenuListWidth = 3;
        /**
          <p>
          @attr description
           Default PopupMenu style. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name com.d_andaman:popupMenuStyle
        */
        public static final int Theme_popupMenuStyle = 2;
        /** Attributes that can be used with a View.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #View_android_focusable android:focusable}</code></td><td> Boolean that controls whether a view can take focus.</td></tr>
           <tr><td><code>{@link #View_paddingEnd com.d_andaman:paddingEnd}</code></td><td> Sets the padding, in pixels, of the end edge; see {@link android.R.attr#padding}.</td></tr>
           <tr><td><code>{@link #View_paddingStart com.d_andaman:paddingStart}</code></td><td> Sets the padding, in pixels, of the start edge; see {@link android.R.attr#padding}.</td></tr>
           </table>
           @see #View_android_focusable
           @see #View_paddingEnd
           @see #View_paddingStart
         */
        public static final int[] View = {
            0x010100da, 0x7f010038, 0x7f010039
        };
        /**
          <p>
          @attr description
           Boolean that controls whether a view can take focus.  By default the user can not
             move focus to a view; by setting this attribute to true the view is
             allowed to take focus.  This value does not impact the behavior of
             directly calling {@link android.view.View#requestFocus}, which will
             always request focus regardless of this view.  It only impacts where
             focus navigation will try to move focus. 
          <p>This corresponds to the global attribute
          resource symbol {@link android.R.attr#focusable}.
          @attr name android:focusable
        */
        public static final int View_android_focusable = 0;
        /**
          <p>
          @attr description
           Sets the padding, in pixels, of the end edge; see {@link android.R.attr#padding}. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name com.d_andaman:paddingEnd
        */
        public static final int View_paddingEnd = 2;
        /**
          <p>
          @attr description
           Sets the padding, in pixels, of the start edge; see {@link android.R.attr#padding}. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name com.d_andaman:paddingStart
        */
        public static final int View_paddingStart = 1;
    };
}


/** Automatically generated file. DO NOT MODIFY */
package com.d_andaman;

public final class BuildConfig {
    public final static boolean DEBUG = true;
}

package com.d_andaman;

import android.app.Activity;
import android.os.Bundle;
import android.widget.ImageView;
import android.widget.TextView;

public class Show_relif_image extends Activity {
	
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.view_relif_image);
		
		ImageView img=(ImageView) findViewById(R.id.relif_img_view);
		TextView text=(TextView) findViewById(R.id.img_text);
		
		int Arg = getIntent().getExtras().getInt("arg");
		
		String[] values = new String[] { "BatuBasti", "Lamba Line", "Air Port",
				  "Kamraj Nagar", "Goal Ghar","Car Nicobar","Great Nicobar","Kamorta","Katchal","Little Andaman","Teressa"};
		int[] img1={R.drawable.map1,R.drawable.map2,R.drawable.map3,R.drawable.map4,R.drawable.map5,R.drawable.car_nicobar,
				R.drawable.great_nicobar,R.drawable.kamorta,R.drawable.katchal,R.drawable.little_andman,R.drawable.teressa};
		
		img.setImageResource(img1[Arg]);
		text.setText(values[Arg]);
		
		
	}
}


package com.d_andaman;

import android.app.Activity;
import android.os.Bundle;
import android.widget.ListView;

public class try_list extends Activity {
	 
	ListView list;
	
	
	
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		setContentView(R.layout.do_dont_list);
	}

}


package com.d_andaman;


import android.app.AlertDialog;
import android.app.DialogFragment;
import android.os.Bundle;
import android.view.LayoutInflater;


public class Message extends DialogFragment{
	
	@Override
	public android.app.Dialog onCreateDialog(Bundle savedInstanceState) {
        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
        
        LayoutInflater inflater = getActivity().getLayoutInflater();

       
        builder.setView(inflater.inflate(R.layout.message, null));
    
               /*.setPositiveButton("ok", new DialogInterface.OnClickListener() {
                   @Override
                   public void onClick(DialogInterface dialog, int id) {
                       // sign in the user ...
                   }
               })
               .setNegativeButton("Cancle", new DialogInterface.OnClickListener() {
                   public void onClick(DialogInterface dialog, int id) {
                       Dialog.this.getDialog().cancel();
                   }
               });*/
        return builder.create();
    }

	
}


package com.d_andaman;

import java.util.Random;


import android.app.Activity;
import android.content.Context;
import android.graphics.Typeface;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;



public class Survival_kit extends Activity{

	private ListView listview;
	public Array_adapter array;
	public int pos=0;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.survivalkit);

		String[] earthquake =getResources().getStringArray(R.array.document);
		String[] cyclone =getResources().getStringArray(R.array.emergency);
		String[] fire =getResources().getStringArray(R.array.eatable );
		String[] flood =getResources().getStringArray(R.array.cloth);
		String[] tsunami =getResources().getStringArray(R.array.cash);
		String[] add={"Add"};
		TextView text=(TextView) findViewById(R.id.kittext);
		//ImageView image=(ImageView) findViewById(R.id.do_img);

		int Arg = getIntent().getExtras().getInt("arg");
		String[] values = new String[] { "Documents","Emergency Equipments","Etable items","Clothes","Liquid cash","Add kit"};	


		text.setText(values[Arg]);

		listview=(ListView) findViewById(R.id.kitlist);



		switch(Arg){
		case 0: array=new Array_adapter(this, R.layout.survivalkitlist,earthquake);
		break;
		case 1: array=new Array_adapter(this, R.layout.survivalkitlist,cyclone);
		break;
		case 2: array=new Array_adapter(this, R.layout.survivalkitlist,fire);
		break;
		case 3: array=new Array_adapter(this, R.layout.survivalkitlist,flood);
		break;
		case 4: array=new Array_adapter(this, R.layout.survivalkitlist,tsunami);
		break;
		case 5: array=new Array_adapter(this, R.layout.survivalkitlist,add);
		break;
		}

		listview.setAdapter(array); 


	}


	public class Array_adapter extends ArrayAdapter {



		Typeface typeFace=Typeface.createFromAsset(getAssets(),"fonts/fontawesome-webfont.ttf");
		public Array_adapter(Context context, int resource,String[] item) {
			super(context, resource,item);

		}



		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			View row = convertView;

			int[] img={R.color.icon1,R.color.icon2,R.color.icon3,R.color.icon4,R.color.icon5};

			if(row == null) {
				row = LayoutInflater.from(getContext()).inflate(R.layout.survivalkitlist, parent, false);
			}
			String item = (String) getItem(position);

			LinearLayout left =(LinearLayout)row.findViewById(R.id.surlay1);

			TextView text = (TextView)row.findViewById(R.id.sur_list_text2);
			TextView num=(TextView) row.findViewById(R.id.sur_list_text);
			
			if(position%5==0){
				pos=0;
			}
			
			num.setText(""+(position+1));
			left.setBackgroundResource(img[pos++]);
			text.setTypeface(typeFace);
			text.setText(item);
			return row;
		}



	}	




}


package com.d_andaman;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

import android.app.Activity;
import android.os.Bundle;
import android.webkit.JavascriptInterface;
import android.webkit.WebView;

public class Map extends Activity{

	private WebView webView;

    public class WebAppInterface {
        /** Show a toast from svg */
        @JavascriptInterface
        public void showToast(String toast) {
          //Toast.makeText(MainActivity.this, toast, Toast.LENGTH_SHORT).show();
        }
      }
  

  @Override
  protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.map);

    webView = (WebView) findViewById(R.id.mapview);
    webView.getSettings().setJavaScriptEnabled(true);
    webView.addJavascriptInterface(new WebAppInterface(), "Android");

    String svg = loadSvg();
    webView.loadData(svg, "image/svg+xml", "utf-8");
   
    
  }

  String loadSvg() {
    try {
      BufferedReader input = new BufferedReader(new InputStreamReader(
          getAssets().open("and.html")));
      StringBuffer buf = new StringBuffer();
      String s = null;
      while ((s = input.readLine()) != null) {
        buf.append(s);
        buf.append('\n');
      }
      input.close();
      return buf.toString();
    } catch (IOException ex) {
      ex.printStackTrace();
    }
    return null;
  }
  
  
	
	
}


package com.d_andaman;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.URI;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLEncoder;

import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;



import android.content.Context;

import android.os.AsyncTask;
import android.widget.TextView;


public class Sendfeed  extends AsyncTask<String,Void,String>{

	private Context context;
	private TextView sta;



	public Sendfeed(Context context,TextView status) {
		this.context = context;
		this.sta=status;



	}

	protected void onPreExecute(){



	}

	@Override
	protected String doInBackground(String... arg0) {


		try{
			String feedback,service,app,look,ease,down;
			feedback = (String)arg0[0];
			service=(String)arg0[1];
			app=(String)arg0[2];
			look=(String)arg0[3];
			ease=(String)arg0[4];
			down=(String)arg0[5];

			String link = "http://192.168.83.1/dand_api/feedback.php?id=1&app="+app+"&gernal="+feedback+
					"&service="+service+"&look="+look+"&ease="+ease+"&down="+down;


			HttpClient client = new DefaultHttpClient();
			HttpGet request = new HttpGet();
			request.setURI(new URI(link));
			HttpResponse response = client.execute(request);
			BufferedReader in = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));

			StringBuffer sb = new StringBuffer("");
			String line="";

			while ((line = in.readLine()) != null) {
				sb.append(line);
				break;
			}
			in.close();
			return sb.toString();

		}catch(Exception e){return null;}

		//return null;
	}

	@Override
	protected void onPostExecute(String result){

		sta.setText(result);
	}






}

package com.d_andaman;
 
public class Alert_list {
     
   
    int id;
    String alert_text;
     
    public Alert_list(){
    	
    }
    // constructor
    public Alert_list(int id, String name){
        this.id = id;
        this.alert_text = name;
        
    }
     
  
    public int getID(){
        return this.id;
    }
     
    // setting id
    public void setID(int id){
        this.id = id;
    }
     
    // getting name
    public String getName(){
        return this.alert_text;
    }
     
    // setting name
    public void setName(String name){
        this.alert_text = name;
    }
     
  
}

package com.d_andaman;

import android.annotation.SuppressLint;
import android.app.ActionBar;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.Bundle;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.PopupMenu;
import android.widget.RadioButton;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.PopupMenu.OnMenuItemClickListener;

@SuppressLint("NewApi")
public class feedback extends Activity implements OnMenuItemClickListener{
	
	EditText feed;
	Button but;
	private RadioButton service,network,app;
	
	
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.feedback);
		
		
		ActionBar action = getActionBar();
		action.setIcon(R.drawable.meanu_bar);
		action.setTitle("Feedback");
		
		//wservice=(RadioButton)findViewById(R.id.radioButton1);
		feed=(EditText)findViewById(R.id.feed_text);
		but=(Button)findViewById(R.id.feedback_s);
		
		
		but.setOnClickListener(new View.OnClickListener(){

			@Override
			public void onClick(View v) {
				String email = feed.getText().toString().trim();
				
				if (!email.isEmpty()) {
					if(email.length()>100){
						
						Toast.makeText(getApplicationContext(),
								"Content cannot exceed 100 character", Toast.LENGTH_SHORT).show();	
						
							}else{send_feed();}
					}else{
						Toast.makeText(getApplicationContext(),
								"Please enter the feedback", Toast.LENGTH_SHORT).show();
						}
				
				Toast.makeText(getApplicationContext(),
						"Please enter the feedback1", Toast.LENGTH_SHORT).show();
			
				}
				
				
			});
		
}
	
public void send_feed(){
		
		ConnectivityManager connMgr = (ConnectivityManager)
				getSystemService(Context.CONNECTIVITY_SERVICE);
		NetworkInfo networkInfo = connMgr.getActiveNetworkInfo();

		if (networkInfo != null && networkInfo.isConnected()) {
			
			
			String feedback = feed.getText().toString();
			//new Sendfeed(getBaseContext(),1).execute(feedback);
			
		}
		
		else
		{
			Toast.makeText(getApplicationContext(),
					"No Network connection", Toast.LENGTH_SHORT).show();
			
		}
		
	}

	
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		getMenuInflater().inflate(R.menu.head, menu);
		return true;
}
	
	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
	    // Handle item selection
		View view=findViewById(R.id.setting);
	    switch (item.getItemId()) {
	        case R.id.setting:
			Popup(view);
	      default:
	            return super.onOptionsItemSelected(item);
	    }
	    
	}
	
	
	public void Popup(View v) {
	    PopupMenu popup = new PopupMenu(this, v);
	    MenuInflater inflater = popup.getMenuInflater();
	    popup.setOnMenuItemClickListener(this);
	    inflater.inflate(R.menu.actions, popup.getMenu());
	    popup.show();
	}

	@Override
	public boolean onMenuItemClick(MenuItem item) {
		// TODO Auto-generated method stub
		return false;
	}
	
	
	
	
	
	
}


package com.d_andaman;

import android.app.Activity;
import android.os.Bundle;

public class Help extends Activity{
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		setContentView(R.layout.help);
	}
	

}


package com.d_andaman;

import android.annotation.SuppressLint;
import android.app.ActionBar;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.Bundle;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.PopupMenu;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.PopupMenu.OnMenuItemClickListener;

@SuppressLint("NewApi")
public class Send_feedback extends Activity {
	
	EditText edit,feed;
	EditText edit2;
	Button but;
	TextView status;
	RadioGroup service,app,look,ease,down;
	RadioButton check;
	
	
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.feedback);
		edit2=(EditText) findViewById(R.id.feed_text);
		but=(Button) findViewById(R.id.feedback_s);
		status=(TextView) findViewById(R.id.status_text);
		
		ActionBar action = getActionBar();
	
		action.setTitle("Feedback");
		action.setIcon(R.drawable.circle1);
		
		service=(RadioGroup)findViewById(R.id.radioGroup1);
		look=(RadioGroup)findViewById(R.id.radioGroup3);
		ease=(RadioGroup)findViewById(R.id.radioGroup4);
		app=(RadioGroup)findViewById(R.id.radioGroup2);
		down=(RadioGroup)findViewById(R.id.radioGroup5);
		feed=(EditText)findViewById(R.id.feed_text);
		but=(Button)findViewById(R.id.feedback_s);
		
		
		
		
		
		
		
		but.setOnClickListener(new View.OnClickListener(){

			@Override
			public void onClick(View v) {
				String email = feed.getText().toString().trim();
				
				if (!email.isEmpty()) {
					if(email.length()>60){
						
						Toast.makeText(getApplicationContext(),
								"Content cannot exceed 60 character", Toast.LENGTH_SHORT).show();	
						
							}else{send_feed();}
					}else{
						Toast.makeText(getApplicationContext(),
								"Please enter the feedback", Toast.LENGTH_SHORT).show();
						}
				
				
			
				}
				
				
			});
		
}
	
public void send_feed(){
		
		ConnectivityManager connMgr = (ConnectivityManager)
				getSystemService(Context.CONNECTIVITY_SERVICE);
		NetworkInfo networkInfo = connMgr.getActiveNetworkInfo();

		if (networkInfo != null && networkInfo.isConnected()) {
			
			int id1=service.getCheckedRadioButtonId();
			int id2=app.getCheckedRadioButtonId();
			int id3=look.getCheckedRadioButtonId();
			int id4=ease.getCheckedRadioButtonId();
			int id5=down.getCheckedRadioButtonId();
			check=(RadioButton) findViewById(id1);
			String feedback = feed.getText().toString().trim();
			String service_text=check.getText().toString().trim();
			check=(RadioButton) findViewById(id2);
			String app_text=check.getText().toString().trim();
			check=(RadioButton) findViewById(id3);
			String look_text=check.getText().toString().trim();
			check=(RadioButton) findViewById(id4);
			String ease_text=check.getText().toString().trim();
			check=(RadioButton) findViewById(id5);
			String down_text=check.getText().toString().trim();
			new Sendfeed(getBaseContext(),status).execute(feedback,service_text,app_text,look_text,ease_text,down_text);
			
		}
		
		else
		{
			Toast.makeText(getApplicationContext(),
					"No Network connection", Toast.LENGTH_SHORT).show();
			
		}
		
	}
			}


package com.d_andaman;

import java.util.List;
import java.util.Random;

import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;

public class Useradapter extends ArrayAdapter<User>{

	public Useradapter(Context context, List<User> user) {
		
		super(context,-1,user);
		
	}
	
	
	@Override
	public View getView(int position, View convertView, ViewGroup parent) {
			View row = convertView;
			int[] img={R.color.icon1,R.color.icon2,R.color.icon3};
			
			
			if(row == null) {
			row = LayoutInflater.from(getContext()).inflate(R.layout.new_user_list, parent, false);
			}
			User item = getItem(position);
			
			ImageView left =(ImageView)row.findViewById(R.id.user_img);
			
			TextView name = (TextView)row.findViewById(R.id.name);
			TextView location = (TextView)row.findViewById(R.id.location);
			TextView pincode = (TextView)row.findViewById(R.id.pincode);
			
			Random rand = new Random();
		    int pos = rand.nextInt(3);
		    
		   left.setBackgroundResource(img[pos]);
			name.setText(item.name);
			location.setText(item.location);
			String pin=""+item.pincode;
			pincode.setText(pin);
			
			return row;
			}

}


package com.d_andaman;

import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;

public class Dialog_sos extends Activity{


	private TextView txt,txt1;
	private Button temp1,temp2,temp3,temp4,cancle;
	

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.sos_dialog);
		
		temp1=(Button)findViewById(R.id.button1);
		temp2=(Button)findViewById(R.id.button2);
		temp3=(Button)findViewById(R.id.button3);
		temp4=(Button)findViewById(R.id.button4);
		cancle=(Button)findViewById(R.id.cancle);
		

		temp1.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
					Intent i = new Intent(getApplicationContext(),
						Send_popup.class);
					i.putExtra("message","IAD");
				
				startActivity(i);
				finish();
				
			}
		});
		temp2.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
					Intent i = new Intent(getApplicationContext(),
						Send_popup.class);
					i.putExtra("message","IAL");
				
				startActivity(i);
				finish();
				
			}
		});
		temp3.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
					Intent i = new Intent(getApplicationContext(),
						Send_popup.class);
					i.putExtra("message","SBFM");
				
				startActivity(i);
				finish();
				
			}
		});
		temp4.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
					Intent i = new Intent(getApplicationContext(),
						Send_popup.class);
					i.putExtra("message","SID");
				
				startActivity(i);
				finish();
				
			}
		});

		cancle.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
				//closeContextMenu();
				finish();

			}
		});

	}



}





package com.d_andaman;
 
public class Notification_data {
     
   
    int id;
    String name;
     
    public Notification_data(){
    	
    }
    // constructor
    public Notification_data(int id, String name){
        this.id = id;
        this.name = name;
        
    }
     
  
    public int getID(){
        return this.id;
    }
     
    // setting id
    public void setID(int id){
        this.id = id;
    }
     
    // getting name
    public String getName(){
        return this.name;
    }
     
    // setting name
    public void setName(String name){
        this.name = name;
    }
     
    // getting phone number
    //public String getPhoneNumber(){
       // return this.phone_number;
   // }
     
    // setting phone number
   //public void setPhoneNumber(String phone_number){
       // this.phone_number = phone_number;
   // }
}

package com.d_andaman;

import android.widget.TextView;

public class Drawer_data_holder {
private TextView text;

public Drawer_data_holder(TextView text){
	this.text=text;
}

public void settext(TextView text){
	this.text=text;
}


public TextView gettext(){
	return this.text;
}


}


package com.d_andaman;

import java.util.List;
import java.util.Random;




import android.app.Activity;
import android.content.Context;
import android.graphics.Typeface;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;

import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;

public class Display_dos extends Activity{
	private ListView listview;
	public Array_adapter array;
	public  static int pos=0;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.dispay_dos);
		
		String[] earthquake =getResources().getStringArray(R.array.earthquake);
		String[] cyclone =getResources().getStringArray(R.array.cyclone);
		String[] fire =getResources().getStringArray(R.array.fire);
		String[] flood =getResources().getStringArray(R.array.flood);
		String[] tsunami =getResources().getStringArray(R.array.tsunami);
		String[] tsunamid =getResources().getStringArray(R.array.tsunamid);
		String[] earthquaked =getResources().getStringArray(R.array.earthquaked);
		String[] cycloned =getResources().getStringArray(R.array.cycloned);
		String[] floodd =getResources().getStringArray(R.array.floodd);
		String[] fired =getResources().getStringArray(R.array.fired);
		
		//TextView text=(TextView) findViewById(R.id.do_text);
		ImageView image=(ImageView) findViewById(R.id.do_img);
		
		String Arg = getIntent().getExtras().getString("arg");
		String[] values = new String[] { "earthquake","cyclone","tsunami","fire","flood","Add Do/Donts"};	
		
		
		
		listview=(ListView) findViewById(R.id.dolist);
		
		switch(Arg){
		case "EarthquakeDo's": array=new Array_adapter(this,earthquake);
		break;
		case "CycloneDo's": array=new Array_adapter(this,cyclone);
		break;
		case "TsunamiDo's": array=new Array_adapter(this,tsunami);
		break;
		case "FireDo's": array=new Array_adapter(this,fire);
		break;
		case "FloodDo's": array=new Array_adapter(this,flood);
		break;
		case "EarthquakeDont's": array=new Array_adapter(this,earthquaked);
		break;
		case "CycloneDont's": array=new Array_adapter(this,cycloned);
		break;
		case "TsunamiDont's": array=new Array_adapter(this,tsunamid);
		break;
		case "FireDont's": array=new Array_adapter(this,fired);
		break;
		case "FloodDont's": array=new Array_adapter(this,floodd);
		break;
		
	
			}
		
		listview.setAdapter(array); 
		
		
		}
	
	
	public class Array_adapter extends ArrayAdapter {

		private int color;
		
		Typeface typeFace=Typeface.createFromAsset(getAssets(),"fonts/fontawesome-webfont.ttf");
		public Array_adapter(Context context,String[] item) {
			super(context,-1,item);
			
		}
		
		
		
		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
				View row = convertView;
			
				//int[] color={R.color.icon1};
				
				if(row == null) {
				row = LayoutInflater.from(getContext()).inflate(R.layout.do_list, parent, false);
				}
				String item = (String) getItem(position);
				
				LinearLayout rel=(LinearLayout)row.findViewById(R.id.img1);
				TextView img=(TextView) row.findViewById(R.id.img_text);
				TextView text = (TextView)row.findViewById(R.id.txt1);
				//ImageView img1=(ImageView) row.findViewById(R.id.callbut);
				
				
				
				text.setTypeface(typeFace);
			    rel.setBackgroundResource(R.color.but_ok);
			   	img.setText(""+(position+1));
			   
				text.setText(item);
				    
				return row;
				}
			
			

	}	
	
	


}


package com.d_andaman;

import android.app.Activity;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;

public class About extends Activity{

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.about);
		
		Button close;
		close=(Button) findViewById(R.id.close);
		
		close.setOnClickListener(new View.OnClickListener() {
			
			@Override
			public void onClick(View v) {
				finish();
				
			}
		});
	
	
	
}
}

package com.d_andaman;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.ExpandableListAdapter;
import android.widget.ExpandableListView;
import android.widget.ExpandableListView.OnChildClickListener;
import android.widget.ExpandableListView.OnGroupClickListener;
import android.widget.ExpandableListView.OnGroupCollapseListener;
import android.widget.ExpandableListView.OnGroupExpandListener;
import android.widget.Toast;
 
public class Expand extends Activity {
 
    ExpandableListAdapter listAdapter;
    ExpandableListView expListView;
    List<String> listDataHeader;
    HashMap<String, List<String>> listDataChild;
 
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.expand);
 
        
        expListView = (ExpandableListView) findViewById(R.id.lvExp);
 
       
        prepareListData();
 
        listAdapter = new Expandablelist(this, listDataHeader, listDataChild);
 
       
        expListView.setAdapter(listAdapter);
        
        expListView.setOnGroupClickListener(new OnGroupClickListener() {
        	 
            @Override
            public boolean onGroupClick(ExpandableListView parent, View v,
                    int groupPosition, long id) {
                // Toast.makeText(getApplicationContext(),
                // "Group Clicked " + listDataHeader.get(groupPosition),
                // Toast.LENGTH_SHORT).show();
                return false;
            }
        });
 
        // Listview Group expanded listener
        expListView.setOnGroupExpandListener(new OnGroupExpandListener() {
 
            @Override
            public void onGroupExpand(int groupPosition) {
                
            }
        });
 
        // Listview Group collasped listener
        expListView.setOnGroupCollapseListener(new OnGroupCollapseListener() {
 
            @Override
            public void onGroupCollapse(int groupPosition) {
               
 
            }
        });
 
        // Listview on child click listener
        expListView.setOnChildClickListener(new OnChildClickListener() {
 
            @Override
            public boolean onChildClick(ExpandableListView parent, View v,
                    int groupPosition, int childPosition, long id) {
                // TODO Auto-generated method stub
            	 String itemPosition=listDataHeader.get(groupPosition)
                         + listDataChild.get(
                                 listDataHeader.get(groupPosition)).get(
                                 childPosition);
               
                 Intent i = new Intent(getApplicationContext(),
						Display_dos.class);
			   i.putExtra("arg", itemPosition);
			   
				startActivity(i);
                return false;
            }
        });
        
        
        
    }
 
   
    private void prepareListData() {
        listDataHeader = new ArrayList<String>();
        listDataChild = new HashMap<String, List<String>>();
        listDataHeader.add("Earthquake");
        listDataHeader.add("Cyclone");
        listDataHeader.add("Tsunami");
        listDataHeader.add("Fire");
        listDataHeader.add("Flood");
        List<String> dodont = new ArrayList<String>();
        dodont.add("Do's");
        dodont.add("Dont's");
        listDataChild.put(listDataHeader.get(0), dodont);
        listDataChild.put(listDataHeader.get(1), dodont);
        listDataChild.put(listDataHeader.get(2), dodont);
        listDataChild.put(listDataHeader.get(3), dodont);
        listDataChild.put(listDataHeader.get(4), dodont);
        
    }
}

package com.d_andaman;



import java.util.Random;

import android.annotation.SuppressLint;
import android.app.ActionBar;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;

import android.net.Uri;
import android.os.Bundle;
import android.telephony.PhoneStateListener;
import android.telephony.TelephonyManager;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
//import android.widget.AdapterView;
import android.widget.ArrayAdapter;

import android.widget.AdapterView;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;
//import android.widget.AdapterView.OnItemClickListener;
import android.widget.AdapterView.OnItemClickListener;

@SuppressLint("NewApi")
public class Contact extends Activity{
	ListView listView;
	public int pos=0;
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.contact);


		//ActionBar action = getActionBar();
		//action.setIcon(R.drawable.meanu_bar);
		//action.setTitle("Contact");

		listView = (ListView) findViewById(R.id.list_contact);


		String[] values = new String[] { 
				"All India Radio","Ambulance","Child Care","Coast Guard (MRCC)","District Control Room",
				"Doordarshan","Echo Of India","Fire","Govt. Press","Women Care","State Control Room"};

		final String[] number= new String[]
				{"230360 ","102","1098","1093","1070","233766","230269","101 ","229217","1091","1077"};

		Array_adapter array=new Array_adapter(this, R.layout.contact_list,R.id.name,values);

		listView.setAdapter(array); 

		PhoneCallListener phoneListener = new PhoneCallListener();
		TelephonyManager telephonyManager = (TelephonyManager) this
				.getSystemService(Context.TELEPHONY_SERVICE);
		telephonyManager.listen(phoneListener,PhoneStateListener.LISTEN_CALL_STATE);

		listView.setOnItemClickListener(new OnItemClickListener() {
			@Override
			public void onItemClick(AdapterView<?> parent, View view,
					int position, long id) {


				int itemPosition  = position;


				Intent callIntent = new Intent(Intent.ACTION_DIAL);
				callIntent.setData(Uri.parse("tel:"+number[itemPosition]));
				try{
					startActivity(callIntent);
				}catch (android.content.ActivityNotFoundException ex){
					Toast.makeText(getApplicationContext(),"yourActivity is not founded",Toast.LENGTH_SHORT).show();
				}




			}


		}); 

	}



	//----------------------------------------------------------------------------------------------------------------------------

	public class Array_adapter extends ArrayAdapter {

		public Array_adapter(Context context, int resource,int text,String[] item) {
			super(context, resource,text,item);

		}



		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			View row = convertView;
			
			//int pos;
			
		 String[] number= new String[]
					{"230360 ","102","1098","1093","1070","233766","230269","101 ","229217","1091","1077"};

			int[] color={R.color.icon1,R.color.icon2,R.color.icon3,
					R.color.icon4,R.color.icon5,R.color.icon6};

			String[] t={"A","A","C","C","D","D","E","F","G","W","S"};

			if(row == null) {
				row = LayoutInflater.from(getContext()).inflate(R.layout.contact_list, parent, false);
			}
			String item = (String) getItem(position);

			LinearLayout rel=(LinearLayout)row.findViewById(R.id.contact_img);

			TextView img=(TextView) row.findViewById(R.id.img_text);

			ImageView img1=(ImageView) row.findViewById(R.id.callbut);

			TextView left =(TextView)row.findViewById(R.id.number);

			TextView text = (TextView)row.findViewById(R.id.name);

			if(position%5==0){
				pos=0;
			}
			
			rel.setBackgroundResource(color[pos++]);

			left.setText(number[position]);
			img.setText(t[position]);
			img1.setImageResource(R.drawable.call);
			text.setText(item);
			return row;
		}



	}

	//--------------------------------------------------------------------------------------------------------------------------------
	private class PhoneCallListener extends PhoneStateListener {

		private boolean isPhoneCalling = false;

		String LOG_TAG = "LOGGING 123";
		@Override
		public void onCallStateChanged(int state, String incomingNumber) {

			if (TelephonyManager.CALL_STATE_RINGING == state) {
				// phone ringing
				Log.i(LOG_TAG, "RINGING, number: " + incomingNumber);
			}

			if (TelephonyManager.CALL_STATE_OFFHOOK == state) {
				// active
				Log.i(LOG_TAG, "OFFHOOK");

				isPhoneCalling = true;
			}

			if (TelephonyManager.CALL_STATE_IDLE == state) {
				// run when class initial and phone call ended,
				// need detect flag from CALL_STATE_OFFHOOK
				Log.i(LOG_TAG, "IDLE");

				if (isPhoneCalling) {

					Log.i(LOG_TAG, "restart app");

					// restart app
					Intent i = getBaseContext().getPackageManager()
							.getLaunchIntentForPackage(
									getBaseContext().getPackageName());
					i.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
					startActivity(i);

					isPhoneCalling = false;
				}

			}
		}
	}


}


package com.d_andaman;

import java.io.ObjectOutputStream.PutField;
import java.text.SimpleDateFormat;

import java.util.Calendar;
import java.util.HashMap;
import java.util.List;

import com.d_andaman.R;


import android.annotation.SuppressLint;
import android.app.ActionBar;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;

import android.graphics.Typeface;
import android.net.Uri;
import android.os.Bundle;

import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.view.animation.Animation;

import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.ListAdapter;
import android.widget.ListView;
import android.widget.Toast;

import android.widget.GridView;
import android.widget.ImageView;
import android.widget.LinearLayout;

import android.widget.PopupMenu;
import android.widget.PopupMenu.OnMenuItemClickListener;

import android.widget.TextView;

import android.widget.AdapterView.OnItemClickListener;
import android.support.v4.app.ActionBarDrawerToggle;
import android.support.v4.widget.DrawerLayout;

@SuppressLint("NewApi")
public class New_menu extends Activity implements OnMenuItemClickListener{
	GridView listView ;
	Button alert,sos;
	Animation animFadein;
	View layout;
	TextView day1,date1,month1,year1,weather;
	public Database db;
	public static int pos=0;
	private DrawerLayout mDrawerLayout;
	private ListView mDrawerList;   
	private ActionBarDrawerToggle mDrawerToggle;
	private GPSTracker gps;
	
	List<String> listDataHeader;
	HashMap<String, List<String>> listDataChild;
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.main);

		Calendar calendar = Calendar.getInstance(); 

		SimpleDateFormat day = new SimpleDateFormat("EEEE");
		SimpleDateFormat date = new SimpleDateFormat("dd");
		SimpleDateFormat month = new SimpleDateFormat("MMMM");
		SimpleDateFormat year = new SimpleDateFormat("yyyy");


		day1=(TextView) findViewById(R.id.day);
		date1=(TextView) findViewById(R.id.date);
		month1=(TextView) findViewById(R.id.month);
		year1=(TextView) findViewById(R.id.year);
		weather=(TextView) findViewById(R.id.weather);

		day1.setText(day.format(calendar.getTime()));
		date1.setText(date.format(calendar.getTime()));
		month1.setText(month.format(calendar.getTime()));
		year1.setText(year.format(calendar.getTime()));
		String str=""+Get_weather.get_weather()+"C";
		weather.setText(str);

		//TextView lblListHeader = (TextView) findViewById(R.id.movingtext);
		//lblListHeader.setSelected(true);
		 
		
	
	      
			mDrawerList=(ListView) findViewById(R.id.drawerlist);
		
		//LinearLayout DrawerList=(LinearLayout) findViewById(R.id.dra);
	       mDrawerLayout = (DrawerLayout) findViewById(R.id.drawer);
	       getActionBar().setDisplayHomeAsUpEnabled(true);   
	       getActionBar().setHomeButtonEnabled(true);

	       mDrawerToggle = new ActionBarDrawerToggle(this, mDrawerLayout,R.drawable.aniket3, R.string.app_name,
	    		   R.string.app_name) {
	    	   public void onDrawerClosed(View view) { 
               //getActionBar().setTitle(mTitle); 
               // calling onPrepareOptionsMenu() to show action bar icons 
                invalidateOptionsMenu(); 
                } 
    public void onDrawerOpened(View drawerView) {           
          // getActionBar().setTitle(mDrawerTitle); 
     // calling onPrepareOptionsMenu() to hide action bar icons 
           invalidateOptionsMenu();          } 
          }; 
		
		 		 
	       mDrawerLayout.setDrawerListener(mDrawerToggle); 


		ActionBar action = getActionBar();
		action.setIcon(R.drawable.meanu_bar);
		action.setTitle("Menu");

		listView = (GridView) findViewById(R.id.menu_list);

		alert=(Button) findViewById(R.id.alert_but);
		sos=(Button) findViewById(R.id.sos);

		
		
		String[] values = new String[] { "Friends","Do's and Dont's", "Videos", 
				"Feedback","Contact","Inbox","Location","Survivial Kit","Family"};
		String[] drwa_data={"Disaster Management","Notification","App Manual","About DDM"};
		
		Array_adapter array=new Array_adapter(this, R.layout.list_view,R.id.list_text,values);

		listView.setAdapter(array); 
		Typeface typeFace=Typeface.createFromAsset(getAssets(),"fonts/prince.ttf");

		DrawerAdapter draw=new DrawerAdapter(this,drwa_data,typeFace);

		mDrawerList.setAdapter(draw); 


		listView.setOnItemClickListener(new OnItemClickListener() {
			@Override
			public void onItemClick(AdapterView<?> parent, View view,
					int position, long id) {


				int itemPosition  = position;


				String  itemValue    = (String) listView.getItemAtPosition(position);

				if(itemPosition==0){
					String MY_DB = "my_db";
					SharedPreferences sp = getSharedPreferences(MY_DB,Context.MODE_PRIVATE);

					int  id1 = sp.getInt("id",0);
					if (id1==0) {
						Intent i = new Intent(getApplicationContext(),
								Userprofil.class);
					startActivity(i);
										}else{

						Intent i = new Intent(getApplicationContext(),
								Readdata.class);
						startActivity(i);
					}

				}
				if(itemPosition==1){
					Intent i = new Intent(getApplicationContext(),
							Expand.class);
					startActivity(i);

				}
				if(itemPosition==2){
					Intent i = new Intent(getApplicationContext(),
							Ved_img.class);
					startActivity(i);

				}
				
				if(itemPosition==3){
					Intent i = new Intent(getApplicationContext(),
							Send_feedback.class);
					startActivity(i);

				}
				if(itemPosition==4){
					Intent i = new Intent(getApplicationContext(),
							Contact.class);
					startActivity(i);

				}
				if(itemPosition==5){



					Intent i = new Intent(getApplicationContext(),
							list_class.class);
					startActivity(i);

				}
				
				if(itemPosition==6){



					Intent i = new Intent(getApplicationContext(),
							Location_class.class);
					startActivity(i);

				}
				if(itemPosition==7){
					Intent i = new Intent(getApplicationContext(),
							Kit_display.class);
					startActivity(i);

				}
				
				if(itemPosition==8){
					Intent i = new Intent(getApplicationContext(),
							Family.class);
					startActivity(i);

				}




			}


		}); 



		alert.setOnClickListener(new View.OnClickListener(){

			@Override
			public void onClick(View v) {
				
				gps = new GPSTracker(New_menu.this);
				gps.canGetLocation();
				
		       Intent i = new Intent(getApplicationContext(),
						Dialog.class);
				
				startActivity(i);

			}   });
		
		
		/*sos.setOnClickListener(new View.OnClickListener(){

			@Override
			public void onClick(View v) {
				Intent callIntent = new Intent(Intent.ACTION_DIAL);
				callIntent.setData(Uri.parse("tel:"+1077));
				try{
					startActivity(callIntent);
				}catch (android.content.ActivityNotFoundException ex){
					Toast.makeText(getApplicationContext(),"yourActivity is not founded",Toast.LENGTH_SHORT).show();
				}

			}   });*/
		
		sos.setOnClickListener(new View.OnClickListener(){

			@Override
			public void onClick(View v) {
				Intent i = new Intent(getApplicationContext(),
						Dialog_sos.class);
				
				startActivity(i);

			}   });
		
		
		
		mDrawerList.setOnItemClickListener(new OnItemClickListener() {
			@Override
			public void onItemClick(AdapterView<?> parent, View view,
					int position, long id) {
					
				if(position==1){
					Intent i = new Intent(getApplicationContext(),
							Seoc_message.class);
					startActivity(i);
				}
				
				if(position==2){
					Intent i = new Intent(getApplicationContext(),
						Help.class);
					startActivity(i);
				}
				
				if(position==3){
					Intent i = new Intent(getApplicationContext(),
							About.class);
					startActivity(i);
				}
				
				
			}
		});
				
				


		
		
	}

	public class Array_adapter extends ArrayAdapter {


		Typeface typeFace=Typeface.createFromAsset(getAssets(),"fonts/Zekton.ttf");
		public Array_adapter(Context context, int resource,int text,String[] item) {
			super(context, resource,text,item);

		}



		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			View row = convertView;

			
			//String[] tx_val=new String[] {"F","D","V","F","C","N","L","S","F"};
			int[] img={R.drawable.friends,R.drawable.dodont5,R.drawable.vedios2,R.drawable.feedback5,
					R.drawable.contact5,R.drawable.notifi4,R.drawable.location4,R.drawable.kit4,R.drawable.family};
			
			
			if(row == null) {
				row = LayoutInflater.from(getContext()).inflate(R.layout.grid_view, parent, false);
			}
			String item = (String) getItem(position);

			
			ImageView left=(ImageView)row.findViewById(R.id.grid_img);
			TextView text = (TextView)row.findViewById(R.id.grid_text);
			//TextView text1 = (TextView)row.findViewById(R.id.icon_text);
			
			

			left.setImageResource(img[position]);
			//rel.setBackgroundResource(color1[position]);
			//text1.setText(tx_val[position]);
			text.setTypeface(typeFace);
			text.setText(item);
			
			return row;
		}
	


	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		getMenuInflater().inflate(R.menu.head, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		  
			 if (mDrawerToggle.onOptionsItemSelected(item)) {                   
			 return true;          
			 }
		View view=findViewById(R.id.setting);
		//View view1=findViewById(R.id.notification);
		switch (item.getItemId()) {
		case R.id.setting:
			Popup(view);
			return super.onOptionsItemSelected(item);
		case R.id.notification:
			notification();
			return super.onOptionsItemSelected(item);
		default:
			return super.onOptionsItemSelected(item);
		}

	}




	public void Popup(View v) {
		PopupMenu popup = new PopupMenu(this, v);
		popup.setOnMenuItemClickListener( this);
		MenuInflater inflater = popup.getMenuInflater();

		inflater.inflate(R.menu.actions, popup.getMenu());
		popup.show();
	}

	public boolean onMenuItemClick(MenuItem item) {
		switch (item.getItemId()) {
		case R.id.about1:
			display_popup();
			return true;
		//case R.id.setting1:
			//return false;
		case R.id.alert1:
			Intent i = new Intent(getApplicationContext(),
					Alert.class);
			startActivity(i);
			return true;
			
		default:return false;
		}
	}

	public void display_popup(){

		String url = "http://www.ddm.and.nic.in/";
		Intent i = new Intent(Intent.ACTION_VIEW);
		i.setData(Uri.parse(url));
		startActivity(i);
	}



	private void notification() {
		Intent i = new Intent(getApplicationContext(),
				Seoc_message.class);
		startActivity(i);


	}



}



package com.d_andaman;

import android.app.Activity;
import android.os.Bundle;

public class Popup extends Activity{

	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.popup);
		
	}

	
}


package com.d_andaman;

import android.annotation.SuppressLint;
import android.app.ActionBar;
import android.app.Activity;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.TaskStackBuilder;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.support.v4.app.NotificationCompat;

/*@SuppressLint("NewApi")
public class Notification extends Activity{

	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.make_note);
		
		ActionBar action = getActionBar();
		action.setIcon(R.drawable.meanu_bar);
		action.setTitle("Notification");
		
		
		
		NotificationCompat.Builder mBuilder =
		        new NotificationCompat.Builder(this)
		        .setSmallIcon(R.drawable.logo)
		        .setContentTitle("My notification")
		        .setContentText("Hello World!");
		// Creates an explicit intent for an Activity in your app
		Intent resultIntent = new Intent(this, Tab_layout.class);

		// The stack builder object will contain an artificial back stack for the
		// started Activity.
		// This ensures that navigating backward from the Activity leads out of
		// your application to the Home screen.
		TaskStackBuilder stackBuilder = TaskStackBuilder.create(this);
		// Adds the back stack for the Intent (but not the Intent itself)
		stackBuilder.addParentStack(Tab_layout.class);
		// Adds the Intent that starts the Activity to the top of the stack
		stackBuilder.addNextIntent(resultIntent);
		PendingIntent resultPendingIntent =
		        stackBuilder.getPendingIntent(
		            0,
		            PendingIntent.FLAG_UPDATE_CURRENT
		        );
		mBuilder.setContentIntent(resultPendingIntent);
		NotificationManager mNotificationManager =
		    (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);
		int mId=1;
		// mId allows you to update the notification later on.
		mNotificationManager.notify(mId, mBuilder.build());
		
		
		
		
}
}
*/

package com.d_andaman;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;

import java.util.List;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;





import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;

import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.AsyncTask;
import android.os.Bundle;


import android.view.View;
import android.widget.AdapterView;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.AdapterView.OnItemClickListener;


public class Readdata extends Activity {

	public List<User> userlist = new ArrayList<>();
	public ListView listview;
	public Useradapter useradapter;

	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.user_list);

		TextView tex=(TextView) findViewById(R.id.user_name);
		
		SharedPreferences sp = getSharedPreferences("my_db",Context.MODE_PRIVATE);
		String name=sp.getString("name","User");
		
		tex.setText("Welcome\t"+name);

		listview=(ListView) findViewById(R.id.userlist);


		useradapter =new Useradapter(this,userlist);

		listview.setAdapter(useradapter); 
		
		
		listview.setOnItemClickListener(new OnItemClickListener() {
			  @Override
			  public void onItemClick(AdapterView<?> parent, View view,
			    int position, long id) {
				
				  Message d=new Message();
				  d.show(getFragmentManager(), null);
				  
				  }}); 

		URL url = null;
		try {
			url = new URL("http://192.168.83.1/dand_api/service.php?user=1&format=json");
		} catch (MalformedURLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		if(url!=null){

			ConnectivityManager connMgr = (ConnectivityManager)
					getSystemService(Context.CONNECTIVITY_SERVICE);
			NetworkInfo networkInfo = connMgr.getActiveNetworkInfo();

			if (networkInfo != null && networkInfo.isConnected()) {

				Getuser get=new Getuser(this);
				get.execute(url);

			}else{ Toast.makeText(this, "NO network Avilable", Toast.LENGTH_SHORT).show();}

		}else{
			Toast.makeText(this, "eror in connection", Toast.LENGTH_SHORT).show();
		}

	}


	@SuppressLint("NewApi")
	class Getuser extends AsyncTask<URL, Void, JSONObject>{


		private Context context;


		public Getuser(Context context) {
			this.context = context;
		}


		@Override
		protected JSONObject doInBackground(URL... params) {
			HttpURLConnection connection=null;

			try{
				connection=(HttpURLConnection) params[0].openConnection();
				int response=connection.getResponseCode();

				if(response==HttpURLConnection.HTTP_OK){
					StringBuilder builder=new StringBuilder();

					try(BufferedReader reader =new BufferedReader(new InputStreamReader(connection.getInputStream()))){

						String line;

						while((line=reader.readLine())!=null){
							builder.append(line);
						}

					}catch (IOException e) {e.printStackTrace();}

					return new JSONObject(builder.toString());

				}else{
					Toast.makeText(context, "eror in connection1", Toast.LENGTH_SHORT).show();
				}
			}catch(Exception e){e.printStackTrace();}

			finally{connection.disconnect();}

			return null;

		}


		@Override
		protected void onPostExecute(JSONObject result) {

			convertjson(result);
			useradapter.notifyDataSetChanged();
			listview.smoothScrollToPosition(0);
		}


		private void convertjson(JSONObject result) {
			userlist.clear();
			try{
				JSONArray list=result.getJSONArray("posts");

				for(int i=0;i<list.length();i++){

					JSONObject u=list.getJSONObject(i);

					JSONObject post=u.getJSONObject("post");
					//JSONObject location=u.getJSONObject("location");
					//JSONObject pincode=u.getJSONObject("pincode");

					userlist.add(new User(post.getString("name"),
							post.getString("location"), post.getLong("pincode")));

				}
			}catch(JSONException e){e.printStackTrace();		}

		}
		
		
		


	}






}


































/*public void Readdata(Context context){

	try 
		{

        HttpParams httpParams = new BasicHttpParams();
        HttpConnectionParams.setConnectionTimeout(httpParams,TIMEOUT_MILLISEC);
        HttpConnectionParams.setSoTimeout(httpParams, TIMEOUT_MILLISEC);

        HttpParams p = new BasicHttpParams();

        p.setParameter("user", "1");


        HttpClient httpclient = new DefaultHttpClient(p);
        String url = "http://192.168.23.1/dand_api/service.php?user=1&format=json";
        HttpPost httppost = new HttpPost(url);


        try {
            Log.i(getClass().getSimpleName(), "send  task - start");

            List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(2);

            nameValuePairs.add(new BasicNameValuePair("user", "1"));
            httppost.setEntity((HttpEntity) new UrlEncodedFormEntity(nameValuePairs));
            ResponseHandler<String> responseHandler = new BasicResponseHandler();
            String responseBody = httpclient.execute(httppost,
                    responseHandler);
            // Parse
            JSONObject json = new JSONObject(responseBody);
            JSONArray jArray = json.getJSONArray("posts");
            ArrayList<HashMap<String, String>> mylist = 
                   new ArrayList<HashMap<String, String>>();

            for (int i = 0; i < jArray.length(); i++) {
                HashMap<String, String> map = new HashMap<String, String>();
                JSONObject e = jArray.getJSONObject(i);
                String s = e.getString("post");
                JSONObject jObject = new JSONObject(s);

                map.put("id", jObject.getString("id"));
                map.put("name", jObject.getString("name"));
                map.put("location", jObject.getString("location"));
                map.put("pincode", jObject.getString("pincode"));

                mylist.add(map);
            }

            Toast.makeText(context,responseBody, Toast.LENGTH_SHORT).show();





        } 
        catch (ClientProtocolException e) {e.printStackTrace();}
        catch (IOException e) {e.printStackTrace();}


    } catch (Throwable t) {Toast.makeText(context, "Request failed: " + t.toString(),Toast.LENGTH_LONG).show();}

	}*/















package com.d_andaman;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;


public class Startpopup extends Activity{


	
	private Button cancle,send;
	

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.start_popup);
		
		cancle=(Button) findViewById(R.id.decline);
		send=(Button) findViewById(R.id.accept);
		
		send.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {

				Intent i = new Intent(getApplicationContext(),
						New_menu.class);
						startActivity(i);
						finish();
						}
				});

		cancle.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
				
				finish();

			}
		});

	}



}





package com.d_andaman;

import android.content.Context;
import android.graphics.Typeface;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;

public class DrawerAdapter extends ArrayAdapter<String>{

	public static int[] type={1,2,2,2,3,3};
	public Typeface typeface;
	public DrawerAdapter(Context context,String[] item,Typeface typeface) {
		super(context,-1,item);
		this.typeface=typeface;
		
	}
	
	

	@Override
	public int getViewTypeCount() {
		// TODO Auto-generated method stub
		return 5;
	}

	@Override
	public int getItemViewType(int position) {
		// TODO Auto-generated method stub
		return type[position];
	}


	@Override
	public View getView(int position, View convertView, ViewGroup parent) {
		View row = convertView;
		Drawer_data_holder holder;

		int laytype=getItemViewType(position);

		if(row == null) {

			if(laytype==1){
				row = LayoutInflater.from(getContext()).inflate(R.layout.list_view, parent, false);
				TextView text = (TextView)row.findViewById(R.id.list_text);
				String item = (String) getItem(position);
				text.setText(item);
				ImageView left =(ImageView)row.findViewById(R.id.list_img);
				left.setImageResource(R.drawable.emblom);
			}

			if(laytype==2){
				row = LayoutInflater.from(getContext()).inflate(R.layout.data_list, parent, false);
				String item = (String) getItem(position);
				TextView text = (TextView)row.findViewById(R.id.textdata);
				text.setTypeface(typeface);
				text.setText(item);
			}

			if(laytype==3){
				row = LayoutInflater.from(getContext()).inflate(R.layout.small_data, parent, false);
				TextView text = (TextView)row.findViewById(R.id.notitext);
				String item = (String) getItem(position);
				text.setText(item);
				ImageView left =(ImageView)row.findViewById(R.id.notiimage);
				left.setImageResource(R.drawable.main);
			}
		}

		return row;
	}
}


package com.d_andaman;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.d_andaman.Readdata.Getuser;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.Context;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.v4.app.FragmentActivity;
import android.view.View;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

public class Seoc_message extends FragmentActivity{
	public List<Noti> notilist = new ArrayList<>();
	
	public ListView listview;
	public Notiadapter notiadapter;
	public Database db;
	public Get_weather g;
	private static int n_id;
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.notification_list);

		
		
		db = new Database(this);
		
		listview=(ListView) findViewById(R.id.notilist);

		notiadapter =new Notiadapter(this,notilist);

		listview.setAdapter(notiadapter); 
		
		n_id=getnid();
		
		URL url = null;
		try {
			url = new URL("http://192.168.83.1/dand_api/notification.php?id="+n_id);
		} catch (MalformedURLException e) {

			e.printStackTrace();
		}


		if(url!=null){

			ConnectivityManager connMgr = (ConnectivityManager)
					getSystemService(Context.CONNECTIVITY_SERVICE);
			NetworkInfo networkInfo = connMgr.getActiveNetworkInfo();

			if (networkInfo != null && networkInfo.isConnected()) {

				Getnoti get=new Getnoti(this);
				get.execute(url);

			}else{ Toast.makeText(this, "NO network Avilable", Toast.LENGTH_SHORT).show();}

		}else{
			Toast.makeText(this, "eror in connection", Toast.LENGTH_SHORT).show();
		}



	}

	public static void setnid(int i){
		n_id=i;
	}
	
	public static int getnid() {
		return n_id;
	}

	@SuppressLint("NewApi")
	class Getnoti extends AsyncTask<URL, Void, JSONObject>{


		private Context context;


		public Getnoti(Context context) {
			this.context = context;
		}


		@Override
		protected JSONObject doInBackground(URL... params) {
			HttpURLConnection connection=null;

			try{
				connection=(HttpURLConnection) params[0].openConnection();
				int response=connection.getResponseCode();

				if(response==HttpURLConnection.HTTP_OK){
					StringBuilder builder=new StringBuilder();

					try(BufferedReader reader =new BufferedReader(new InputStreamReader(connection.getInputStream()))){

						String line;

						while((line=reader.readLine())!=null){
							builder.append(line);
						}

					}catch (IOException e) {e.printStackTrace();}

					return new JSONObject(builder.toString());

				}else{
					Toast.makeText(context, "eror in connection1", Toast.LENGTH_SHORT).show();
				}
			}catch(Exception e){e.printStackTrace();}

			finally{connection.disconnect();}

			return null;

		}


		@Override
		protected void onPostExecute(JSONObject result) {

			convertjson(result);
			notiadapter.notifyDataSetChanged();
			listview.smoothScrollToPosition(0);
		}


		private void convertjson(JSONObject result) {
			notilist.clear();
			int max=0,k;
			try{
				JSONArray list=result.getJSONArray("posts");

				for(int i=0;i<list.length();i++){

					JSONObject u=list.getJSONObject(i);

					JSONObject post=u.getJSONObject("post");
					//JSONObject location=u.getJSONObject("location");
					//JSONObject pincode=u.getJSONObject("pincode");

					notilist.add(new Noti(post.getString("noti")));
					
					k=post.getInt("n_id");
					
					if(max<k){
						max=k;
					}
					
					db.addContact(new Notification_data(post.getInt("n_id"),post.getString("noti")));
				}
				
				
				if(max>getnid())
				setnid(max);
				
				
			}catch(JSONException e){e.printStackTrace();		}

		}


	}



}


package com.d_andaman;
import java.util.ArrayList;
import java.util.List;
 
import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
 
public class Database extends SQLiteOpenHelper {
 
    private static final int DATABASE_VERSION = 1;
 
  
    private static final String DATABASE_NAME = "dmn";
 
    
    private static final String TABLE_NOTIFICATION = "notification";
    private static final String TABLE_WEATHER="weather";
 
   
    private static final String KEY_ID = "id";
    private static final String KEY_NOTIFICATION = "name";
    private static final String KEY_PH_NO = "phone_number";
 
    public Database(Context context) {
        super(context, DATABASE_NAME, null, DATABASE_VERSION);
    }
    
 
   
    @Override
    public void onCreate(SQLiteDatabase db) {
        String CREATE_NOTIFICATION_TABLE = "CREATE TABLE " + TABLE_NOTIFICATION + "("
                + KEY_ID + " INTEGER," + KEY_NOTIFICATION + " TEXT)";
       
        db.execSQL(CREATE_NOTIFICATION_TABLE);
    }
 
    
    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
      
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_NOTIFICATION);
 
        
        onCreate(db);
    }
 
  
    
    void addContact(Notification_data contact) {
        SQLiteDatabase db = this.getWritableDatabase();
 
        ContentValues values = new ContentValues();
        values.put(KEY_NOTIFICATION, contact.getName()); 
        values.put(KEY_ID, contact.getID()); 
 
   
        db.insert(TABLE_NOTIFICATION, null, values);
        db.close(); 
    }
 
  
    Notification_data getContact(int id) {
        SQLiteDatabase db = this.getReadableDatabase();
 
        Cursor cursor = db.query(TABLE_NOTIFICATION, new String[] { KEY_ID,
                KEY_NOTIFICATION }, KEY_ID + "=?",
                new String[] { String.valueOf(id) }, null, null, null, null);
        if (cursor != null)
            cursor.moveToFirst();
 
        Notification_data contact = new Notification_data(Integer.parseInt(cursor.getString(0)),
                cursor.getString(1));
       
        return contact;
    }
     
   
    public List<Notification_data> getAllContacts() {
        List<Notification_data> contactList = new ArrayList<Notification_data>();
        
        String selectQuery = "SELECT  * FROM " + TABLE_NOTIFICATION;
 
        SQLiteDatabase db = this.getWritableDatabase();
        Cursor cursor = db.rawQuery(selectQuery, null);
 
       
        if (cursor.moveToFirst()) {
            do {
                Notification_data contact = new Notification_data();
                contact.setID(Integer.parseInt(cursor.getString(0)));
                contact.setName(cursor.getString(1));
               
                contactList.add(contact);
            } while (cursor.moveToNext());
        }
 
       
        return contactList;
    }
 
    
    public int updateContact(Notification_data contact) {
        SQLiteDatabase db = this.getWritableDatabase();
 
        ContentValues values = new ContentValues();
        values.put(KEY_ID, contact.getID());
        values.put(KEY_NOTIFICATION, contact.getName());
        
 
     
        return db.update(TABLE_NOTIFICATION, values, KEY_ID + " = ?",
                new String[] { String.valueOf(contact.getID()) });
    }
 

    public void deleteContact(Notification_data contact) {
        SQLiteDatabase db = this.getWritableDatabase();
        db.delete(TABLE_NOTIFICATION, KEY_ID + " = ?",
                new String[] { String.valueOf(contact.getID()) });
        db.close();
    }
 
 
    
    public int getContactsCount() {
        String countQuery = "SELECT  * FROM " + TABLE_NOTIFICATION;
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor = db.rawQuery(countQuery, null);
        cursor.close();
 

        return cursor.getCount();
    }
 
}

package com.d_andaman;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import com.d_andaman.Meanu.Array_adapter;

import android.content.Context;
import android.graphics.Typeface;
import android.os.Bundle;
import android.support.v4.app.FragmentActivity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;

public class list_class extends FragmentActivity {

public List<String> list = new ArrayList<>();
	
	public ListView listview;
	public Database db;
	public static int pos=0;
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.notification_list1);
		
		
		db=new Database(this);
		
		
		
		
		List<Notification_data> contacts = db.getAllContacts();       
        
        for (Notification_data cn : contacts) {
            String log = cn.getName();
         list.add(log);   
        }
        
        listview=(ListView) findViewById(R.id.notilist1);
		
		Array_adapter array=new Array_adapter(this, R.layout.dis,list);
		
		listview.setAdapter(array); 
		
	}
	
	
	
	
	public class Array_adapter extends ArrayAdapter {
		
		Typeface typeFace=Typeface.createFromAsset(getAssets(),"fonts/fontawesome-webfont.ttf");
		public Array_adapter(Context context, int resource,List<String> item) {
			super(context, resource,item);
			
		}
		
		
		
		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
				View row = convertView;
				
				int[] color={R.color.icon1,R.color.icon2,R.color.icon3,
						R.color.icon4,R.color.icon5,R.color.icon6};
				
				if(row == null) {
				row = LayoutInflater.from(getContext()).inflate(R.layout.dis, parent, false);
				}
				String item = (String) getItem(position);
				
				LinearLayout rel=(LinearLayout)row.findViewById(R.id.img1);
				TextView img=(TextView) row.findViewById(R.id.img_text);
				TextView text = (TextView)row.findViewById(R.id.txt1);
				//ImageView img1=(ImageView) row.findViewById(R.id.callbut);
				
				if(position%5==0){
					pos=0;
				}
				
				text.setTypeface(typeFace);
			    rel.setBackgroundResource(color[pos++]);
			   	img.setText(""+(position+1));
			  // 	img1.setImageResource(R.drawable.call);
				text.setText(item);
				return row;
				}
			
			

	}
	
}


package com.d_andaman;

import java.io.ObjectOutputStream.PutField;

import com.d_andaman.Meanu.Array_adapter;

import android.annotation.SuppressLint;
import android.app.ActionBar;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.GridView;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.AdapterView.OnItemClickListener;

@SuppressLint("NewApi")
public class Relif extends Activity{
	
	 GridView listView;
	
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.relif);
		
		ActionBar action = getActionBar();
		action.setIcon(R.drawable.meanu_bar);
		action.setTitle("Relif Shelter");
		
		 listView = (GridView) findViewById(R.id.reliflist);
			
			String[] values = new String[] { "South andaman", "Lamba Line", "Air Port",
					  "Kamraj Nagar", "Goal Ghar","Car Nicobar","Great Nicobar","Kamorta","Katchal","Little Andaman","Teressa"};	
		Array_adapter array=new Array_adapter(this, R.layout.relif_image,R.id.reliftext,values);
		
			listView.setAdapter(array); 
			
			listView.setOnItemClickListener(new OnItemClickListener() {
				  @Override
				  public void onItemClick(AdapterView<?> parent, View view,
				    int position, long id) {
					
			    
				   int itemPosition  = position;
				   
				   
				   String  itemValue    = (String) listView.getItemAtPosition(position);
					  
				   if(itemPosition==0){
					   Intent i = new Intent(getApplicationContext(),
								Map.class);
					   startActivity(i);
				   }else{
				   	Intent i = new Intent(getApplicationContext(),
								Show_relif_image.class);
				   	i.putExtra("arg", itemPosition);
						startActivity(i);
					}

				  }
				}); 
		
		
		

	}
	
	
	public class Array_adapter extends ArrayAdapter {

		public Array_adapter(Context context, int resource,int text,String[] item) {
			super(context, resource,text,item);
			
		}
		
		
		
		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
				View row = convertView;
				
				int[] img={R.drawable.map1,R.drawable.map2,R.drawable.map3,R.drawable.map4,R.drawable.map5,R.drawable.car_nicobar,
						R.drawable.great_nicobar,R.drawable.kamorta,R.drawable.katchal,R.drawable.little_andman,R.drawable.teressa};
				
				if(row == null) {
				row = LayoutInflater.from(getContext()).inflate(R.layout.relif_image, parent, false);
				}
				String item = (String) getItem(position);
				
				ImageView left =(ImageView)row.findViewById(R.id.relifimage);
				
				TextView text = (TextView)row.findViewById(R.id.reliftext);
				
				left.setImageResource(img[position]);
				
				text.setText(item);
				return row;
				}
			
			

	}
	
	
	
}


package com.d_andaman;


import java.net.MalformedURLException;
import java.net.URL;

import com.d_andaman.R;


import android.annotation.SuppressLint;

import android.app.Activity;

import android.app.ProgressDialog;
import android.content.Context;
import android.content.Intent;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.Bundle;

import android.view.View;

import android.widget.Button;
import android.widget.EditText;

import android.widget.TextView;
import android.widget.Toast;

@SuppressLint("NewApi")
public class MainActivity extends Activity {
	private Button btnLogin;
	//private Button btnLinkToRegister;
	private EditText inputEmail;
	//private EditText inputPassword; 
	private ProgressDialog pDialog;
	private TextView status;
	private Button menu;
	private static int id;
	private static String phone_no;
	private URL url ;


	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.login);
		hideSystemUI();
		//fetch_weather();
		//Get_weather.get_weather();

		inputEmail = (EditText) findViewById(R.id.email);
		//inputPassword = (EditText) findViewById(R.id.password);
		btnLogin = (Button) findViewById(R.id.btnLogin);

		pDialog = new ProgressDialog(this);
		pDialog.setCancelable(false);

		btnLogin.setOnClickListener(new View.OnClickListener(){

			@Override
			public void onClick(View v) {
				String email = inputEmail.getText().toString().trim();
				int internet;
				if (!email.isEmpty()) {
					if(email.length()==10){
						internet=check_internet();
						//int id=getid();
						if(internet==1){
							int id=1;
							if(id!=0){

								Intent i = new Intent(getApplicationContext(),
										New_menu.class);
								startActivity(i);
								
							}else{login();}

						}else{ Intent i = new Intent(getApplicationContext(),
								Startpopup.class);
								startActivity(i);  
								}

					}else{Toast.makeText(getApplicationContext(),
							"Please enter the correct phone number", Toast.LENGTH_SHORT).show();	}

				}else {Toast.makeText(getApplicationContext(),
						"Please enter the credentials!", Toast.LENGTH_SHORT).show();	}




			}

		});



		try {
			int w_id=1;
			url = new URL("http://192.168.83.1/dand_api/weather.php?w_id="+w_id);
		} catch (MalformedURLException e) {

			e.printStackTrace();
		}

	}





	private void fetch_weather() {
		ConnectivityManager connMgr = (ConnectivityManager)
				getSystemService(Context.CONNECTIVITY_SERVICE);
		NetworkInfo networkInfo = connMgr.getActiveNetworkInfo();

		if (networkInfo != null && networkInfo.isConnected()) {


			new Weather(getBaseContext()).execute(url);

		}

		else
		{
			status.setText("No network connection available.");

		}

	}

	private int check_internet() {
		ConnectivityManager connMgr = (ConnectivityManager)
				getSystemService(Context.CONNECTIVITY_SERVICE);
		NetworkInfo networkInfo = connMgr.getActiveNetworkInfo();

		if (networkInfo != null && networkInfo.isConnected()) {return 1;}

		else
		{return 0;}

	}


	private void hideSystemUI() {
		getWindow().getDecorView().setSystemUiVisibility(
				View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
				| View.SYSTEM_UI_FLAG_HIDE_NAVIGATION 
				| View.SYSTEM_UI_FLAG_FULLSCREEN 
				| View.SYSTEM_UI_FLAG_IMMERSIVE
				);
	}

	public void login(){

		ConnectivityManager connMgr = (ConnectivityManager)
				getSystemService(Context.CONNECTIVITY_SERVICE);
		NetworkInfo networkInfo = connMgr.getActiveNetworkInfo();

		if (networkInfo != null && networkInfo.isConnected()) {


			String phone = inputEmail.getText().toString();
			new Login(getBaseContext(),1).execute(phone);

		}

		else
		{
			//setid(-1);
			//status.setText("No network connection available.");

		}

	}



	public static void setid(int i){
		id=i;
	}

	public static int getid(){
		return id;
	}

	public static void setphone(String i){
		phone_no=i;
	}

	public static String getphone(){
		return phone_no;
	}


}




package com.d_andaman;

import android.view.Menu;

public class action_bar {
	
	

}


package com.d_andaman;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URI;
import java.net.URL;

import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import android.annotation.SuppressLint;
import android.content.Context;
import android.os.AsyncTask;
import android.widget.Toast;



@SuppressLint("NewApi")
public class Weather  extends AsyncTask<URL,Void,JSONObject>{

	private Context context;



	public Weather(Context context) {
		this.context = context;
	}   



	@Override
	protected JSONObject doInBackground(URL... params) {
		HttpURLConnection connection=null;

		try{
			connection=(HttpURLConnection) params[0].openConnection();
			int response=connection.getResponseCode();

			if(response==HttpURLConnection.HTTP_OK){
				StringBuilder builder=new StringBuilder();

				try(BufferedReader reader =new BufferedReader(new InputStreamReader(connection.getInputStream()))){

					String line;

					while((line=reader.readLine())!=null){
						builder.append(line);
					}

				}catch (IOException e) {e.printStackTrace();}

				return new JSONObject(builder.toString());

			}else{
				Toast.makeText(context, "eror in connection1", Toast.LENGTH_SHORT).show();
			}
		}catch(Exception e){e.printStackTrace();}
		return null;

		

	}


	@Override
	protected void onPostExecute(JSONObject result) {

		int i=convertjson(result);
		Get_weather.set_weather(i);

	}


	private int convertjson(JSONObject result) {


		try{
			JSONArray list=result.getJSONArray("id");
			JSONObject u=list.getJSONObject(0);

			int i=u.getInt("max");
			//JSONObject location=u.getJSONObject("location");
			//JSONObject pincode=u.getJSONObject("pincode");
			
			return i;
			
		}catch(JSONException e){e.printStackTrace();		return 0;}
		
	}

}

package com.d_andaman;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;

import java.net.URL;
import java.net.URLConnection;
import java.net.URLEncoder;



import android.app.Activity;
import android.content.Context;


import android.os.AsyncTask;
import android.os.Bundle;

import android.view.View;

import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

public class Send_popup extends Activity{


	private TextView txt1;
	private Button cancle,send;
	//private String subject,message;
	//private Alert_database db;
	//private View view;
	private String lat,lon,message;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.send_popup);
		//db = new Alert_database(this);
		cancle=(Button) findViewById(R.id.cancle);
		send=(Button) findViewById(R.id.send);

		txt1=(TextView)findViewById(R.id.alert_message);


		lat=getIntent().getExtras().getString("latitude");
		lon=getIntent().getExtras().getString("longitude");
		message=getIntent().getExtras().getString("message");


		if(lat==null&lon==null){
			txt1.setText(message+"\tWe are still fetching your location please wait and send it after some time");
		}else{
			txt1.setText(message+"\t"+lat+"\t"+lon);
		}

		send.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
				String message=txt1.getText().toString().trim();

				new Send_popup_data(getBaseContext()).execute(message);
				
			}
		});

		cancle.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
				//closeContextMenu();
				finish();

			}
		});

	}


	public class Send_popup_data  extends AsyncTask<String,Void,String>{



		public Send_popup_data(Context context) {


		}

		protected void onPreExecute(){}

		@Override
		protected String doInBackground(String... arg0) {




			try{
				String message = (String)arg0[0];

				String link="http://192.168.83.1/dand_api/recive_alert.php";
				String data  = URLEncoder.encode("message", "UTF-8") + "=" + URLEncoder.encode(message, "UTF-8");


				URL url = new URL(link);
				URLConnection conn = url.openConnection(); 

				conn.setDoOutput(true); 
				OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream()); 

				wr.write( data ); 
				wr.flush(); 

				BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));

				StringBuilder sb = new StringBuilder();
				String line = null;

				while((line = reader.readLine()) != null)
				{
					sb.append(line);
					break;
				}

				return  sb.toString();

			}
			catch(Exception e){e.printStackTrace();}



			return null;
		}

		@Override
		protected void onPostExecute(String result){

			Toast.makeText(getApplicationContext(),"Message Send",Toast.LENGTH_SHORT).show();


		}






	}



}





package com.d_andaman;

import com.d_andaman.R;

import android.annotation.SuppressLint;
import android.app.ActionBar;
import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.Intent;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;


@SuppressLint("NewApi")
public class Register extends Activity{
	private Button register;
	private Button login;
	private EditText name;
	private EditText user;
	private EditText password;
	private ProgressDialog pDialog;
	private TextView status;
	
	@Override
protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.register);
		
		ActionBar action = getActionBar();
		action.setIcon(R.drawable.meanu_bar);
		action.setTitle("Register");
		
		
		name = (EditText) findViewById(R.id.name);
		user = (EditText) findViewById(R.id.username);
		password=(EditText)findViewById(R.id.password);
		login = (Button) findViewById(R.id.btnLinkToLoginScreen);
		register = (Button) findViewById(R.id.btnRegister);
		status = (TextView) findViewById(R.id.regst);
		pDialog = new ProgressDialog(this);
		pDialog.setCancelable(false);
		
		
		register.setOnClickListener(new View.OnClickListener(){

			@Override
			public void onClick(View v) {
				String f_name = name.getText().toString().trim();
				String f_user = user.getText().toString().trim();
				String f_password=password.getText().toString().trim();

			
				if (!f_name.isEmpty() && !f_user.isEmpty()&&!f_password.isEmpty()) {
					
					register_api(f_name,f_user,f_password);

				} else {
					// Prompt user to enter credentials
					Toast.makeText(getApplicationContext(),
							"Please enter the credentials!", Toast.LENGTH_SHORT).show();
				}
			} });
		
		login.setOnClickListener(new View.OnClickListener(){

			@Override
			public void onClick(View v) {
				
					Intent i = new Intent(getApplicationContext(),
						MainActivity.class);
						startActivity(i);
						finish();


				
			} });
		
		
		
	}
	
	
	
	public void register_api(String name,String user,String password){
		
	
		ConnectivityManager connMgr = (ConnectivityManager)
				getSystemService(Context.CONNECTIVITY_SERVICE);
		NetworkInfo networkInfo = connMgr.getActiveNetworkInfo();
		
		 if (networkInfo != null && networkInfo.isConnected()) {
			 
		
		new Reg_user(this,status,1).execute(name,user,password);
		 														
		 }else{
			 status.setText("No network connection available.");}
		 			
	}

}


package com.d_andaman;

public class User {
	

public final String name;
public final String location;
public final long pincode;


public User(String name, String location, long pincode) {
	super();
	this.name = name;
	this.location = location;
	this.pincode = pincode;
}

}


package com.d_andaman;

import java.lang.ref.Reference;

import android.annotation.SuppressLint;
import android.app.ActionBar;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.AdapterView.OnItemClickListener;

@SuppressLint("NewApi")
public class Showuser extends Activity{

	private ListView listView;
	private Button refresh;

	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.user_list);
		
		ActionBar action = getActionBar();
		action.setIcon(R.drawable.meanu_bar);
		action.setTitle("Contact");
		
		TextView tex=(TextView) findViewById(R.id.user_name);
		
		SharedPreferences sp = getSharedPreferences("my_db",Context.MODE_PRIVATE);
		String name=sp.getString("name","User");
		
		tex.setText("Welcome	\t"+name.toUpperCase());
		
		listView = (ListView) findViewById(R.id.userlist);
		//refresh=(Button) findViewById(R.id.refresh);
		
		
		
		

		String[] values = new String[] {"Aniket","Sandeepa","Sonia" };
		
		Array_adapter array=new Array_adapter(this, R.layout.contact_list,R.id.name,values);

		listView.setAdapter(array); 
		
		listView.setOnItemClickListener(new OnItemClickListener() {
			  @Override
			  public void onItemClick(AdapterView<?> parent, View view,
			    int position, long id) {
				
				  Message d=new Message();
				  d.show(getFragmentManager(), null);
				  
				  }}); 
		
		
		refresh.setOnClickListener(new View.OnClickListener() {
			
			@Override
			public void onClick(View v) {
				Intent i = new Intent(getApplicationContext(),
						Readdata.class);
				startActivity(i);
				
				
				
				
				
			}
		});
		
		
		
	}
//-------------------------------------------------------------------------------------------------
	
	
	public class Array_adapter extends ArrayAdapter {

		public Array_adapter(Context context, int resource,int text,String[] item) {
			super(context, resource,text,item);

		}



		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			View row = convertView;
			String[] number= new String[]
					{"FCI godown","SBI atm","DBRAIT"};
			
			if(row == null) {
				row = LayoutInflater.from(getContext()).inflate(R.layout.contact_list, parent, false);
			}
			String item = (String) getItem(position);
			
			ImageView img=(ImageView) row.findViewById(R.id.contact_img);
			
			ImageView img1=(ImageView) row.findViewById(R.id.callbut);

			TextView left =(TextView)row.findViewById(R.id.number);

			TextView text = (TextView)row.findViewById(R.id.name);
			
			left.setText(number[position]);
			img.setImageResource(R.drawable.orange);
			img1.setImageResource(R.drawable.call);
			text.setText(item);
			return row;
		}



	}
	
}


package com.d_andaman;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.URI;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLEncoder;

import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;


import android.app.ProgressDialog;
import android.content.Context;

import android.os.AsyncTask;
import android.widget.TextView;


public class Login  extends AsyncTask<String,Void,JSONObject>{

   private Context context;
   private int byGetOrPost = 0;
   
   
   public Login(Context context,int flag) {
      this.context = context;
    
      byGetOrPost = flag;
      
   }
   
   protected void onPreExecute(){
	   
	   	

   }
   
   @Override
   protected JSONObject doInBackground(String... arg0) {
      if(byGetOrPost == 0){ //means by Get Method
      
      try{
         String phone = (String)arg0[0];
         String link = "http://127.0.0.1/login.php?phone="+phone;
         
         
         HttpClient client = new DefaultHttpClient();
         HttpGet request = new HttpGet();
         request.setURI(new URI(link));
         HttpResponse response = client.execute(request);
         BufferedReader in = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));

           StringBuffer sb = new StringBuffer("");
           String line="";
           
           while ((line = in.readLine()) != null) {
              sb.append(line);
              break;
            }
            in.close();
           
         }catch(Exception e){return null;}
      }
      else{
         try{
            String phone = (String)arg0[0];
            
            String link="http://192.168.83.1/dand_api/check.php";
            String data  = URLEncoder.encode("phone", "UTF-8") + "=" + URLEncoder.encode(phone, "UTF-8");
            
            
            URL url = new URL(link);
            URLConnection conn = url.openConnection(); 
            
            conn.setDoOutput(true); 
            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream()); 
            
            wr.write( data ); 
            wr.flush(); 
            
            BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            
            StringBuilder sb = new StringBuilder();
            String line = null;
            
            while((line = reader.readLine()) != null)
            {
               sb.append(line);
               break;
            }
           
        return new JSONObject(sb.toString());
            
         }
         catch(Exception e){e.printStackTrace();}
         
      }
      
	return null;
   }
   
   @Override
   protected void onPostExecute(JSONObject result){
	  int i=convertjson(result);
	  
	  MainActivity.setid(i);
	
    }
   
   
   private int convertjson(JSONObject result) {
	   
	   
		try{
			JSONArray id=result.getJSONArray("id");
			
			JSONObject u=id.getJSONObject(0);
				
			return u.getInt("id");
		}catch(JSONException e){e.printStackTrace();		}
		return 0;
	}

 
        
}

package com.d_andaman;

import android.annotation.SuppressLint;
import android.app.ActionBar;
import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.view.ContextMenu;
import android.view.Menu;
import android.view.View;
import android.view.ContextMenu.ContextMenuInfo;
import android.widget.Button;

@SuppressLint("NewApi")
public class Flash extends Activity{

	private Button but;

	@Override

	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.flash);
		hideSystemUI();  
		Thread background = new Thread() {
			public void run() {

				try {
					sleep(2*1000);
					Intent i=new Intent(getBaseContext(),MainActivity.class);
					startActivity(i);
					finish();

				} catch (Exception e) {

				}
			}
		};


		background.start();
	}


	private void hideSystemUI() {
		getWindow().getDecorView().setSystemUiVisibility(
				View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
				| View.SYSTEM_UI_FLAG_HIDE_NAVIGATION // hide nav bar
				| View.SYSTEM_UI_FLAG_FULLSCREEN // hide status bar
				// remove the following flag for version < API 19
				| View.SYSTEM_UI_FLAG_IMMERSIVE
				);
	}


}


package com.d_andaman;

import android.app.Activity;
import android.os.Bundle;

public class Family extends Activity {

	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.add_coordinate);
	
	}
}
	



package com.d_andaman;

import android.app.Activity;
import android.app.ProgressDialog;




import android.content.Intent;
import android.os.Bundle;

import android.view.View;

import android.widget.Button;
import android.widget.TextView;

public class Dialog extends Activity{


	private TextView txt,txt1;
	private Button cancle,send;
	private String subject,message;
	private Alert_database db;
	private View view;
	private String lat,lon;
	private GPSTracker gps;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.popup);
		db = new Alert_database(this);
		cancle=(Button) findViewById(R.id.cancle);
		send=(Button) findViewById(R.id.send);
		txt=(TextView) findViewById(R.id.alert_sub);
		txt1=(TextView)findViewById(R.id.alert_message);


		//lat=getIntent().getExtras().getString("latitude");
		//lon=getIntent().getExtras().getString("longitude");

		send.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {


				subject=txt.getText().toString().trim();
				message=txt1.getText().toString().trim();
				db.addContact(new Alert_list(1,message));
				 lat=null;
				 lon=null;
				gps = new GPSTracker(Dialog.this);

				// check if GPS enabled		
		        if(gps.canGetLocation()){
		        	
		        	double latitude = gps.getLatitude();
		        	double longitude = gps.getLongitude();
		        	 lat=""+latitude;
		        	 lon=""+longitude;
		        }
		        
		        if(lat==null&lon==null){
		        	ProgressDialog dialog = new ProgressDialog(getApplicationContext()); 
					dialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);
					dialog.setMessage("Fetching your location...");
					dialog.setIndeterminate(true);
					dialog.setCanceledOnTouchOutside(false);
					dialog.show();
				}else{
		        
		        
				Intent i = new Intent(getApplicationContext(),
						Send_popup.class);
				i.putExtra("latitude",lat);
				i.putExtra("longitude", lon);
				i.putExtra( "message",message);
				startActivity(i);
				finish();
				}
			}
		});

		cancle.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
				//closeContextMenu();
				finish();

			}
		});

	}



}





package com.d_andaman;

public class Noti {
  public String notification;
  
  public Noti(String name){
	  super();
		this.notification = name;
		
  }
}


package com.d_andaman;

public class Get_weather {
	
	public static  int weather;
	
	public Get_weather(){
		
	}
	
	public static void set_weather(int w){
		weather=w;
		
	}
	
	public static int get_weather(){
		return weather;
	}

}


package com.d_andaman;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.annotation.SuppressLint;
import android.net.rtp.RtpStream;
import android.os.AsyncTask;

@SuppressLint("NewApi")
public class Getuser1 extends AsyncTask<URL, Void, JSONObject>{

	
	private Readdata read;
	
	
	@Override
	protected JSONObject doInBackground(URL... params) {
		HttpURLConnection connection=null;
		
		try{
			connection=(HttpURLConnection)params[0].openConnection();
			int response=connection.getResponseCode();
			
			if(response==HttpURLConnection.HTTP_OK){
				StringBuilder builder=new StringBuilder();
				
				try(BufferedReader reader =new BufferedReader(new InputStreamReader(connection.getInputStream()))){
					
					String line;
					
					while((line=reader.readLine())!=null){
						builder.append(line);
					}
					
				}catch (IOException e) {e.printStackTrace();}
				
				return new JSONObject(builder.toString());
				
				}else{
					//make tost
				}
		}catch(Exception e){e.printStackTrace();}
		
		finally{connection.disconnect();}
		
		return null;
	
	}
	
	
	@Override
	protected void onPostExecute(JSONObject result) {
		
		convertjson(result);
		read.useradapter.notifyDataSetChanged();
		read.listview.smoothScrollToPosition(0);
	}


	private void convertjson(JSONObject result) {
		read.userlist.clear();
		try{
			JSONArray list=result.getJSONArray("post");
			
			for(int i=0;i<list.length();i++){
				
				JSONObject u=list.getJSONObject(i);
				
				//JSONObject name=u.getJSONObject("name");
				//JSONObject location=u.getJSONObject("location");
				//JSONObject pincode=u.getJSONObject("pincode");
				
				read.userlist.add(new User(u.getString("name"),
						u.getString("location"), u.getLong("pincode")));
				
			}
		}catch(JSONException e){e.printStackTrace();		}
		
	}
	

}


package com.d_andaman;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.annotation.SuppressLint;
import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.IBinder;
import android.widget.Toast;

public class Notificationservice extends Service{

	@Override
	public IBinder onBind(Intent intent) {
		return null;
	}
	
	public void update_notification(){
		@SuppressLint("NewApi")
		class Getuser extends AsyncTask<URL, Void, JSONObject>{

				
			private Context context;


			public Getuser(Context context) {
			      this.context = context;
			   }
				
				
				@Override
				protected JSONObject doInBackground(URL... params) {
					HttpURLConnection connection=null;
					
					try{
						connection=(HttpURLConnection) params[0].openConnection();
						int response=connection.getResponseCode();
						
						if(response==HttpURLConnection.HTTP_OK){
							StringBuilder builder=new StringBuilder();
							
							try(BufferedReader reader =new BufferedReader(new InputStreamReader(connection.getInputStream()))){
								
								String line;
								
								while((line=reader.readLine())!=null){
									builder.append(line);
								}
								
							}catch (IOException e) {e.printStackTrace();}
							
							return new JSONObject(builder.toString());
							
							}else{
								Toast.makeText(context, "eror in connection1", Toast.LENGTH_SHORT).show();
							}
					}catch(Exception e){e.printStackTrace();}
					
					finally{connection.disconnect();}
					
					return null;
				
				}
				
				
				@Override
				protected void onPostExecute(JSONObject result) {
					
					convertjson(result);
				}


				private void convertjson(JSONObject result) {
					//userlist.clear();
					try{
						JSONArray list=result.getJSONArray("posts");
						
						for(int i=0;i<list.length();i++){
							
							JSONObject u=list.getJSONObject(i);
							
							JSONObject post=u.getJSONObject("post");
							//JSONObject location=u.getJSONObject("location");
							//JSONObject pincode=u.getJSONObject("pincode");
							
							//userlist.add(new User(post.getString("name"),
									//post.getString("location"), post.getLong("pincode")));
							
						}
					}catch(JSONException e){e.printStackTrace();		}
					
				}
				

			}
	}

}


package com.d_andaman;

import com.d_andaman.Contact.Array_adapter;

import android.os.Bundle;
import android.annotation.SuppressLint;
import android.app.ActionBar;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.graphics.Typeface;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.GridView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.AdapterView.OnItemClickListener;

@SuppressLint("NewApi")
public class Do_dont extends Activity {
	public static int pos=0;
	
	ListView listView;
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.dos);

		ActionBar action = getActionBar();
		action.setIcon(R.drawable.circle1);
		action.setTitle("Do and Donts");

		listView = (ListView) findViewById(R.id.do_list);

		String[] values = new String[] { "Earthquake","Cyclone","Tsunami","Fire","Flood","Add Do/Donts"};	

		Array_adapter array=new Array_adapter(this, R.layout.vedio_grid,values);

		listView.setAdapter(array); 
		
		listView.setOnItemClickListener(new OnItemClickListener() {
			  @Override
			  public void onItemClick(AdapterView<?> parent, View view,
			    int position, long id) {
				
		    
			   int itemPosition  = position;
			   
			   
			   String  itemValue    = (String) listView.getItemAtPosition(position);
				  
			 
			   
			   
			   Intent i = new Intent(getApplicationContext(),
						Display_dos.class);
			   i.putExtra("arg", itemPosition);
			   
				startActivity(i);
			  
			  
			 
			  }

			
			}); 
		
}



	public class Array_adapter extends ArrayAdapter {

		
		Typeface typeFace=Typeface.createFromAsset(getAssets(),"fonts/Zekton.ttf");
		public Array_adapter(Context context, int resource,String[] item) {
			super(context, resource,item);

		}



		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			View row = convertView;

			int[] img={R.drawable.earthquake_ved,R.drawable.cyclone_vid,R.drawable.tsunami_vid,
					R.drawable.fire_vid,R.drawable.flood_vid,
					R.drawable.mock_drill};


			if(row == null) {
				row = LayoutInflater.from(getContext()).inflate(R.layout.vedio_grid, parent, false);
			}
			String item = (String) getItem(position);

			ImageView left =(ImageView)row.findViewById(R.id.ved_img);

			TextView des = (TextView)row.findViewById(R.id.ved_dis);
			TextView text = (TextView)row.findViewById(R.id.ved_text);

			left.setImageResource(img[position]);
			text.setTypeface(typeFace);
			text.setText(item);
			des.setText("Guidelines from Disaster Management Office");
			return row;
			}



	}

}

package com.d_andaman;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;



import android.app.Activity;
import android.content.Context;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;

import android.widget.ListView;
import android.widget.TextView;

public class Alert extends Activity{
public List<String> list = new ArrayList<>();
	
	public ListView listview;
	public Alert_database db;
	public static int pos=0;
	
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.alert_list);
		
		
		db=new Alert_database(this);
		
		
		
		
		List<Alert_list> contacts = db.getAllContacts();       
        
        for (Alert_list cn : contacts) {
            String log = cn.getName() ;
         list.add(log);   
        }
        
        listview=(ListView) findViewById(R.id.alert);
		
		Array_adapter array=new Array_adapter(this, R.layout.dis,list);
		
		listview.setAdapter(array); 
		
	}
	
	
	
	
	public class Array_adapter extends ArrayAdapter {

		public Array_adapter(Context context, int resource,List<String> item) {
			super(context, resource,item);
			
		}
		
		
		
		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
				View row = convertView;
				
				
				
				if(row == null) {
				row = LayoutInflater.from(getContext()).inflate(R.layout.dis, parent, false);
				}
				String item = (String) getItem(position);
				
				LinearLayout rel=(LinearLayout)row.findViewById(R.id.img1);
				TextView img=(TextView) row.findViewById(R.id.img_text);
				TextView text = (TextView)row.findViewById(R.id.txt1);
				ImageView ig=(ImageView)row.findViewById(R.id.delimg);
				//ImageView img1=(ImageView) row.findViewById(R.id.callbut);
				
				if(position%5==0){
					pos=0;
				}
				
			    rel.setBackgroundResource(R.color.but_can);
			   	img.setText(""+(position+1));
			   	ig.setImageResource(R.drawable.trash);
			   //	img1.setImageResource(R.drawable.call);
				text.setText(item);
				return row;
				}
			
			

	}
}


package com.d_andaman;



import android.os.Bundle;
import android.annotation.SuppressLint;
import android.app.ActionBar;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.graphics.Typeface;
import android.view.LayoutInflater;

import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.GridView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;

import android.widget.TextView;
import android.widget.AdapterView.OnItemClickListener;

@SuppressLint("NewApi")
public class Kit_display extends Activity {
	ListView listView;
	public static int pos=0;
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.survival_kit_display);

		ActionBar action = getActionBar();
		action.setIcon(R.drawable.circle1);
		action.setTitle("Survival kit");

		listView = (ListView) findViewById(R.id.kit_grid);

		String[] values = new String[] { "Documents","Emergency Equipments","Etable items","Clothes","Liquid cash","Add kit"};

		Array_adapter array=new Array_adapter(this,R.layout.vedio_grid,values);

		listView.setAdapter(array); 

		listView.setOnItemClickListener(new OnItemClickListener() {
			@Override
			public void onItemClick(AdapterView<?> parent, View view,
					int position, long id) {


				int itemPosition  = position;


				String  itemValue    = (String) listView.getItemAtPosition(position);
				Intent i = new Intent(getApplicationContext(),
						Survival_kit.class);
				i.putExtra("arg", itemPosition);

				startActivity(i);



			}


		}); 

	}



	public class Array_adapter extends ArrayAdapter {
		Typeface typeFace=Typeface.createFromAsset(getAssets(),"fonts/Zekton.ttf");
		public Array_adapter(Context context, int resource,String[] item) {
			super(context, resource,item);

		}



		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			View row = convertView;

			


			if(row == null) {
				row = LayoutInflater.from(getContext()).inflate(R.layout.vedio_grid, parent, false);
			}
			String item = (String) getItem(position);

			ImageView left =(ImageView)row.findViewById(R.id.ved_img);

			TextView des = (TextView)row.findViewById(R.id.ved_dis);
			TextView text = (TextView)row.findViewById(R.id.ved_text);

			left.setImageResource(R.drawable.docs);
			text.setTypeface(typeFace);
			text.setText(item);
			des.setText("Disaster Management Office");
			return row;
		}



	}

}

package com.d_andaman;

public class Location_Manager {


		public static double[] latitude={11.635262,11.636114,11.634526,11.635177,11.634720,11.634395,11.634484,
		11.637274,11.365971,11.632782,11.633023,11.633232,11.633055,11.634483,11.634173,11.634630,11.634320,
		11.634252};
		public static double[] longitude={92.717994,92.717001,92.717275,92.715821,92.714662,92.718326,92.719678,
		92.720858,92.712897,92.713874,92.719791,92.720944,92.720896,92.720756,92.722757,92.718247,92.71805,
		92.716681};
		public static String[] place={"PDME Hostel","Dr.B.R.Ambedkar institute","SBI Dollygunj Branch","Hotel North Ref",
		"Sovtech","Regional medical research Center","Sahre-E-bangal","DBRAIT Boys Hostel",
		"Food Corporation of India","DRDO Guest House","Chevrolet Workshop","TSG Grand","Chaaroborty Hospital",
		"Andaman Blue Sea","dollygunj Junction",
		"HDFC ATM","North Reff Hotel","ISKON vally"};
		public static double[] sub={};

	public String checklocation(double lat,double lon){
		int near=0;
		double a=lat+lon;
		double gap=0;
		double min=distance(latitude[0],longitude[0],lat,lon);
		for(int i=0;i<latitude.length;i++){
			gap=distance(latitude[i],longitude[i],lat,lon);
			
			if(gap<=min){
				min=gap;
				near=i;
			}
			

		}

		

		return "Near to\t"+place[near];
	}
	
	
	private static double distance(double lat1, double lon1, double lat2, double lon2) {
		double theta = lon1 - lon2;
		double dist = Math.sin(deg2rad(lat1)) * Math.sin(deg2rad(lat2)) + Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.cos(deg2rad(theta));
		dist = Math.acos(dist);
		dist = rad2deg(dist);
		dist = dist * 60 * 1.1515;
		
			return (dist);
	}
	
	
	
	private static double deg2rad(double deg) {
		return (deg * Math.PI / 180.0);
	}

	
	private static double rad2deg(double rad) {
		return (rad * 180 / Math.PI);
	}




}


package com.d_andaman;

import android.animation.Animator;
import android.animation.ValueAnimator;
import android.app.Activity;
import android.os.Bundle;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;

public class Slidedown extends Activity {

	private LinearLayout mLinearLayout;
    private LinearLayout mLinearLayoutHeader;
	
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.swip);

        mLinearLayout = (LinearLayout) findViewById(R.id.expandable);
        //set visibility to GONE
        mLinearLayout.setVisibility(View.GONE);
        mLinearLayoutHeader = (LinearLayout) findViewById(R.id.header);
 
        mLinearLayoutHeader.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                if (mLinearLayout.getVisibility()==View.GONE){
                    expand();
                }else{
                    collapse();
                }
            }
        });
}
	
    
    private void expand() {
        //set Visible
        mLinearLayout.setVisibility(View.VISIBLE);
        
        final int widthSpec = View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED);
        final int heightSpec = View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED);
        mLinearLayout.measure(widthSpec, heightSpec);
        
        ValueAnimator mAnimator = slideAnimator(0, mLinearLayout.getMeasuredHeight());
        mAnimator.start();
   }
    
    private void collapse() {
        int finalHeight = mLinearLayout.getHeight();

        ValueAnimator mAnimator = slideAnimator(finalHeight, 0);
     
        mAnimator.addListener(new Animator.AnimatorListener() {
             
        	
        	@Override
             public void onAnimationEnd(Animator animator) {
                //Height=0, but it set visibility to GONE
                 mLinearLayout.setVisibility(View.GONE);
             }

			@Override
			public void onAnimationStart(Animator animation) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void onAnimationCancel(Animator animation) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void onAnimationRepeat(Animator animation) {
				// TODO Auto-generated method stub
				
			}
            
        });
        
        mAnimator.start();
   }
   

   private ValueAnimator slideAnimator(int start, int end) {
	   
	    ValueAnimator animator = ValueAnimator.ofInt(start, end);
	  
	    animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
	         @Override
	         public void onAnimationUpdate(ValueAnimator valueAnimator) {
	            //Update Height
	            int value = (Integer) valueAnimator.getAnimatedValue();
	            ViewGroup.LayoutParams layoutParams = mLinearLayout.getLayoutParams();
	            layoutParams.height = value;
	            mLinearLayout.setLayoutParams(layoutParams);
	         }
	    });
	    return animator;
	}
    
    
    
}


package com.d_andaman;
import android.annotation.SuppressLint;
import android.app.ActionBar;
import android.app.Activity;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

@SuppressLint("NewApi")
public class Location_class extends Activity {
	
	Button btnShowLocation,stoplocation;
	TextView lat,lat1;
	TextView lon,lon1;
	
	GPSTracker gps;
	
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.location);
        
        ActionBar action = getActionBar();
		action.setIcon(R.drawable.circle1);
		action.setTitle("Location Manager");

        btnShowLocation = (Button) findViewById(R.id.showlocation);
        stoplocation=(Button)findViewById(R.id.stop);
        
        lat=(TextView) findViewById(R.id.lat);
        lon=(TextView) findViewById(R.id.lon);
       // lat1=(TextView) findViewById(R.id.lat1);
       // lon1=(TextView) findViewById(R.id.lon1);
        
        btnShowLocation.setOnClickListener(new View.OnClickListener() {
			
			@Override
			public void onClick(View arg0) {		
				// create class object
		        gps = new GPSTracker(Location_class.this);

				// check if GPS enabled		
		        if(gps.canGetLocation()){
		        	
		        	double latitude = gps.getLatitude();
		        	double longitude = gps.getLongitude();
		        	String latstr=""+latitude;
		        	String lonstr=""+longitude;
		        	
		        	//new Map_service(getApplicationContext(),lat,lon).execute(latstr,lonstr);
		        	
		        	
		        	lat.setText("LAT"+latstr);
		        	lon.setText("LON"+lonstr);
		        	//lat1.setText("LAT:"+latitude);
		        	//lon1.setText("LON:"+longitude);
		        	
		        }else{
		        	gps.showSettingsAlert();
		        }
		        }
			
			
		});
    
    stoplocation.setOnClickListener(new View.OnClickListener() {
		
		@Override
		public void onClick(View v) {
			 gps.stopUsingGPS();
			 Toast.makeText(getApplicationContext(),
						"Service stoped", Toast.LENGTH_SHORT).show();
			
		}
	});
    
    }
    
}

package com.d_andaman;
import java.util.ArrayList;
import java.util.List;
 
import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
 
public class Alert_database extends SQLiteOpenHelper {
 
    private static final int DATABASE_VERSION = 1;
 
  
    private static final String DATABASE_NAME = "aniket";
 
    
    private static final String TABLE_NOTIFICATION = "alert_table";
   
 
   
    private static final String KEY_ID = "id";
    private static final String KEY_NOTIFICATION = "alert_txt";
   
 
    public  Alert_database(Context context) {
        super(context, DATABASE_NAME, null, DATABASE_VERSION);
    }
    
 
    // Creating Tables
    @Override
    public void onCreate(SQLiteDatabase db) {
        String CREATE_NOTIFICATION_TABLE = "CREATE TABLE " + TABLE_NOTIFICATION + "("
                + KEY_ID + " INTEGER," + KEY_NOTIFICATION + " TEXT)";
       
        db.execSQL(CREATE_NOTIFICATION_TABLE);
    }
 
    
    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
        // Drop older table if existed
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_NOTIFICATION);
 
        
        onCreate(db);
    }
 
  
    
    void addContact(Alert_list contact) {
        SQLiteDatabase db = this.getWritableDatabase();
 
        ContentValues values = new ContentValues();
        values.put(KEY_NOTIFICATION, contact.getName()); 
        values.put(KEY_ID, contact.getID()); 
 
   
        db.insert(TABLE_NOTIFICATION, null, values);
        db.close(); 
    }
 
  
    Alert_list getContact(int id) {
        SQLiteDatabase db = this.getReadableDatabase();
 
        Cursor cursor = db.query(TABLE_NOTIFICATION, new String[] { KEY_ID,
                KEY_NOTIFICATION }, KEY_ID + "=?",
                new String[] { String.valueOf(id) }, null, null, null, null);
        if (cursor != null)
            cursor.moveToFirst();
 
        Alert_list contact = new Alert_list(Integer.parseInt(cursor.getString(0)),
                cursor.getString(1));
       
        return contact;
    }
     
   
    public List<Alert_list> getAllContacts() {
        List<Alert_list> contactList = new ArrayList<Alert_list>();
        
        String selectQuery = "SELECT  * FROM " + TABLE_NOTIFICATION;
 
        SQLiteDatabase db = this.getWritableDatabase();
        Cursor cursor = db.rawQuery(selectQuery, null);
 
       
        if (cursor.moveToFirst()) {
            do {
            	Alert_list contact = new Alert_list();
                contact.setID(Integer.parseInt(cursor.getString(0)));
                contact.setName(cursor.getString(1));
               
                contactList.add(contact);
            } while (cursor.moveToNext());
        }
 
        // return contact list
        return contactList;
    }
 
    // Updating single contact
    public int updateContact(Notification_data contact) {
        SQLiteDatabase db = this.getWritableDatabase();
 
        ContentValues values = new ContentValues();
        values.put(KEY_ID, contact.getID());
        values.put(KEY_NOTIFICATION, contact.getName());
        
 
     
        return db.update(TABLE_NOTIFICATION, values, KEY_ID + " = ?",
                new String[] { String.valueOf(contact.getID()) });
    }
 

    public void deleteContact(Alert_list contact) {
        SQLiteDatabase db = this.getWritableDatabase();
        db.delete(TABLE_NOTIFICATION, KEY_ID + " = ?",
                new String[] { String.valueOf(contact.getID()) });
        db.close();
    }
 
 
    
    public int getContactsCount() {
        String countQuery = "SELECT  * FROM " + TABLE_NOTIFICATION;
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor = db.rawQuery(countQuery, null);
        cursor.close();
 

        return cursor.getCount();
    }
 
}

package com.d_andaman;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;

public class Connection {

	
	
}


package com.d_andaman;

import java.util.List;

import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.ImageView;
import android.widget.TextView;

public class Notiadapter extends ArrayAdapter<Noti>{

	public Notiadapter(Context context, List<Noti> user) {
		
		super(context,-1,user);
		
	}
	
	
	@Override
	public View getView(int position, View convertView, ViewGroup parent) {
			View row = convertView;
			
			
			
			if(row == null) {
			row = LayoutInflater.from(getContext()).inflate(R.layout.seoc_message, parent, false);
			}
			Noti item = getItem(position);
			
			ImageView left =(ImageView)row.findViewById(R.id.notiimage);
			
			TextView name = (TextView)row.findViewById(R.id.notitext);
			TextView date = (TextView)row.findViewById(R.id.notidate);
		
			
			left.setImageResource(R.drawable.feedback2);
			
			name.setText(item.notification);
			date.setText("25-1-2017");
			
			
			return row;
			}

}


package com.d_andaman;

import com.d_andaman.New_menu.Array_adapter;

import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Context;

import android.graphics.Typeface;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.ImageView;

import android.widget.ListView;
import android.widget.TextView;
import android.widget.AdapterView.OnItemClickListener;

public class Ved_img extends Activity{
	TextView status;
	ListView listview;

	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.ved_img);
		status=(TextView) findViewById(R.id.st_text);

		//checkconnection();

		listview=(ListView) findViewById(R.id.vidlist);

		String[] video_name={"Appu video for Earthquake","Appu video for Tsunami","Appu video for Fire",
				"Appu video for Flood","Appu video for Cyclone","Mock drill by Disaster Management at School",
		"Disaster Management of Andman Nicobar Official video"};

		Array_adapter array=new Array_adapter(this, R.layout.vedio_grid,video_name);

		listview.setAdapter(array); 


		listview.setOnItemClickListener(new OnItemClickListener() {
			@Override
			public void onItemClick(AdapterView<?> parent, View view,
					int position, long id) {

				checkconnection();

			}


		}); 


	}

	private void checkconnection() {
		ConnectivityManager connMgr = (ConnectivityManager)
				getSystemService(Context.CONNECTIVITY_SERVICE);
		NetworkInfo networkInfo = connMgr.getActiveNetworkInfo();

		if (networkInfo != null && networkInfo.isConnected()) {

			ProgressDialog dialog = new ProgressDialog(this); 
			dialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);
			dialog.setMessage("Loading. Please wait...");
			dialog.setIndeterminate(true);
			dialog.setCanceledOnTouchOutside(false);
			dialog.show();

		}

		else
		{
			status.setText("NO NETWORK");

		}
	}

	public class Array_adapter extends ArrayAdapter {


		Typeface typeFace=Typeface.createFromAsset(getAssets(),"fonts/Zekton.ttf");
		public Array_adapter(Context context, int resource,String[] item) {
			super(context, resource,item);

		}



		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			View row = convertView;

			int[] img={R.drawable.earthquake_ved,R.drawable.tsunami_vid,R.drawable.fire_vid,R.drawable.flood_vid,
					R.drawable.cyclone_vid,R.drawable.mock_drill,R.drawable.andman_nicobar};


			if(row == null) {
				row = LayoutInflater.from(getContext()).inflate(R.layout.vedio_grid, parent, false);
			}
			String item = (String) getItem(position);

			ImageView left =(ImageView)row.findViewById(R.id.ved_img);

			TextView des = (TextView)row.findViewById(R.id.ved_dis);
			TextView text = (TextView)row.findViewById(R.id.ved_text);

			left.setImageResource(img[position]);
			text.setTypeface(typeFace);
			text.setText(item);
			des.setText("Disaster Management Office");
			return row;
		}

	}
}


package com.d_andaman;

import android.app.Activity;
import android.os.Bundle;

public class Add_coordinate extends Activity{

	
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.main);
	}
}




package com.d_andaman;

import android.annotation.SuppressLint;
import android.app.ActionBar;
import android.app.FragmentTransaction;
import android.content.Intent;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentPagerAdapter;
import android.support.v4.view.ViewPager;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;

/*@SuppressLint("NewApi")
public class Tab_layout extends FragmentActivity implements ActionBar.TabListener {

   
    AppSectionsPagerAdapter mAppSectionsPagerAdapter;

   
    ViewPager mViewPager;

    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.notification);

       
        mAppSectionsPagerAdapter = new AppSectionsPagerAdapter(getSupportFragmentManager());

        // Set up the action bar.
        final ActionBar actionBar = getActionBar();

        // Specify that the Home/Up button should not be enabled, since there is no hierarchical
        // parent.
        actionBar.setHomeButtonEnabled(false);

        // Specify that we will be displaying tabs in the action bar.
        actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);

        // Set up the ViewPager, attaching the adapter and setting up a listener for when the
        // user swipes between sections.
        mViewPager = (ViewPager) findViewById(R.id.pager);
        mViewPager.setAdapter(mAppSectionsPagerAdapter);
        mViewPager.setOnPageChangeListener(new ViewPager.SimpleOnPageChangeListener() {
            @Override
            public void onPageSelected(int position) {
                // When swiping between different app sections, select the corresponding tab.
                // We can also use ActionBar.Tab#select() to do this if we have a reference to the
                // Tab.
                actionBar.setSelectedNavigationItem(position);
            }
        });
        
        String[] text={"SEOC Message","Weather","Alert"};
        
        //TextView lable=(TextView) findViewById(R.id.textView1);

        // For each of the sections in the app, add a tab to the action bar.
        for (int i = 0; i < mAppSectionsPagerAdapter.getCount(); i++) {
            // Create a tab with text corresponding to the page title defined by the adapter.
            // Also specify this Activity object, which implements the TabListener interface, as the
            // listener for when this tab is selected.
        	//lable.setText(text[i]);
        	actionBar.addTab(
                    actionBar.newTab()
                    .setText(text[i])
                    .setTabListener(this));
        	
        	}
        
       
    }

    @Override
    public void onTabUnselected(ActionBar.Tab tab, FragmentTransaction fragmentTransaction) {
    }

    @Override
    public void onTabSelected(ActionBar.Tab tab, FragmentTransaction fragmentTransaction) {
        // When the given tab is selected, switch to the corresponding page in the ViewPager.
        mViewPager.setCurrentItem(tab.getPosition());
    }

    @Override
    public void onTabReselected(ActionBar.Tab tab, FragmentTransaction fragmentTransaction) {
    }

    
    public static class AppSectionsPagerAdapter extends FragmentPagerAdapter {

        public AppSectionsPagerAdapter(FragmentManager fm) {
            super(fm);
        }

        @Override
        public Fragment getItem(int i) {
            switch (i) {
                case 0: return new LaunchpadSectionFragment();
                case 1: return new Weather();

                default:
                    
                    Fragment fragment = new DummySectionFragment();
                    Bundle args = new Bundle();
                    args.putInt(DummySectionFragment.ARG_SECTION_NUMBER, i + 1);
                    fragment.setArguments(args);
                    return fragment;
            }
        }

        @Override
        public int getCount() {
            return 3;
        }

        @Override
        public CharSequence getPageTitle(int position) {
            return "Section " + (position + 1);
        }
    }

  
    public static class LaunchpadSectionFragment extends Fragment {

        @Override
        public View onCreateView(LayoutInflater inflater, ViewGroup container,
                Bundle savedInstanceState) {
            View rootView = inflater.inflate(R.layout.seoc_message, container, false);

            // Demonstration of a collection-browsing activity.
           /* rootView.findViewById(R.id.demo_collection_button)
                    .setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View view) {
                            Intent intent = new Intent(getActivity(), CollectionDemoActivity.class);
                            startActivity(intent);
                        }
                    });

            // Demonstration of navigating to external activities.
            rootView.findViewById(R.id.demo_external_activity)
                    .setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View view) {
                            // Create an intent that asks the user to pick a photo, but using
                            // FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET, ensures that relaunching
                            // the application from the device home screen does not return
                            // to the external activity.
                            Intent externalActivityIntent = new Intent(Intent.ACTION_PICK);
                            externalActivityIntent.setType("image/*");
                            externalActivityIntent.addFlags(
                                    Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);
                            startActivity(externalActivityIntent);
                        }
                    });

            return rootView;
        }
    }

    
    public static class Weather extends Fragment {

        @Override
        public View onCreateView(LayoutInflater inflater, ViewGroup container,
                Bundle savedInstanceState) {
            View rootView = inflater.inflate(R.layout.weather, container, false);
            return rootView;
        }
    }
    
    
   
    public static class DummySectionFragment extends Fragment {

        public static final String ARG_SECTION_NUMBER = "section_number";

        @Override
        public View onCreateView(LayoutInflater inflater, ViewGroup container,
                Bundle savedInstanceState) {
            View rootView = inflater.inflate(R.layout.alert, container, false);
            Bundle args = getArguments();
            ((TextView) rootView.findViewById(android.R.id.text1)).setText(
                    getString(R.string.fire, args.getInt(ARG_SECTION_NUMBER)));
            return rootView;
        }
    }
}*/


package com.d_andaman;

import com.d_andaman.R;

import android.R.layout;
import android.R.menu;
import android.annotation.SuppressLint;
import android.app.ActionBar;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.graphics.Typeface;
import android.net.Uri;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.view.animation.Animation;
import android.view.animation.Animation.AnimationListener;
import android.view.animation.AnimationUtils;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.PopupMenu;
import android.widget.PopupMenu.OnMenuItemClickListener;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.AdapterView.OnItemClickListener;

@SuppressLint("NewApi")
public class Meanu extends Activity implements OnMenuItemClickListener{
	ListView listView ;
	Button alert;
	Animation animFadein;
	View layout;
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.main);
		
		TextView tv = (TextView) this.findViewById(R.id.movingtext);  
        tv.setSelected(true);
		animFadein = AnimationUtils.loadAnimation(getApplicationContext(),
                R.anim.slide_down);  
		
		
		ActionBar action = getActionBar();
		action.setIcon(R.drawable.meanu_bar);
		action.setTitle("Menu");
		
		 listView = (ListView) findViewById(R.id.menu_list);
		 
		 alert=(Button) findViewById(R.id.alert_but);
		 
		 layout=findViewById(R.id.linearlayout3);
		
		String[] values = new String[] { "Your blog","Do's and Dont's", "Videos and Images",
				  "Relief Shelter map", "Feedback","Contact","Make note"};	
	Array_adapter array=new Array_adapter(this, R.layout.list_view,R.id.list_text,values);
	
		listView.setAdapter(array); 
		
		
		
		
		listView.setOnItemClickListener(new OnItemClickListener() {
			  @Override
			  public void onItemClick(AdapterView<?> parent, View view,
			    int position, long id) {
				
		    
			   int itemPosition  = position;
			   
			   
			   String  itemValue    = (String) listView.getItemAtPosition(position);
				  
			   if(itemPosition==0){
				   String MY_DB = "my_db";
					SharedPreferences sp = getSharedPreferences(MY_DB,Context.MODE_PRIVATE);
					  
					   boolean hasVisited = sp.getBoolean("hasVisited",false);
					   if (!hasVisited) {
						   Intent i = new Intent(getApplicationContext(),
									Userprofil.class);
							startActivity(i);
							
						Editor e = sp.edit();
						e.putBoolean("hasVisited", true);
						e.commit();

						   
						}else{
				   
				   Intent i = new Intent(getApplicationContext(),
							Readdata.class);
					startActivity(i);
						}
					
			   }
			   if(itemPosition==1){
				   Intent i = new Intent(getApplicationContext(),
							Do_dont.class);
					startActivity(i);
					
			   }
			   if(itemPosition==2){
				   Intent i = new Intent(getApplicationContext(),
							Ved_img.class);
					startActivity(i);
					
			   }
			   if(itemPosition==3){
				   Intent i = new Intent(getApplicationContext(),
							Relif.class);
					startActivity(i);
					
			   }
			   if(itemPosition==4){
				   Intent i = new Intent(getApplicationContext(),
							feedback.class);
					startActivity(i);
					
			   }
			   if(itemPosition==5){
				   Intent i = new Intent(getApplicationContext(),
							Contact.class);
					startActivity(i);
				
			   }
			   if(itemPosition==6){
				   Intent i = new Intent(getApplicationContext(),
							list_class.class);
					startActivity(i);
				
			   }
			   
			  
			    
			 
			  }

			
			}); 
		
		
		
		alert.setOnClickListener(new View.OnClickListener(){

			@Override
			public void onClick(View v) {
				Intent i = new Intent(getApplicationContext(),
						Dialog.class);
				startActivity(i);
			}   });
		
		
		//animFadein.setAnimationListener(this);
		 
        // button click event
        layout.setOnClickListener(new View.OnClickListener() {
 
            @Override
            public void onClick(View v) {
            	Intent i = new Intent(getApplicationContext(),
						Slidedown.class);
				startActivity(i);
            }
        });
		
	}
	
	
	
	public class Array_adapter extends ArrayAdapter {

		
		
		
		
		Typeface typeFace=Typeface.createFromAsset(getAssets(),"fonts/museo_slab_300-webfont.ttf");
		
		public Array_adapter(Context context, int resource,int text,String[] item) {
			super(context, resource,text,item);
			
		}
		
		
		
		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
				View row = convertView;
				
				int[] img={R.drawable.user,R.drawable.do_dont,R.drawable.vedio,R.drawable.relif1,R.drawable.feedback2,R.drawable.contact1,R.drawable.contact};
				
				if(row == null) {
				row = LayoutInflater.from(getContext()).inflate(R.layout.list_view, parent, false);
				}
				String item = (String) getItem(position);
				
				ImageView left =(ImageView)row.findViewById(R.id.list_img);
				
				TextView text = (TextView)row.findViewById(R.id.list_text);
				
				left.setImageResource(img[position]);
				
				text.setTypeface(typeFace);
				text.setText(item);
				return row;
				}
			
			

	}
	
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		getMenuInflater().inflate(R.menu.head, menu);
		return true;
}
	
	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
	    // Handle item selection
		View view=findViewById(R.id.setting);
		//View view1=findViewById(R.id.notification);
	    switch (item.getItemId()) {
	        case R.id.setting:
			Popup(view);
			return super.onOptionsItemSelected(item);
			case R.id.notification:
	        notification();
	        return super.onOptionsItemSelected(item);
	      default:
	        return super.onOptionsItemSelected(item);
	    }
	    
	}
	
	
	

	public void Popup(View v) {
	    PopupMenu popup = new PopupMenu(this, v);
	    popup.setOnMenuItemClickListener( this);
	    MenuInflater inflater = popup.getMenuInflater();
	    
	    inflater.inflate(R.menu.actions, popup.getMenu());
	    popup.show();
	}
	
	public boolean onMenuItemClick(MenuItem item) {
	    switch (item.getItemId()) {
	        case R.id.about1:
	            display_popup();
	            return true;
	       // case R.id.setting1:
	            //delete(item);
	        default:return false;
	    }
	}
	
	public void display_popup(){
		
		String url = "http://www.dmn.nic.in";
		Intent i = new Intent(Intent.ACTION_VIEW);
		i.setData(Uri.parse(url));
		startActivity(i);
	}

	
	
private void notification() {
	Intent i = new Intent(getApplicationContext(),
			Seoc_message.class);
	startActivity(i);
	finish();
		
	}
	
	
	
}



package com.d_andaman;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.URI;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLEncoder;


import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;

import android.content.Context;
import android.os.AsyncTask;
import android.widget.TextView;

public class Reg_user  extends AsyncTask<String,Void,String>{ 

	private TextView statusField;
	private Context context;




	public  Reg_user(Context context,TextView statusField,int flag) {
		this.context = context;
		this.statusField = statusField;



	}

	protected void onPreExecute(){  }

	@Override
	protected String doInBackground(String... params) {

		try{
			String name = (String)params[0];
			String location = (String)params[1];
			String pincode=(String)params[2];
			String lat=(String)params[3];
			String lon =(String)params[4];
			String id=""+MainActivity.getid();
			String link="http://192.168.83.1/dand_api/register.php";
			String data  = URLEncoder.encode("name", "UTF-8") + "=" + URLEncoder.encode(name, "UTF-8");
			data += "&" + URLEncoder.encode("id", "UTF-8") + "=" + URLEncoder.encode(id, "UTF-8");
			data += "&" + URLEncoder.encode("location", "UTF-8") + "=" + URLEncoder.encode(location, "UTF-8");
			data+="&"+ URLEncoder.encode("pincode", "UTF-8") + "=" + URLEncoder.encode(pincode, "UTF-8");
			data+="&"+ URLEncoder.encode("lat", "UTF-8") + "=" + URLEncoder.encode(lat, "UTF-8");
			data+="&"+ URLEncoder.encode("lon", "UTF-8") + "=" + URLEncoder.encode(lon, "UTF-8");

			URL url = new URL(link);
			URLConnection conn = url.openConnection(); 

			conn.setDoOutput(true); 
			OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream()); 

			wr.write( data ); 
			wr.flush(); 

			BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));

			StringBuilder sb = new StringBuilder();
			String line = null;


			while((line = reader.readLine()) != null)
			{
				sb.append(line);
				break;
			}

			return sb.toString();
		}
		catch(Exception e){
			return new String("Exception: " + e.getMessage());
		}
	}

	protected void onPostExecute(String result){

		this.statusField.setText(result);
		String s=statusField.getText().toString().trim();

	}




}


package com.d_andaman;

 class ids {
public static int id;

public static  void setid(int i){
id=i;
}

public static int getid(){
	return id;
}

}


package com.d_andaman;

import java.util.HashMap;
import java.util.List;

import android.content.Context;
import android.graphics.Typeface;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.webkit.WebView.FindListener;
import android.widget.BaseExpandableListAdapter;
import android.widget.ImageView;
import android.widget.TextView;

public class Expandablelist extends BaseExpandableListAdapter {

	private Context _context;
	private List<String> _listDataHeader; 
	private HashMap<String, List<String>> _listDataChild;

	public Expandablelist(Context context, List<String> listDataHeader,
			HashMap<String, List<String>> listChildData) {
		this._context = context;
		this._listDataHeader = listDataHeader;
		this._listDataChild = listChildData;
	}

	@Override
	public Object getChild(int groupPosition, int childPosititon) {
		return this._listDataChild.get(this._listDataHeader.get(groupPosition))
				.get(childPosititon);
	}

	@Override
	public long getChildId(int groupPosition, int childPosition) {
		return childPosition;
	}

	@Override
	public View getChildView(int groupPosition, final int childPosition,
			boolean isLastChild, View convertView, ViewGroup parent) {

		final String childText = (String) getChild(groupPosition, childPosition);

		if (convertView == null) {
			LayoutInflater infalInflater = (LayoutInflater) this._context
					.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
			convertView = infalInflater.inflate(R.layout.expand_list, null);
		}

		TextView txtListChild = (TextView) convertView.findViewById(R.id.dodont);
		txtListChild.setText(childText);
		return convertView;
	}

	@Override
	public int getChildrenCount(int groupPosition) {
		return this._listDataChild.get(this._listDataHeader.get(groupPosition))
				.size();
	}

	@Override
	public Object getGroup(int groupPosition) {
		return this._listDataHeader.get(groupPosition);
	}

	@Override
	public int getGroupCount() {
		return this._listDataHeader.size();
	}

	@Override
	public long getGroupId(int groupPosition) {
		return groupPosition;
	}

	@Override
	public View getGroupView(int groupPosition, boolean isExpanded,
			View convertView, ViewGroup parent) {

		String headerTitle = (String) getGroup(groupPosition);
		if (convertView == null) {
			LayoutInflater infalInflater = (LayoutInflater) this._context
					.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
			convertView = infalInflater.inflate(R.layout.vedio_grid, null);
		}

		int[] img={R.drawable.earthquake_ved,R.drawable.cyclone_vid,R.drawable.tsunami_vid,
				R.drawable.fire_vid,R.drawable.flood_vid,
				R.drawable.mock_drill};




		ImageView left =(ImageView)convertView.findViewById(R.id.ved_img);

		TextView des = (TextView)convertView.findViewById(R.id.ved_dis);
		TextView text = (TextView)convertView.findViewById(R.id.ved_text);

		left.setImageResource(img[groupPosition]);

		des.setText("Guidelines from Disaster Management Office");

		text.setSelected(true);

		text.setText(headerTitle);

		return convertView;
	}

	@Override
	public boolean hasStableIds() {
		return false;
	}

	@Override
	public boolean isChildSelectable(int groupPosition, int childPosition) {
		return true;
	}
}

package com.d_andaman;

import android.app.Activity;
import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

public class Userprofil extends Activity {

	private EditText name;
	private EditText location;
	private EditText pincode;
	private Button create;

	private TextView status;
	private String sta;
	private GPSTracker gps;
	private String lat ,lon;


	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.user_profil);


		name=(EditText) findViewById(R.id.name);
		location=(EditText) findViewById(R.id.location);
		pincode=(EditText) findViewById(R.id.pincode);
		create=(Button) findViewById(R.id.create);
		status=(TextView) findViewById(R.id.status);
		gps = new GPSTracker(Userprofil.this);
		lat=null;
		lon=null;
		if(gps.canGetLocation()){

			double latitude = gps.getLatitude();
			double longitude = gps.getLongitude();
			lat=""+latitude;
			lon=""+longitude;
		}

		create.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
				String name1=name.getText().toString().trim();
				String location1=location.getText().toString().trim();
				String pincode1=pincode.getText().toString().trim();

				String MY_DB = "my_db";
				SharedPreferences sp = getSharedPreferences(MY_DB,Context.MODE_PRIVATE);

				Editor e = sp.edit();
				e.putString("name",name1);
				e.commit();


				if(!name1.isEmpty()&&!location1.isEmpty()&&!pincode1.isEmpty()){

					registeruser(name1,location1,pincode1,lat,lon);

				}else{Toast.makeText(getApplicationContext(),"Please enter the credentials!", Toast.LENGTH_SHORT).show();}

			}		});

}




	private void registeruser(String name1, String location1,String pincode1,String lat,String lon) {



		ConnectivityManager connMgr = (ConnectivityManager)
				getSystemService(Context.CONNECTIVITY_SERVICE);
		NetworkInfo networkInfo = connMgr.getActiveNetworkInfo();



		if (networkInfo != null && networkInfo.isConnected()) {
			new Reg_user(this,status,1).execute(name1,location1,pincode1,lat,lon);

			int id1=1;//MainActivity.getid();

			String MY_DB = "my_db";
			SharedPreferences sp = getSharedPreferences(MY_DB,Context.MODE_PRIVATE);

			Editor e = sp.edit();
			e.putInt("id",id1);
			e.commit();

		}
		else
		{
			status.setText("No network connection available.");
		}


	}




}


package com.d_andaman;

import android.app.ProgressDialog;
import android.content.Context;

import android.os.AsyncTask;
import android.widget.TextView;


public class Map_service extends AsyncTask<String,Void,String>{
   private TextView lat,lon;
   private Context context;
   private Location_Manager m;

   
   
   public  Map_service(Context contex,TextView lat,TextView lon) {
     this.context=contex;
     this.lat=lat;
     this.lon=lon;
      m=new Location_Manager();
   }
   
   protected void onPreExecute(){
	  
	  
   }
   
   @Override
   protected String doInBackground(String... arg0) {
     String lat= (String)arg0[0];
     String lon= (String)arg0[1];
     
     double lat1=Double.parseDouble(lat);
     double lon1=Double.parseDouble(lon);
     	
     String location=m.checklocation(lat1, lon1);
     
     return location;
   }
   
   @Override
   protected void onPostExecute(String result){
	
	   if(result=="X"){
		   lat.setText("Location Service is Unavilable to find your location");
		   lon.setText("Your location is still under discovery");
	   }else{
		   lon.setText(result);
	   }
	   
    }


   
  

 
        
}

package com.d_andaman;

import android.app.AlertDialog;
import android.app.Service;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Bundle;
import android.os.IBinder;
import android.provider.Settings;
import android.util.Log;

public class GPSTracker extends Service implements LocationListener {

	private final Context mContext;

	// flag for GPS status
	boolean isGPSEnabled = false;

	// flag for network status
	boolean isNetworkEnabled = false;

	// flag for GPS status
	boolean canGetLocation = false;

	Location location; // location
	double latitude; // latitude
	double longitude; // longitude

	// The minimum distance to change Updates in meters
	private static final long MIN_DISTANCE_CHANGE_FOR_UPDATES = 10; // 10 meters

	// The minimum time between updates in milliseconds
	private static final long MIN_TIME_BW_UPDATES = 1000 * 60 * 1; // 1 minute

	// Declaring a Location Manager
	protected LocationManager locationManager;

	public GPSTracker(Context context) {
		this.mContext = context;
		getLocation();
	}

	public Location getLocation() {
		try {
			locationManager = (LocationManager) mContext
					.getSystemService(LOCATION_SERVICE);

			
			isGPSEnabled = locationManager
					.isProviderEnabled(LocationManager.GPS_PROVIDER);

			
			isNetworkEnabled = locationManager
					.isProviderEnabled(LocationManager.NETWORK_PROVIDER);

			if (!isGPSEnabled && !isNetworkEnabled) {
			
			} else {
				this.canGetLocation = true;
				// First get location from Network Provider
				if (isNetworkEnabled) {
					locationManager.requestLocationUpdates(
							LocationManager.NETWORK_PROVIDER,
							MIN_TIME_BW_UPDATES,
							MIN_DISTANCE_CHANGE_FOR_UPDATES, this);
					Log.d("Network", "Network");
					if (locationManager != null) {
						location = locationManager
								.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);
						if (location != null) {
							latitude = location.getLatitude();
							longitude = location.getLongitude();
						}
					}
				}
			
				if (isGPSEnabled) {
					if (location == null) {
						locationManager.requestLocationUpdates(
								LocationManager.GPS_PROVIDER,
								MIN_TIME_BW_UPDATES,
								MIN_DISTANCE_CHANGE_FOR_UPDATES, this);
						Log.d("GPS Enabled","GPS Enabled");
						if (locationManager != null) {
							location = locationManager
									.getLastKnownLocation(LocationManager.GPS_PROVIDER);
							if (location != null) {
								latitude = location.getLatitude();
								longitude = location.getLongitude();
							}
						}
					}
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		return location;
	}
	
	
	public void stopUsingGPS(){
		if(locationManager != null){
			locationManager.removeUpdates(GPSTracker.this);
		}		
	}
	
	
	public double getLatitude(){
		if(location != null){
			latitude = location.getLatitude();
		}
		
		// return latitude
		return latitude;
	}
	
	
	public double getLongitude(){
		if(location != null){
			longitude = location.getLongitude();
		}
		
		// return longitude
		return longitude;
	}
	
	
	public boolean canGetLocation() {
		return this.canGetLocation;
	}
	
	
	public void showSettingsAlert(){
		AlertDialog.Builder alertDialog = new AlertDialog.Builder(mContext);
   	 
        // Setting Dialog Title
        alertDialog.setTitle("GPS is settings");
 
        // Setting Dialog Message
        alertDialog.setMessage("GPS is not enabled. Do you want to go to settings menu?");
 
        // On pressing Settings button
        alertDialog.setPositiveButton("Settings", new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog,int which) {
            	Intent intent = new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS);
            	mContext.startActivity(intent);
            }
        });
 
        // on pressing cancel button
        alertDialog.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int which) {
            dialog.cancel();
            }
        });
 
       
        alertDialog.show();
	}

	@Override
	public void onLocationChanged(Location location) {
	}

	@Override
	public void onProviderDisabled(String provider) {
	}

	@Override
	public void onProviderEnabled(String provider) {
	}

	@Override
	public void onStatusChanged(String provider, int status, Bundle extras) {
	}

	@Override
	public IBinder onBind(Intent arg0) {
		return null;
	}

}


